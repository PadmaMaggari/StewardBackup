/*
Author:Rathod Veerender
Version:0.0.1
Date of Creation:02-04-2020
Date of Modification:15-04-2020,16-04-2020,24-04-2020,04-05-2020
Description:Business flow pick Request from RTGS_OUT_SB_TCP_REQ queue and Generate request in esb and send to t24 
			and validate the response 
			and send it to outgoing router queue(ALL_SB_TCP_RES).
 			
*/
BROKER SCHEMA com.stewardbank.co.zw.rtgsoutgoing
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER;
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER;
DECLARE ERROR_AUDIT_Q EXTERNAL CHARACTER;
CREATE COMPUTE MODULE rtgsOutgoing_GenerateReqTo24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToT24();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateReqToT24() BEGIN
		SET Environment.usr= InputRoot.MQRFH2.usr;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		SET Environment.reqMsg = CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CALL DBLogging(Environment.usr.Id,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName,inRef.SystemsTraceAuditNumber_011,inRef.DateLocalTransaction_013,inRef.RetrievalReferenceNumber_037,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		SET Environment.dbLog = OutputRoot.XMLNSC;
		PROPAGATE TO TERMINAL 'out1';
		CALL DBLogging(Environment.dbLog.DBLogging.MSGID,Environment.dbLog.DBLogging.MESSAGE,'T24 Request',ApplicationLabel,BrokerName,inRef.SystemsTraceAuditNumber_011,inRef.DateLocalTransaction_013,inRef.RetrievalReferenceNumber_037,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-- =================== END DB RAW AUDIT LOGGING ==============
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		DECLARE env REFERENCE TO Environment.Variables;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		--set response queue and tcpip connection id in environment
		DECLARE resQ CHARACTER Environment.usr.resQueueName;
		DECLARE connId CHARACTER Environment.usr.Id;
		SET Environment.Variables.ResponseQ = resQ;
		SET Environment.Variables.TcpIp.ConnectionId = connId;			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','[Log4jError]Initializing the log4j path error') INTO rc;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','..............start RTGS Outgoing logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','Request to RTGS_OUT_SB_IN::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.DFDL ENCODING 546 CCSID 1208 SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER)) INTO rc;
		--field to field mapping
		CALL FieldToFieldMapping(inRef,outRef,'');
		CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','Request To T24::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER )) INTO rc;
	END;
	
END MODULE;

CREATE COMPUTE MODULE rtgsOutgoingPostilionReq_RouteBasedOnProtocol
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'ERROR','[Log4jError]Initializing the log4j path error') INTO rc;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing[Log4j] path error';		
		END IF;
		SET OutputRoot = InputRoot;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','Final Response to ResponseQ:'||CAST(ASBITSTREAM(OutputRoot ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','..............end of RTGS Outgoing logging...........') INTO rc;
	
	END;
END MODULE;

CREATE COMPUTE MODULE rtgsOutgoingCaptureException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'ERROR','[Log4jError]Initializing the log4j path error') INTO rc;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Id CHARACTER CAST(Environment.usr.Id AS CHARACTER);
		-- ============Error  Logging in DB===================
		DECLARE exe_Desc CHARACTER CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);  
		CALL Error_DBLogging(CAST(Environment.usr.Id AS CHARACTER),Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,'','','',excpRef.excpNumber,'',outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-- ============END Error  Logging in DB===================
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'RTGSOutgoing';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'RTGSOutgoing');
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
	END;
END MODULE;

CREATE COMPUTE MODULE rtgsOutgoingT24Req_GenerateReqToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateResToPostilion();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateResToPostilion() BEGIN
		SET Environment.Properties = InputRoot.Properties;
		SET Environment.MQMD = InputRoot.MQMD;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		SET Environment.t24Res = CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
		CALL DBLogging(Environment.usr.Id,Environment.t24Res,'T24 Response',ApplicationLabel,BrokerName,inRef.SystemsTraceAuditNumber_011,inRef.DateLocalTransaction_013,inRef.RetrievalReferenceNumber_037,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		SET Environment.t24Res = OutputRoot.XMLNSC;
		PROPAGATE TO TERMINAL 'out1';
		CALL DBLogging(Environment.t24Res.DBLogging.MSGID,Environment.t24Res.DBLogging.MESSAGE,'Application Response',ApplicationLabel,BrokerName,inRef.SystemsTraceAuditNumber_011,inRef.DateLocalTransaction_013,inRef.RetrievalReferenceNumber_037,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-- =================== END DB RAW AUDIT LOGGING ==============
		SET OutputRoot.Properties = Environment.Properties;
		SET OutputRoot.MQRFH2.usr = Environment.usr;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'ERROR','[Log4jError]Initializing the log4j path error') INTO rc;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		--field to field mapping
		CALL FieldToFieldMapping(inRef,outRef,'');
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.Variables.ResponseQ;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','Response To Postilion::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER )) INTO rc;
	END;
END MODULE;


