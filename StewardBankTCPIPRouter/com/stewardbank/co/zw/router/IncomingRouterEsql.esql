/*
Author:Rathod Veerender
Version:1.0
Date of Creation:30-03-2020
Date of Modification:06-04-2020 (We will get the queue details from DB based on Processing code and those details will be stored in Cache).
Description: This is the TCPIP router flow.It will route the message to actual transaction flow based on Processing Code.
This TCPIP Router would be triggered whenever Postilion initiate the request to ESB.
*/
BROKER SCHEMA com.stewardbank.co.zw.router
PATH com.stewardbank.co.zw.common.esql;
DECLARE getDBDetailsCache SHARED ROW;
DECLARE esbPcode SHARED ROW;
CREATE COMPUTE MODULE IncomingRouterFlow_RouteToInterfaceBasedonProcessingCode
DECLARE DSN EXTERNAL CHARACTER '';
DECLARE SCH EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER '';
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE rc BOOLEAN;
DECLARE NETWORKPROCESSCODE EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ISO EXTERNAL CHARACTER '';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN FALSE;
	END;
	
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','=====================================  INCOMMING  ROUTER =================================') INTO rc ;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		DECLARE logRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		DECLARE jsonRef REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot AS jsonRef DOMAIN('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON AS jsonRef NAME ('Data');
		--CALL JSONLogMessage(logRef,jsonRef);
		SET jsonRef = logRef;
		SET Environment.Variables.reqMsg = getPayLoad('JSON',jsonRef,encodeRef,ccidRef);
		SET OutputRoot.JSON = NULL;
		DECLARE version CHARACTER inRef.MTI_Version;
		DECLARE class CHARACTER inRef.MTI_MessageClass;
		DECLARE funct CHARACTER inRef.MTI_MessageFunction;
		DECLARE origin CHARACTER inRef.MTI_MessageOrigin;
		DECLARE procCodeData CHARACTER;
		DECLARE DBDetails ROW;
		DECLARE QueueName CHARACTER;
	--	DECLARE refProcessingCode CHARACTER inRef.ProcessingCode_003; 
		DECLARE channel CHARACTER inRef.RoutingInformationPostilionPrivate_127_3;
		DECLARE tcpipDetails REFERENCE TO InputLocalEnvironment.TCPIP.Receive.ConnectionDetails;
		DECLARE procCode,reqMsg CHARACTER InputRoot.DFDL.ISO8583_1987.ProcessingCode_003;
		
		SET procCodeData = SUBSTRING(procCode FROM 1 FOR 2);
		-- ==================== TCPIP DETAILS AND ISO8583 DETAILS =========================
		Set OutputRoot.MQRFH2.usr.Type = tcpipDetails.Type;
		Set OutputRoot.MQRFH2.usr.Hostname = tcpipDetails.Hostname;
		Set OutputRoot.MQRFH2.usr.Port = tcpipDetails.Port;
		Set OutputRoot.MQRFH2.usr.Id = tcpipDetails.Id;
		Set OutputRoot.MQRFH2.usr.ReplyId = tcpipDetails.ReplyId;
		Set OutputRoot.MQRFH2.usr.OpenTimestamp = tcpipDetails.OpenTimestamp;
		Set OutputRoot.MQRFH2.usr.reqMsg = Environment.Variables.reqMsg;
		Set OutputRoot.MQRFH2.usr.timeLocalTransaction = CAST(inRef.SystemsTraceAuditNumber_011 AS CHARACTER);
		Set OutputRoot.MQRFH2.usr.dateLocalTransaction = inRef.DateLocalTransaction_013;
		Set OutputRoot.MQRFH2.usr.retrievalReferenceNumber = inRef.RetrievalReferenceNumber_037;
		Set OutputRoot.MQRFH2.usr.sbPcode = inRef.ProcessingCode_003;
		SET OutputRoot.MQRFH2.usr.postilionPCode = procCode; 
		SET Environment.MQRFH2 = OutputRoot.MQRFH2;
		SET Environment.Variables.Id = tcpipDetails.Id;
		SET Environment.Variables.systemsTraceAuditNumber = CAST(inRef.SystemsTraceAuditNumber_011 AS CHARACTER);
		SET Environment.Variables.dateLocalTransaction = inRef.DateLocalTransaction_013;
		SET Environment.Variables.retrievalReferenceNumber = inRef.RetrievalReferenceNumber_037;
		DECLARE req CHARACTER;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','ISO Request: '|| Environment.Variables.reqMsg) INTO rc ;
			CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','ISO Incoming RAW Request: '|| getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc ;
			CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','TCPIP ID: '|| tcpipDetails.Id)INTO rc;
		END IF;
		--==========================START OF RAW AUDIT DB LOGGING ======================
		SET Environment.Variables.msgID = CAST(Environment.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		CALL DBLogging(Environment.Variables.msgID,getPayLoad(domainName,domainDataRef,encodeRef,ccidRef),'Router Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.timeLocalTransaction,Environment.MQRFH2.usr.dateLocalTransaction,Environment.MQRFH2.usr.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','=====================================  Populating to RAW_Audit_Q =================================') INTO rc ;
		PROPAGATE TO TERMINAL 'out' ;
		--========================== END OF RAW AUDIT DB LOGGING ======================
		SET OutputRoot.Properties= InputRoot.Properties;
		SET OutputRoot.MQRFH2= Environment.MQRFH2;
		IF FIELDNAME(inRef.ResponseCode_039) IS NOT NULL AND (version||class||funct||origin = '0210' OR version||class||funct||origin = '0410') THEN
			IF EXISTS(getDBDetailsCache.Values[]) THEN
				CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','Values available in shared cache: '||getDBDetailsCache.Values.*[])INTO rc;
				--SET DBDetails.values[] = select A.PROC_CODE,A.REQ_QUEUE_NAME,A.RESQ_QUEUE_NAME,A.DOMAIN from Database.DSN.SYSTEM.INTEGRATION_SOL_DETAILS AS A WHERE A.PROC_CODE = procCodeData and A.DOMAIN = domainName;
				DECLARE qDetails ROW;
				SET qDetails.values[] = SELECT P.HTTP_REQ, P.HTTP_RES FROM getDBDetailsCache.Values[] AS P WHERE P.PROC_CODE = procCodeData;
				SET QueueName = qDetails.values;
				SET OutputRoot.MQRFH2.usr.resQueueName = qDetails.values.HTTP_RES;
			ELSE
				CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','Calling the Cache')INTO rc;
				CALL STORE_CACHE(procCodeData);
				DECLARE DBValues ROW;
				SET DBValues.values[] = SELECT T.HTTP_REQ, T.HTTP_RES FROM getDBDetailsCache.Values[] AS T WHERE T.PROC_CODE = procCodeData;
				SET QueueName = DBValues.values;
				SET OutputRoot.MQRFH2.usr.resQueueName = DBValues.values.HTTP_RES;
			END IF;
			SET OutputRoot.DFDL = InputRoot.DFDL;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = QueueName;
			PROPAGATE TO TERMINAL 'out';
		ELSE
			--IF domainName LIKE 'DFDL' THEN
			IF EXISTS(getDBDetailsCache.Values[]) THEN
				CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','Values available in shared cache: '||getDBDetailsCache.Values.*[])INTO rc;
				--SET DBDetails.values[] = select A.PROC_CODE,A.REQ_QUEUE_NAME,A.RESQ_QUEUE_NAME,A.DOMAIN from Database.DSN.SYSTEM.INTEGRATION_SOL_DETAILS AS A WHERE A.PROC_CODE = procCodeData and A.DOMAIN = domainName;
				DECLARE qDetails ROW;
				IF version||class||funct||origin = '0800' OR version||class||funct||origin = '0801' THEN
					SET qDetails.values[] = SELECT P.REQ_QUEUE, P.RES_QUEUE FROM getDBDetailsCache.Values[] AS P WHERE P.PROC_CODE = NETWORKPROCESSCODE AND P.MSGDOMAIN = ISO;
				ELSE
					SET qDetails.values[] = SELECT P.REQ_QUEUE, P.RES_QUEUE FROM getDBDetailsCache.Values[] AS P WHERE P.PROC_CODE = procCodeData AND P.MSGDOMAIN = ISO;
					CALL generateEsbPcode(procCode,channel);
				END IF;
				SET QueueName = qDetails.values.REQ_QUEUE;
				SET OutputRoot.MQRFH2.usr.resQueueName = qDetails.values.RES_QUEUE;
			ELSE
				CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','Calling the Cache')INTO rc;
				CALL STORE_CACHE(procCodeData);
				DECLARE DBValues ROW;
				IF version||class||funct||origin = '0800' OR version||class||funct||origin = '0801' THEN
					SET DBValues.values[] = SELECT T.REQ_QUEUE, T.RES_QUEUE FROM getDBDetailsCache.Values[] AS T WHERE T.PROC_CODE = NETWORKPROCESSCODE AND T.MSGDOMAIN =ISO  ;
				ELSE
					SET DBValues.values[] = SELECT T.REQ_QUEUE, T.RES_QUEUE FROM getDBDetailsCache.Values[] AS T WHERE T.PROC_CODE = procCodeData AND T.MSGDOMAIN = ISO ;
					CALL generateEsbPcode(procCode,channel);
				END IF;
				SET QueueName = DBValues.values.REQ_QUEUE;
			CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','============Stored Cache================================='||CAST(getDBDetailsCache.Values AS CHARACTER)) INTO rc ;
			CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG',DBValues.values.REQ_QUEUE) INTO rc ;
				SET OutputRoot.MQRFH2.usr.resQueueName = DBValues.values.RES_QUEUE;
			END IF;
			SET OutputRoot.MQRFH2.usr.esbPcode = Environment.MQRFH2.usr.esbPcode;
			SET OutputRoot.DFDL = InputRoot.DFDL;
			CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','=====================================Business QUEUENAME=================================') INTO rc ;
			CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG',QueueName) INTO rc ;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = QueueName;
			PROPAGATE TO TERMINAL 'out' ;
		END IF;
	END;

	CREATE PROCEDURE STORE_CACHE (IN procCodeData CHARACTER)
	BEGIN
		SET getDBDetailsCache.Values[] = SELECT A.*  FROM Database.INTEGRATION_SOL_DETAILS AS A; 
		IF EXISTS(getDBDetailsCache.Values[]) THEN
			CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','Retrieved values from Database')INTO rc;
		ELSE
			CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','No Data retrieved from Database')INTO rc;
		END IF;
	END;
	CREATE PROCEDURE generateEsbPcode(IN pcode CHARACTER,IN channel CHARACTER)
	BEGIN
			/*get esb processing codes from cache if available else call database to retrive values */
			IF EXISTS(esbPcode.val[]) THEN 
				CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','===esb pcode values available in shared cache===')INTO rc;	
				CALL filterPcode(pcode,channel);
			ELSE
				CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','===esb pcode values not available in shared cache calling db===')INTO rc;
				CALL getEsbPcode(pcode,channel);
				CALL filterPcode(pcode,channel);
			END IF;
	END;
	/*get esb processing code by filter processing code based on channel and postilion processing code */
	CREATE PROCEDURE filterPcode(IN pcode CHARACTER,IN channel CHARACTER)
	BEGIN
			SET Environment.Variables.esbPcode.values[] = esbPcode.val[];
			FOR pcodeRef AS Environment.Variables.esbPcode.values[] DO
				IF (CONTAINS(channel,pcodeRef.CHANNEL) OR CONTAINS(channel,pcodeRef.CHANNEL2)
					OR CONTAINS(channel,pcodeRef.CHANNEL3) OR CONTAINS(channel,pcodeRef.CHANNEL4)) AND pcodeRef.POSTILION_PCODE = pcode AND CONTAINS(channel,pcodeRef.DESTINATION_SINK) THEN
						SET Environment.MQRFH2.usr.esbPcode = pcodeRef.ESB_PCODE;
						CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','====filtering done successfully====')INTO rc;
						CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','====ESB processing code===')INTO rc;
						CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG',CAST(Environment.MQRFH2.usr.esbPcode AS CHARACTER))INTO rc;
				END IF;
			END FOR;
	END;
	/* get esb processing codes from database and store it in shared variable */
	CREATE PROCEDURE getEsbPcode(IN pcode CHARACTER,IN channel CHARACTER) 
	BEGIN
		IF pcode <> '' AND pcode IS NOT NULL THEN 
			IF channel <> '' AND channel IS NOT NULL THEN 
				SET esbPcode.val[] = SELECT A.* FROM Database.SB_ESB_PCODE AS A;
				IF EXISTS(esbPcode.val[]) THEN
						CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','Retrieved pcode values from Database')INTO rc;
				ELSE
					CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','No pcode retrieved from Database')INTO rc;
				END IF;
			ELSE
				CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','channel is null or empty')INTO rc;
			END IF;
		ELSE
			CALL writeToLogFile(MessageFlowLabel,'TCPRouterLog','DEBUG','processing code is null or empty')INTO rc;
		END IF;
	END;
END MODULE;


CREATE COMPUTE MODULE IncomingRouterFlow_CaptureExceptionDetails
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE rc BOOLEAN;
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CaptureExceptionDetails();
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CaptureExceptionDetails() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE exe_Desc CHARACTER'';
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'InComingRouter';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'InComingRouter');
		SET Environment.Variables.UserDefineErrorCodes = OutputRoot.XMLNSC;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q ;
		PROPAGATE TO TERMINAL 'out';
		-- DB Logging===================
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.XMLNSC;
		SET exe_Desc = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		CALL writeToLogFile(MessageFlowLabel,'ErrorLogger','ERROR','=====================================  INCOMING ROUTER  EXCEPTIOPN =================================') INTO rc ;
		CALL writeToLogFile(MessageFlowLabel,'ErrorLogger','ERROR','Exception Details: '||exe_Desc) INTO rc ;
		CALL writeToLogFile(MessageFlowLabel,'ErrorLogger','ERROR','TCPIP ID: '||Environment.tcpip.Id)INTO rc;
		CALL Error_DBLogging(Environment.Variables.Id,Environment.Variables.reqMsg,'Router Request Error',ApplicationLabel,BrokerName,exe_Desc,Environment.Variables.systemsTraceAuditNumber,Environment.Variables.dateLocalTransaction,Environment.Variables.retrievalReferenceNumber,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefineErrorCodes.InComingRouter.ErrorCode,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
	END;
END MODULE;

CREATE COMPUTE MODULE IncomingRouterFlow_ProcessLength
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
	DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE I INTEGER 0;
		DECLARE J,AA INTEGER;
		DECLARE sumAll INTEGER 0;
		SET J = CARDINALITY(InputRoot.DFDL.ISO8583TCPHeader.*[]) - 1;
		DECLARE it INTEGER CARDINALITY(InputRoot.DFDL.ISO8583TCPHeader.*[]);
		WHILE I <= J DO
			SET AA = InputRoot.DFDL.ISO8583TCPHeader.[I+1];
			SET it = it - 1;
			SET sumAll = sumAll + POWER(2,it) * AA;
			SET I = I + 1;
		END WHILE;
		SET OutputLocalEnvironment.TCPIP.Receive.Length = sumAll;
		SET OutputLocalEnvironment.TCPIP.Receive.Id = InputLocalEnvironment.TCPIP.Input.ConnectionDetails.Id;
		SET Environment.ReqLength = sumAll;
		CALL writeToLogFile(MessageFlowLabel, 'TCPRouterLog', 'DEBUG','..............Start  logging header data...........') INTO rc;
		SET OutputRoot.Properties = InputRoot.Properties;
		CALL writeToLogFile(MessageFlowLabel, 'TCPRouterLog', 'DEBUG','Calculated Length:'||CAST(sumAll AS CHARACTER)) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'TCPRouterLog', 'DEBUG','RAW Data:'||getPayLoad(FIELDNAME(InputBody),inDomainDataRef,encodeRef,ccidRef)) INTO rc;
		DECLARE portRef CHARACTER CAST(InputLocalEnvironment.TCPIP.Input.ConnectionDetails.Port AS CHARACTER);
		CALL writeToLogFile(MessageFlowLabel, 'TCPRouterLog', 'DEBUG','Incoming Port:'||portRef) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'TCPRouterLog', 'DEBUG','Incoming conn id:'||CAST(InputLocalEnvironment.TCPIP.Input.ConnectionDetails.Id AS CHARACTER)) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'TCPRouterLog', 'DEBUG','server input TCP open timestamp:' ||CAST(InputLocalEnvironment.TCPIP.Input.ConnectionDetails.OpenTimestamp AS CHARACTER)) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'TCPRouterLog', 'DEBUG','server input TCP close timestamp:' ||CAST(InputLocalEnvironment.TCPIP.Input.ConnectionDetails.CloseTimestamp AS CHARACTER)) INTO rc;
		IF CONTAINS(portRef,'8806') THEN
			PROPAGATE TO TERMINAL 'out';
		ELSE
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'TCPRouterLog', 'DEBUG','..............end  logging header data...........') INTO rc;
		RETURN FALSE;
	END;
END MODULE;