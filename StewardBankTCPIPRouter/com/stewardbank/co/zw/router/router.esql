
/*
Author:Rathod Veerender
Version:1.0
Date of Creation:30-03-2020
Date of Modification:06-04-2020 (We will get the queue details from DB based on Processing code and those details will be stored in Cache).
Description: This is the TCPIP router flow.It will route the message to actual transaction flow based on Processing Code.
This TCPIP Router would be triggered whenever Postilion initiate the request to ESB.
*/

BROKER SCHEMA com.stewardbank.co.zw.router
PATH com.stewardbank.co.zw.common.esql;
DECLARE getDBDetailsCache SHARED ROW;
DECLARE DSN EXTERNAL CHARACTER '';
	DECLARE SCH EXTERNAL CHARACTER '';
	DECLARE IsLogRequired EXTERNAL CHARACTER '';
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
	DECLARE rc BOOLEAN;
	DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
	DECLARE ERROR_AUDIT_Q EXTERNAL CHARACTER '';
	DECLARE ExceptionQ EXTERNAL CHARACTER '';
CREATE COMPUTE MODULE incominrouter_RouteToInterfaceBasedonProcessingCode
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE refProcessingCode CHARACTER InputRoot.DFDL.ISO8583_1987.ProcessingCode_003;
		
		
		/*
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE OutISO REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS OutISO NAME 'ISO8583_1987';
		CASE
		WHEN RefData LIKE '01%' THEN
		call BuildISO(OutISO);
		END CASE;
		*/
		/*
		if processing code is 40 then it is IFT for (Mobile,236,210,internet,atm,social)
		else if processing code is 54 then it is
		IFT for (agent pos(our card our pos their card our pos),branch pos(our card our pos their card our pos)
		*/
		DECLARE tcpipDetails REFERENCE TO InputLocalEnvironment.TCPIP.Input.ConnectionDetails;
		DECLARE reqMsessage CHARACTER'';
		SET  Environment.reqMsessage = CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding  SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
		SET Environment.Id=tcpipDetails.Id;
		
		
		DECLARE req CHARACTER;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		
		
		IF IsLogRequired LIKE 'Y' THEN
			SET req = CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding  SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
			CALL writeToLogFile(MessageFlowLabel,'Log','DEBUG','ISO Request: '||req) INTO rc ;
			CALL writeToLogFile(MessageFlowLabel,'Log','DEBUG','TCPIP ID: '||tcpipDetails.Id)INTO rc;
		END IF;
 

		--DECLARE domainName CHARACTER FIELDNAME(InputBody);

		DECLARE procCodeData CHARACTER;
		DECLARE DBDetails ROW;
		DECLARE QueueName CHARACTER;
		DECLARE procCode,reqMsg CHARACTER InputRoot.DFDL.ISO8583_1987.ProcessingCode_003;
		SET reqMsg = CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding  SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
		SET procCodeData = SUBSTRING(procCode FROM 1 FOR 2);
		-- ==================== TCPIP DETAILS =========================
		Set OutputRoot.MQRFH2.usr.Type = tcpipDetails.Type;
		Set OutputRoot.MQRFH2.usr.Hostname = tcpipDetails.Hostname;
		Set OutputRoot.MQRFH2.usr.Port = tcpipDetails.Port;
		Set OutputRoot.MQRFH2.usr.Id = tcpipDetails.Id;
		Set OutputRoot.MQRFH2.usr.ReplyId = tcpipDetails.ReplyId;
		Set OutputRoot.MQRFH2.usr.OpenTimestamp = tcpipDetails.OpenTimestamp;
		Set OutputRoot.MQRFH2.usr.reqMsg = reqMsg;
		
		SET Environment.MQRFH2= OutputRoot.MQRFH2;
		--========================== RAW AUDIT DB LOGGING ======================
		 SET Environment.reqMsg = CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding  SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
--		SET Environment.reqMsg = CAST(ASBITSTREAM(InputRoot.DFDL  CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId );
		SET Environment.msgID= CAST(Environment.MQRFH2.usr.Id AS CHARACTER );  
		
		DECLARE outRefer REFERENCE TO OutputRoot;		 
		
		CALL DBLogging(Environment.msgID,Environment.reqMsg,'Router Request',ApplicationLabel,BrokerName,outRefer);
<<<<<<< Upstream, based on origin/master
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'RAW_LOG_SB_REQ';
=======
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
>>>>>>> c358f58 changed the queue names with udp values
		PROPAGATE TO TERMINAL 'out1' ;
		
		SET OutputRoot.Properties= InputRoot.Properties;
		SET OutputRoot.MQRFH2= Environment.MQRFH2;
			--IF domainName LIKE 'DFDL' THEN
		IF EXISTS(getDBDetailsCache.Values[]) THEN
			CALL writeToLogFile(MessageFlowLabel,'Log','DEBUG','Values available in shared cache: '||getDBDetailsCache.Values.*[])INTO rc;
			--SET DBDetails.values[] = select A.PROC_CODE,A.REQ_QUEUE_NAME,A.RESQ_QUEUE_NAME,A.DOMAIN from Database.DSN.SYSTEM.INTEGRATION_SOL_DETAILS AS A WHERE A.PROC_CODE = procCodeData and A.DOMAIN = domainName;
			DECLARE qDetails ROW;
			SET qDetails.values[] = SELECT P.REQ_QUEUE, P.RES_QUEUE  FROM getDBDetailsCache.Values[] AS P WHERE P.PROC_CODE = procCodeData;
			SET QueueName = qDetails.values.REQ_QUEUE;
            SET OutputRoot.MQRFH2.usr.resQueueName = qDetails.values.RES_QUEUE;
		ELSE
			CALL writeToLogFile(MessageFlowLabel,'Log','DEBUG','Calling the Cache')INTO rc;
			CALL STORE_CACHE(procCodeData);
			DECLARE DBValues ROW;
			SET DBValues.values[] = SELECT T.REQ_QUEUE, T.RES_QUEUE  FROM getDBDetailsCache.Values[] AS T WHERE T.PROC_CODE = procCodeData;
			SET QueueName = DBValues.values.REQ_QUEUE;
			SET OutputRoot.MQRFH2.usr.resQueueName = DBValues.values.RES_QUEUE;
		END IF;

		
--		SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
--		SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';

		SET OutputRoot.DFDL = InputRoot.DFDL;    

		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = QueueName;
		--END IF;
		--------********************This is commented block*************----------
		--DECLARE refProc CHARACTER;
		--SET refProc = SUBSTRING(refProcessingCode FROM 1 FOR 2);
		--DECLARE qry CHARACTER 'SELECT QNAME FROM QDETAILS WHERE PROCCODE=?';
		--SET Environment.QDET.Response[]=PASSTHRU(qry TO Database.{DSN} VALUES (CAST(refProc AS INTEGER)));
		--SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.QDET.Response.QNAME;
		--SET OutputRoot = InputRoot;
		--------********************This is commented block*************----------		


	END;

	CREATE PROCEDURE STORE_CACHE (IN procCodeData CHARACTER)
	BEGIN
		-- A.PROC_CODE, A.REQ_QUEUE, A.RES_QUEUE
		SET getDBDetailsCache.Values[] = SELECT A.PROC_CODE,A.REQ_QUEUE,A.RES_QUEUE FROM Database.INTEGRATION_SOL_DETAILS AS A; --WHERE A.PROC_CODE = procCodeData;
		CALL writeToLogFile(MessageFlowLabel,'Log','DEBUG','Retrieved values from Database')INTO rc;
	END;
END MODULE;


CREATE COMPUTE MODULE OutgoingRouterFlow_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL BuildOutGoingRouterErrorMsg();
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE BuildOutGoingRouterErrorMsg() BEGIN
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Id CHARACTER '';
		SET Id= InputRoot. MQRFH2.usr.Id ;  
		
		-- DB Logging===================
		DECLARE exe_Desc CHARACTER'';  
		
		SET exe_Desc = CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		
			CALL Error_DBLogging(CAST(Id AS CHARACTER),CAST(InputRoot.MQRFH2.usr.reqMsg AS CHARACTER),'Router Response Error',ApplicationLabel,BrokerName,exe_Desc,outRefer);
<<<<<<< Upstream, based on origin/master
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ERR_LOG_SB_REQ';
=======
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q ;
>>>>>>> c358f58 changed the queue names with udp values
		PROPAGATE TO TERMINAL 'out1';
		
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'OutGoingRouter';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'OutGoingRouter');
		
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ExceptionQ ;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;


CREATE COMPUTE MODULE InternalFundTransferFlowPostilionReq_RouteBasedOnProtocol
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		
		DECLARE reqMsg CHARACTER'';
		
		
		SET reqMsg = CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
		-- SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		SET Environment.reqMsg=reqMsg;
		
		
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CALL DBLogging(InputRoot.MQRFH2.usr.Id,reqMsg,'Router Response',ApplicationLabel,BrokerName,outRefer);

<<<<<<< Upstream, based on origin/master
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'RAW_LOG_SB_REQ';
=======
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
>>>>>>> c358f58 changed the queue names with udp values
		
		PROPAGATE TO TERMINAL 'out1';
		
		SET OutputRoot = InputRoot  ;
		 -- SET OutputLocalEnvironment.Destination.TCPIP.Output.Id = InputRoot.MQRFH2.usr.Id;
	END;
END MODULE;

CREATE COMPUTE MODULE IncomingRouterFlow_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL BuildExceptionForIncomingRouter();
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE BuildExceptionForIncomingRouter() BEGIN
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		
		DECLARE outRefer REFERENCE TO OutputRoot;
		
		
		-- DB Logging===================
		DECLARE exe_Desc CHARACTER'';  
		
		SET exe_Desc = CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		
			CALL Error_DBLogging(CAST(Environment.Id AS CHARACTER),CAST(Environment.reqMsessage AS CHARACTER),'Router Request Error',ApplicationLabel,BrokerName,exe_Desc,outRefer);
<<<<<<< Upstream, based on origin/master
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ERR_LOG_SB_REQ';
=======
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q;
>>>>>>> c358f58 changed the queue names with udp values
		PROPAGATE TO TERMINAL 'out1';
		
		
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'InComingRouter';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'InComingRouter');
		
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ExceptionQ ;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;