BROKER SCHEMA com.stewardbank.co.zw.smallworldopenpayment
PATH  com.stewardbank.co.zw.common.esql;  

DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';	
DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';     
DECLARE IsLogRequired EXTERNAL CHARACTER'';
DECLARE ALL_SB_HTTP_RES EXTERNAL CHARACTER'';
DECLARE request_Time_Out EXTERNAL CHARACTER'';
DECLARE ns NAMESPACE 'http://webservice.ie.smallworldfs.com/';
DECLARE Protocal EXTERNAL CHARACTER'';
DECLARE URL EXTERNAL CHARACTER'';  
DECLARE soapenv EXTERNAL NAMESPACE '';

DECLARE ns1 EXTERNAL NAMESPACE '';
CREATE COMPUTE MODULE SmallWorldGetMtnByFolio_GenReqToSmallWorld
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateReqToSmallWorld();
		RETURN FALSE;
	END;


	CREATE PROCEDURE GenerateReqToSmallWorld() BEGIN
		
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		SET Environment.MQRFH2.RequestIdentifier = InputRoot.MQRFH2.RequestIdentifier;
		DECLARE reqMsg,bindingOperatingName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE DBDetails ROW;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		--DECLARE serviceName REFERENCE TO InputRoot.SOAP.Body.[<];
		SET bindingOperatingName = FIELDNAME(InputRoot.XMLNSC.*:Envelope.*:Body.*:*);
		SET reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.Variables.reqMsg = reqMsg;
		 SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		
		DECLARE inRefSoap REFERENCE TO InputRoot.XMLNSC;
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
			/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
			/* =================== CALLING LOG4J LOGGING  ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','..............Start Application Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','Incoming Request::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG',reqMsg) INTO rc;
		END IF;
		/* ========================== FIELD TO FIELD MAPPING =============================================== */
		SET OutputRoot=InputRoot;
		DECLARE OutRefer REFERENCE TO OutputRoot.XMLNSC;
		DECLARE envref REFERENCE TO Environment.XMLNSC;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'XMLNSC';
		SET envref = OutRefer;
		DECLARE reqData CHARACTER'';
		SET Environment.reqData = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccsid);
		SET OutputRoot = NULL;
		/* =================== CALLING LOG4J LOGGING ENDING  ==============*/
		/* =================== CALLING DB RAW AUDIT LOGGING  ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','..............Start SmallWorldRemittance Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','SmallWorldRemittance getMtnByFolio Request::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG',Environment.reqData) INTO rc;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.reqData,'SmallWorldRemittance getMtnByFolio Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.XMLNSC = envref;
--		SET OutputLocalEnvironment.Destination.SOAP.Request.Operation  = bindingOperatingName;
--		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.Timeout = request_Time_Out;
--		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.SSLProtocol = Protocal;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = URL;
		PROPAGATE TO TERMINAL 'out';
			END;
END MODULE;

CREATE COMPUTE MODULE SmallWorldGetMtnByFolio_GenResToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateResToGetMtnByFolio();
		RETURN FALSE;
	END;

	CREATE PROCEDURE GenerateResToGetMtnByFolio() BEGIN
		DECLARE rc BOOLEAN FALSE;
			/* =================== CALLING LOG4J LOGGING  ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE bindingOperatingName CHARACTER'';
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		--DECLARE serviceName REFERENCE TO InputRoot.SOAP.Body.[1];
		SET bindingOperatingName = FIELDNAME(InputRoot.XMLNSC.*:Envelope.*:Body.*:*);
		SET Environment.Variables.resMsg = getPayLoad(FIELDNAME(InputBody),inRef.XMLNSC,encodeRef,ccsid);
		DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'SmallWorldRemittance getMtnByFolio Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
			/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','..............Start SmallWorld Remittance  Response  logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','SmallWorld Remittance getMtnByFolio Response::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG',Environment.Variables.resMsg) INTO rc;
		END IF;
		----------
		IF responceCode LIKE '200' THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			DECLARE outRef REFERENCE TO OutputRoot.XMLNSC;
			SET outRef=InputRoot.XMLNSC;
		ELSE
			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC') PARSE(InputRoot.BLOB.BLOB);
		END IF;	
	
		DECLARE OutRefer REFERENCE TO OutputRoot.XMLNSC;
		DECLARE envref REFERENCE TO Environment.XMLNSC;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'XMLNSC';
		SET envref = OutRefer;
		DECLARE reqMsgT24 CHARACTER'';
		SET Environment.Variables.reqMsgT24 = getPayLoad(FIELDNAME(InputBody),inRef.XMLNSC,encodeRef,ccsid);
		SET OutputRoot = NULL;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.MQRFH2.smallworld.operation='getMtnByFolio';
		SET OutputRoot.XMLNSC = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
		PROPAGATE TO TERMINAL 'out';
	
		
	END;
END MODULE;
CREATE COMPUTE MODULE SmallWorldGetMtnByFolio_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL BuildException();
		RETURN FALSE;
	END;

	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE mqrfRef REFERENCE TO InputRoot.MQRFH2;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;  
		IF CONTAINS(excpRef.excpText,'SocketException') THEN
			
			SET errMsg = 'SmallWorldRemittance Server Down';
			CALL errorResponse(mqrfRef,'SmallWorldRemittance Server Down','ESB_001',ApplicationLabel);
		ELSEIF CONTAINS(excpRef.excpText,'WebService Request Exception') THEN
		SET errMsg = 'WebService Request Exception errors have occurred';	
				CALL errorResponse(mqrfRef,'WebService Request Exception','ESB_002',ApplicationLabel);	
		ELSEIF CONTAINS(excpRef.excpText,'RecoverableException') THEN
		SET errMsg = 'Recoverable  Exception errors have occurred';	
				CALL errorResponse(mqrfRef,'Recoverable Exception','ESB_003',ApplicationLabel);	
		END IF;
		
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
--		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SmallWorldRemittanceGetMtnByFolioResponse';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SmallWorldRemittanceGetMtnByFolioResponse');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;

		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SmallWorldRemittanceGetMtnByFolioResponse.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;  
		PROPAGATE TO TERMINAL 'out';  
		----------------------------------	
	END;
		CREATE PROCEDURE errorResponse(IN mqrfRef REFERENCE, IN msg CHAR,IN errorCode CHAR,IN applicationLabel CHAR)
	BEGIN
              SET OutputRoot.MQRFH2 = mqrfRef;
			SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:ns1 = ns1;
			SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:Message=msg;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ErrorCode=errorCode;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ServiceName=applicationLabel;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
			
			PROPAGATE TO TERMINAL 'out';
--		END IF;
	END;
	
	
END MODULE;


CREATE COMPUTE MODULE SmallWorldGetTransactionExportByMtn_GenReqToGetTrans
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	CALL GenerateReqToSmallWorldGetTrans();
		RETURN FALSE;
	END;

	CREATE PROCEDURE GenerateReqToSmallWorldGetTrans() BEGIN
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		SET Environment.MQRFH2.RequestIdentifier = InputRoot.MQRFH2.RequestIdentifier;
		DECLARE reqMsg,bindingOperatingName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE DBDetails ROW;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		--DECLARE serviceName REFERENCE TO InputRoot.SOAP.Body.[<];
		SET bindingOperatingName = FIELDNAME(InputRoot.XMLNSC.*:Envelope.*:Body.*:*);
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.XMLNSC,encodeRef,ccsid);
		-- SET DBLogging PropertiEnvironment.Variables.reqMsges ==============
		SET Environment.Variables.reqMsg = reqMsg;
		 SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		DECLARE inRefSoap REFERENCE TO InputRoot.XMLNSC;
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
			/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
			/* =================== CALLING LOG4J LOGGING  ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','..............Start Application Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','Incoming Request::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG',reqMsg) INTO rc;
		END IF;
		/* ========================== FIELD TO FIELD MAPPING =============================================== */
		SET OutputRoot=InputRoot;
		DECLARE OutRefer REFERENCE TO OutputRoot.XMLNSC;
		DECLARE envref REFERENCE TO Environment.XMLNSC;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'XMLNSC';
		SET envref = OutRefer;
		DECLARE reqData CHARACTER'';
		SET Environment.reqData = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccsid);
		SET OutputRoot = NULL;
		/* =================== CALLING LOG4J LOGGING ENDING  ==============*/
		/* =================== CALLING DB RAW AUDIT LOGGING  ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','..............Start SmallWorldRemittance getTransactionExportByMtn Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','SmallWorldRemittance Request::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG',Environment.reqData) INTO rc;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.reqData,'SmallWorldRemittance getTransactionExportByMtn  Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.XMLNSC = envref;
--		SET OutputLocalEnvironment.Destination.SOAP.Request.Operation  = bindingOperatingName;
--		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.Timeout = request_Time_Out;
--		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.SSLProtocol = Protocal;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = URL;
		PROPAGATE TO TERMINAL 'out';
			END;
END MODULE;
		
	
CREATE COMPUTE MODULE SmallWorldGetTransactionExportByMtn_GenResToGetTrans
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateResToT24GetTrans();
		RETURN FALSE;
	END;


	CREATE PROCEDURE GenerateResToT24GetTrans() BEGIN
		DECLARE rc BOOLEAN FALSE;
			/* =================== CALLING LOG4J LOGGING  ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE bindingOperatingName CHARACTER'';
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		--DECLARE serviceName REFERENCE TO InputRoot.SOAP.Body.[1];
		SET bindingOperatingName = FIELDNAME(InputRoot.XMLNSC.*:Envelope.*:Body.*:*);
		SET Environment.Variables.resMsg = getPayLoad(FIELDNAME(InputBody),inRef.XMLNSC,encodeRef,ccsid);
		DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'SmallWorldRemittance getTransactionExportByMtn Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
			/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','..............Start SmallWorld Remittance  Response  logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','SmallWorld Remittance getTransactionExportByMtn Response::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG',Environment.resMsg) INTO rc;
		END IF;
		IF responceCode LIKE '200' THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			DECLARE outRef REFERENCE TO OutputRoot.XMLNSC;
			SET outRef=InputRoot.XMLNSC;
		ELSE
			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC') PARSE(InputRoot.BLOB.BLOB);
		END IF;	
		DECLARE OutRefer REFERENCE TO OutputRoot.XMLNSC;
		DECLARE envref REFERENCE TO Environment.XMLNSC;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'XMLNSC';
		SET envref = OutRefer;
		DECLARE reqMsgT24 CHARACTER'';
		SET Environment.Variables.reqMsgT24 = getPayLoad(FIELDNAME(InputBody),inRef.SOAP,encodeRef,ccsid);
		SET OutputRoot = NULL;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.MQRFH2.smallworld.operation='getTransactionExportByMtn';
		SET OutputRoot.XMLNSC = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ALL_SB_HTTP_RES';
		PROPAGATE TO TERMINAL 'out';
	END;
		
END MODULE;



CREATE COMPUTE MODULE SmallWorldGetTransactionExportByMtn_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL BuildException();
		RETURN FALSE;
	END;

	CREATE PROCEDURE BuildException() BEGIN
			DECLARE rc BOOLEAN FALSE;
		DECLARE mqrfRef REFERENCE TO InputRoot.MQRFH2;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;  
		IF CONTAINS(excpRef.excpText,'SocketException') THEN
			
			SET errMsg = 'SmallWorldRemittance Server Down';
			CALL errorResponse(mqrfRef,'SmallWorldRemittance Server Down','ESB_001',ApplicationLabel);
			ELSEIF CONTAINS(excpRef.excpText,'WebService Request Exception') THEN
		SET errMsg = 'WebService Request Exception errors have occurred';	
				CALL errorResponse(mqrfRef,'WebService Request Exception','ESB_002',ApplicationLabel);
			ELSEIF CONTAINS(excpRef.excpText,'RecoverableException') THEN
		SET errMsg = 'Recoverable  Exception errors have occurred';	
				CALL errorResponse(mqrfRef,'Recoverable Exception','ESB_003',ApplicationLabel);	
		END IF;
		
		
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
--		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SmallWorldRemittanceGetTransactionExportByMtnResponse';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SmallWorldRemittanceGetTransactionExportByMtnResponse');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;

		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SmallWorldRemittanceGetTransactionExportByMtnResponse.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;  
		PROPAGATE TO TERMINAL 'out';  
		----------------------------------	
	END;
		CREATE PROCEDURE errorResponse(IN mqrfRef REFERENCE, IN msg CHAR,IN errorCode CHAR,IN applicationLabel CHAR)
	BEGIN
              SET OutputRoot.MQRFH2 = mqrfRef;
			SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:ns1 = ns1;
			SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:Message=msg;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ErrorCode=errorCode;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ServiceName=applicationLabel;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
			
			PROPAGATE TO TERMINAL 'out';
--		END IF;
	END;
	
	
END MODULE;
	
	CREATE COMPUTE MODULE SmallWorldPayoutPickupAnywhere_GenReqToSWPayoutPickup
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL GenerateReqToSmallWorldPayoutPickup();
		RETURN FALSE;
	END;

	
	CREATE PROCEDURE GenerateReqToSmallWorldPayoutPickup() BEGIN
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		SET Environment.MQRFH2.RequestIdentifier = InputRoot.MQRFH2.RequestIdentifier;
		DECLARE reqMsg,bindingOperatingName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE DBDetails ROW;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		
		SET bindingOperatingName = FIELDNAME(InputRoot.XMLNSC.*:Envelope.*:Body.*:*);
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.XMLNSC,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.Variables.reqMsg = reqMsg;
		 SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CREATE LASTCHILD OF InputRoot DOMAIN 'XMLNSC';
		DECLARE inRefSoap REFERENCE TO InputRoot.XMLNSC;
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
			/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
			/* =================== CALLING LOG4J LOGGING  ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','..............Start Application Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','Incoming Request::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG',reqMsg) INTO rc;
		END IF;
		/* ========================== FIELD TO FIELD MAPPING =============================================== */
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC;
--		SET outRefSoap.Context.operation=inRefSoap.Context.operation;
--		SET outRefSoap.Context.operationType = inRefSoap.Context.operationType;
--		SET outRefSoap.Context.portType = inRefSoap.Context.portType;
--		SET outRefSoap.Context.portTypeNamespace = inRefSoap.Context.portTypeNamespace;
--		SET outRefSoap.Context.port = inRefSoap.Context.port;
--		SET outRefSoap.Context.service = inRefSoap.Context.service;
--		SET outRefSoap.Context.fileName = inRefSoap.Context.fileName;
--		SET outRefSoap.Context.SOAP_Version = inRefSoap.Context.SOAP_Version;
--		SET outRefSoap.Context.Namespace.soapenv = soapenv;
--		SET outRefSoap.Context.Namespace.web = ns;
--		SET outRefSoap.Context.XmlRoot.Envelope.Header = inRefSoap.Context.XmlRoot.Envelope.Header;
--		SET outRefSoap.Context.XmlRoot.Envelope.Body = inRefSoap.Context.XmlRoot.Envelope.Body;
--		SET outRefSoap.Header[] = inRefSoap.Header[];
--		SET outRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg0=inRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg0;
--		SET outRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg1=inRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg1;
--		SET outRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg2=inRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg2;
--		SET outRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg3=inRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg3;
--		SET outRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg4=inRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg4;
--		SET outRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg5=inRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg5;
--		SET outRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg6=inRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg6;
--		SET outRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg7=inRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg7;
--		SET outRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg8=inRefSoap.Body.ns:payoutPickupAnywhereTransaction.arg8;

		SET OutputRoot=InputRoot;
		DECLARE OutRefer REFERENCE TO OutputRoot.XMLNSC;
		DECLARE envref REFERENCE TO Environment.XMLNSC;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'XMLNSC';
		SET envref = OutRefer;
		DECLARE reqData CHARACTER'';
		SET Environment.reqData = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccsid);
		SET OutputRoot = NULL;
		/* =================== CALLING LOG4J LOGGING ENDING  ==============*/
		/* =================== CALLING DB RAW AUDIT LOGGING  ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','..............Start SmallWorldRemittance payoutPickupAnywhereTransaction Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','SmallWorldRemittance Request::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG',Environment.reqData) INTO rc;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.reqData,'SmallWorldRemittance payoutPickupAnywhereTransaction Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.XMLNSC = envref;
--		SET OutputLocalEnvironment.Destination.SOAP.Request.Operation  = bindingOperatingName;
--		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.Timeout = request_Time_Out;
--		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.SSLProtocol = Protocal;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = URL;
		PROPAGATE TO TERMINAL 'out';
			END;
END MODULE;

CREATE COMPUTE MODULE SmallWorldPayoutPickupAnywhere_GenResToT24PayoutPickup
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		 CALL GenerateResToT24PayoutPickup();
		RETURN FALSE;
	END;

	CREATE PROCEDURE GenerateResToT24PayoutPickup() BEGIN
		DECLARE rc BOOLEAN FALSE;
			/* =================== CALLING LOG4J LOGGING  ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE bindingOperatingName CHARACTER'';
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET bindingOperatingName = FIELDNAME(InputRoot.XMLNSC.*:Envelope.*:Body.*:*);
		SET Environment.Variables.resMsg = getPayLoad(FIELDNAME(InputBody),inRef.XMLNSC,encodeRef,ccsid);
		DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'SmallWorld Remittance payoutPickupAnywhereTransaction Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
			/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','..............Start SmallWorld Remittance  Response  logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG','SmallWorld Remittance payoutPickupAnywhereTransaction Response::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldOpenPayments', 'DEBUG',Environment.Variables.resMsg) INTO rc;
		END IF;
		----------
		
		IF responceCode LIKE '200' THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			DECLARE outRef REFERENCE TO OutputRoot.XMLNSC;
			SET outRef=InputRoot.XMLNSC;
		ELSE
			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC') PARSE(InputRoot.BLOB.BLOB);
		END IF;	
			
		DECLARE OutRefer REFERENCE TO OutputRoot.XMLNSC;
		DECLARE envref REFERENCE TO Environment.XMLNSC;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'XMLNSC';
		SET envref = OutRefer;
		DECLARE reqMsgT24 CHARACTER'';
		SET Environment.Variables.reqMsgT24 = getPayLoad(FIELDNAME(InputBody),inRef.XMLNSC,encodeRef,ccsid);
		SET OutputRoot = NULL;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.MQRFH2.smallworld.operation='payoutPickupAnywhereTransaction';
		SET OutputRoot.XMLNSC = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
		PROPAGATE TO TERMINAL 'out';
		
	END;
END MODULE;
CREATE COMPUTE MODULE SmallWorldPayoutPickupAnywhere_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL BuildException();
		RETURN FALSE;
	END;

	CREATE PROCEDURE BuildException() BEGIN
			DECLARE rc BOOLEAN FALSE;
		DECLARE mqrfRef REFERENCE TO InputRoot.MQRFH2;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;  
		IF CONTAINS(excpRef.excpText,'SocketException') THEN
			
			SET errMsg = 'SmallWorldRemittance Server Down';
			CALL errorResponse(mqrfRef,'SmallWorldRemittance Server Down','ESB_001',ApplicationLabel);
			ELSEIF CONTAINS(excpRef.excpText,'WebService Request Exception') THEN
		SET errMsg = 'WebService Request Exception errors have occurred';	
				CALL errorResponse(mqrfRef,'WebService Request Exception','ESB_002',ApplicationLabel);
		ELSEIF CONTAINS(excpRef.excpText,'RecoverableException') THEN
		SET errMsg = 'Recoverable  Exception errors have occurred';	
				CALL errorResponse(mqrfRef,'Recoverable Exception','ESB_003',ApplicationLabel);		
		END IF;
		
		
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
--		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SmallWorldRemittancePayoutPickupResponse';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SmallWorldRemittancePayoutPickupResponse');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
--		
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SmallWorldRemittancePayoutPickupResponse.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;  
		PROPAGATE TO TERMINAL 'out';  
		----------------------------------	
	END;
		CREATE PROCEDURE errorResponse(IN mqrfRef REFERENCE, IN msg CHAR,IN errorCode CHAR,IN applicationLabel CHAR)
	BEGIN
              SET OutputRoot.MQRFH2 = mqrfRef;
			SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:ns1 = ns1;
			SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:Message=msg;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ErrorCode=errorCode;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ServiceName=applicationLabel;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
			
			PROPAGATE TO TERMINAL 'out';
		
	END;
END MODULE;
