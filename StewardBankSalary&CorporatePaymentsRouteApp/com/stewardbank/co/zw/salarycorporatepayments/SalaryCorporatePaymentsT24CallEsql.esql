BROKER SCHEMA com.stewardbank.co.zw.salarycorporatepayments

PATH com.stewardbank.co.zw.common.esql;
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERROR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE resQueueName EXTERNAL CHARACTER '';
DECLARE SCP_DBFailure EXTERNAL CHARACTER '';
DECLARE SCP_FormatFailure EXTERNAL CHARACTER ''; 
--DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';  
--DECLARE IsLogRequired EXTERNAL CHARACTER'';    
DECLARE URL EXTERNAL CHARACTER'';
CREATE COMPUTE MODULE SalaryCorporatePaymentsT24CallFlow_RequestToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL RequestToT24();
		RETURN FALSE;
	END;
	CREATE PROCEDURE RequestToT24() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		DECLARE T24URL CHARACTER '';
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL.stewardBank_CSV;
		DECLARE domainName CHARACTER InputRoot.DFDL.stewardBank_CSV;
		DECLARE inRefer REFERENCE TO InputRoot.DFDL.stewardBank_CSV.record;
		SET Environment.Variables.FileName = SUBSTRING(InputRoot.MQRFH2.FileName BEFORE '.csv' ); 
		SET Environment.Variables.Fields = 'tran id,date, remitter account number, beneficiary bank name, beneficiary bank code, beneficiary account number, beneficiary name, amount, currency, purpose, remitter name';
		SET Environment.Variables.Amount = inRefer.Amount;
		SET Environment.Variables.Dbt_Acc = inRefer.Remitter_Account_Number;
		SET Environment.Variables.Crt_Acc = inRefer.Beneficiary_Account_Number;
		SET Environment.Variables.CreationDate = CAST(CURRENT_TIMESTAMP AS TIMESTAMP);
		SET Environment.Variables.RRN = inRefer.Purpose;
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef); 
		-- SET DBLogging Properties ==============
		SET Environment.Variables.UID = InputRoot.MQRFH2.UID;
		DECLARE Env REFERENCE TO Environment.Variables;
		SET Env.FileNameCheck = SUBSTRING(Environment.Variables.FileName FROM 1 FOR 2);
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE tiime,str,executionDate,UrlPathparameters,csvDate CHARACTER;
		SET tiime = inRefer.Date; ---29/06/2020---
		SET str = SUBSTRING(tiime FROM 7 FOR 4)||SUBSTRING(tiime FROM 4 FOR 2)||SUBSTRING(tiime FROM 1 FOR 2); --'YYYYMMDD');--20200629
		SET executionDate = CAST(str AS CHARACTER FORMAT 'YYYYMMDD');
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		SET UrlPathparameters = inRefer.Tran_ID||'/'||inRefer.Currency||'/'||inRefer.Remitter_Name||'/'||inRefer.Currency||'/'||inRefer.Amount||'/'||executionDate||'/'||inRefer.Purpose||'/'||inRefer.Beneficiary_Account_Number||'/'||inRefer.Beneficiary_Name;
		DECLARE pattern CHARACTER 'yyyyMMdd';
		SET csvDate = CAST(str AS CHARACTER FORMAT pattern);
		SET Env.CsvDate = CAST(csvDate AS CHARACTER);
		CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
		DECLARE outRef REFERENCE TO OutputRoot.JSON;
		CREATE LASTCHILD OF OutputRoot.JSON AS outRef NAME 'Data';
		SET outRef.batchId = inRefer.Tran_ID;
		SET outRef.debitCurrency = inRefer.Currency;
		SET outRef.orderingCustomerName = inRefer.Remitter_Name;
		SET outRef.paymentCurrency = inRefer.Currency;
		SET outRef.transactionAmount = inRefer.Amount;
		SET outRef.executionDate = executionDate;
		SET outRef.invoiceReference = inRefer.Purpose;
		SET outRef.creditAccountId = inRefer.Beneficiary_Account_Number;
		SET outRef.customer = inRefer.Beneficiary_Name;
		SET Environment.Variables.jsonData = OutputRoot.JSON.Data;
		SET T24URL = URL||UrlPathparameters; 
		SET OutputRoot = NULL;
		/* ===================AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Env.UID,T24URL,'T24 Request Call',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),inRefer.Purpose,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','T24 URL Request(POST)::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG',T24URL) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','Message ID :: '||Environment.Variables.UID) INTO rc; 
		END IF;
		/* =================== END OF AUDIT LOGGING ==============*/
		/*================DB Update=======================*/
		IF Env.FileNameCheck LIKE 'PO' THEN
			CALL INSERT_SB_SCP_TRACKING(Env.UID,'','','','','',Env.FileName,Env.Fields,Env.Amount,Env.Dbt_Acc,Env.Crt_Acc,Env.CsvDate,T24URL,'','','','','SUCCESS',
			Env.CreationDate,CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'TRUE');
		ELSE
			CALL INSERT_SB_SCP_TRACKING(Env.UID,'','','','','',Env.FileName,Env.Fields,Env.Amount,Env.Dbt_Acc,Env.Crt_Acc,Env.CsvDate,T24URL,'','','','','SUCCESS',
			Env.CreationDate,CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'FALSE');
		END IF;
		/*=============End===============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON.Data = Environment.Variables.jsonData;
		SET OutputRoot.HTTPRequestHeader."Content-Type" = 'application/json';
		SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'POST';
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = URL||UrlPathparameters;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE SalaryCorporatePaymentsT24CallFlow_GenereateResponseToChannel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenereateResponseToChannel();
		RETURN FALSE;
	END;
	CREATE PROCEDURE GenereateResponseToChannel() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET OutputRoot.Properties=InputRoot.Properties;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE Env REFERENCE TO Environment.Variables;
		SET Env.resMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		SET Env.data = inRef;
		DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		CASE
		WHEN responceCode LIKE '200' OR inRef.header.status LIKE 'success' THEN
			---Success Case---
			CALL UPDATE_SB_SCP_STATUS(Env.UID,inRef.header.id,CAST(Env.CreationDate AS CHARACTER),inRef.body.endToEndReference,responceCode,'','SUCCESS','','TRUE','');
			---DB Logging---
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Env.UID,Env.resMsg,'T24 Success Response',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),inRef.body.endToEndReference,outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','..........Logging generated Response...............') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','T24 Response :: SUCCESS') INTO rc;  
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG',Env.resMsg) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','Message ID :: '||Environment.Variables.UID) INTO rc; 
			END IF;
			SET outRef = Env.data;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
			PROPAGATE TO TERMINAL 'out';
		ELSE
			---Failure Case---
			CALL UPDATE_SB_SCP_STATUS(Env.UID,'','','',responceCode,'','FAILURE','','TRUE','');
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','T24 Response:: FAILURE'||'/'||'ResponseCode::'||responceCode) INTO rc;
			END IF;
			SET OutputRoot.JSON.Data = Env.data;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
			PROPAGATE TO TERMINAL 'out';
		END CASE;
	END;
END MODULE;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE SalaryCorporatePaymentsT24CallFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		RETURN FALSE;
	END;
	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE inRefer REFERENCE TO InputRoot.JSON.Data; 
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		IF CONTAINS(excpRef.excpText,'Database') OR CONTAINS(excpRef.excpText,'T24ClientOut,connection refused') OR CONTAINS(excpRef.excpText,'SocketException') THEN
			SET OutputLocalEnvironment.Destination.File.Directory = SCP_DBFailure||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMdd');
			SET OutputLocalEnvironment.Destination.File.Name = Environment.Variables.FileName||'_'||inRefer.creditAccountId||'_'||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'HHmmss')||'.csv';   
		ELSE
			SET OutputLocalEnvironment.Destination.File.Directory = SCP_FormatFailure||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMdd');
			SET OutputLocalEnvironment.Destination.File.Name = Environment.Variables.FileName||'_'||inRefer.creditAccountId||'_'||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'HHmmss')||'.csv';   
		END IF;
		SET OutputRoot.Properties.MessageSet = InputRoot.Properties.MessageSet;
		SET OutputRoot.Properties.MessageType = InputRoot.Properties.MessageType;   
		CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL')PARSE(Environment.MQRFH2.reqMsg ENCODING encodeRef CCSID ccidRef SET '{SB_CSV_Lib}' TYPE '{}:stewardBank_CSV');  
		PROPAGATE TO TERMINAL 'out1'; 
		--DECLARE Id CHARACTER CAST(Environment.MQRFH2.usr.Id AS CHARACTER); 
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SalaryCorporatePaymentsT24';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SalaryCorporatePaymentsT24');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE Env REFERENCE TO Environment.Variables;
		---Failure Case Status Tracking---
		--CALL UPDATE_SB_SCP_STATUS(Environment.Variables.UID,'','','','','','FAILURE','','TRUE','');  
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.DFDL = NULL;
		/* =================== CALLING LOG4J LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','#..............Start Logging Application Related Exception ...........#') INTO rc;  
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		END IF;
		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
		/* =================== CALLING DB LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL Error_DBLogging(Environment.Variables.UID,Environment.MQRFH2.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),Environment.Variables.RRN,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SalaryCorporatePaymentsT24.ErrorCode,outRefer);
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out'; 
		/* =================== CALLING DB LOGGING ENDING ==============*/
		--------------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		DECLARE outJsonRef REFERENCE TO OutputRoot.JSON.Data; 
		SET outJsonRef.statusCode = '000';
		SET outJsonRef.message = 'FAILURE';
		SET outJsonRef.responseBody.source = 'ESB';
		SET outJsonRef.responseBody.applicationName = FIELDNAME(Environment.Variables.UserDefinedErrorCodes.SalaryCorporatePaymentsT24);
		SET outJsonRef.responseBody.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.SalaryCorporatePaymentsT24.ErrorCode;
		SET outJsonRef.responseBody.applicationErrorType = Environment.Variables.UserDefinedErrorCodes.SalaryCorporatePaymentsT24.ErrorType; 
		/* =================== CALLING LOG4J LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Response To Frond End System in case of Failure:'||getPayLoad(FIELDNAME(OutputRoot.JSON),outJsonRef,encodeRef,ccidRef)) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','#---End of Logging Application Related Exception---#') INTO rc; 
		END IF;
--		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
	END;
END MODULE;