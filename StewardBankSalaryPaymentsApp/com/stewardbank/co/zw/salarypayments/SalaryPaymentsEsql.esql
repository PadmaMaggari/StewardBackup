BROKER SCHEMA com.stewardbank.co.zw.salarypayments
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH,LOG4J_INIT_ERROR_MSG,T24,ZSS EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER '';
DECLARE UUID SHARED CHARACTER '';
CREATE COMPUTE MODULE csv_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		CASE
		WHEN domainName LIKE 'DFDL' THEN
			SET OutputRoot.Properties = InputRoot.Properties;
			-- SET InputRoot.Properties.MessageSet= '{SB_CSV_Lib}';
			-- SET InputRoot.Properties.MessageType= '{}:stewardBank_CSV';
			SET OutputRoot.Properties.MessageSet= '{ISO8583_Lib}';
			SET OutputRoot.Properties.MessageType= '{}:ISO8583_1987';
			DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
			DECLARE inRef REFERENCE TO InputRoot.DFDL.stewardBank_CSV.record;
			-- SET outRef. = InputRoot
			CALL CSVToISOMapping(inRef,outRef);
			RETURN FALSE;
		ELSE
			RETURN FALSE;
		END CASE;
	END;
	CREATE PROCEDURE CSVToISOMapping (IN inRef REFERENCE, INOUT outRef REFERENCE)
	BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		SET Environment.Variables.FileName = InputLocalEnvironment.File.Name;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE inRef REFERENCE TO InputRoot.DFDL.stewardBank_CSV.record;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','..............Start SalaryPayments  ReqToPostilion logging...........') INTO rc;
		END IF;
		--------------DBLogging-------------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.Id,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.timeLocalTransaction,Environment.MQRFH2.usr.dateLocalTransaction,
			Environment.MQRFH2.usr.retrievalReferenceNumber,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out2';
		-----------------------------
		DECLARE env REFERENCE TO Environment.Variables;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		--set response queue and tcpip connection id in environment
		DECLARE resQ CHARACTER Environment.MQRFH2.usr.resQueueName;
		DECLARE connId CHARACTER Environment.MQRFH2.usr.Id;
		SET Environment.Variables.ResponseQ = resQ;
		SET Environment.Variables.TcpIp.ConnectionId = connId;
		DECLARE Response ROW;
		DECLARE sql CHARACTER '';
		SET UUID = UUIDASCHAR;
		DECLARE currenttimestamp TIMESTAMP cast(CURRENT_TIMESTAMP AS TIMESTAMP FORMAT 'IU');
		CALL insertSalaryPayment(UUID,inDomainDataRef.stewardBank_CSV.record.DEBIT_ACCOUNT,CAST(currenttimestamp AS TIMESTAMP FORMAT 'yyyyMMdd HHmmssss'),
		getPayLoad(FIELDNAME(inDomainDataRef.stewardBank_CSV),inDomainDataRef.stewardBank_CSV,encodeRef,ccidRef),'','','','',CAST(currenttimestamp AS TIMESTAMP FORMAT 'yyyyMMdd HHmmssss'),CAST(InputRoot.Properties.CreationTime AS CHARACTER),'123',Environment.Variables.FileName);
		--mapping field to field CSV to ISO8583
		SET OutputRoot.Properties.MessageSet= '{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType= '{}:ISO8583_1987';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		--SET outRef.TCPHeaderBitmap[]=inRef.TCPHeaderBitmap[];
		DECLARE debitDate CHARACTER '  ';
		DECLARE narration CHARACTER '                        ';
		SET outRef.MTI_Version='0';
		SET outRef.MTI_MessageClass='2';
		SET outRef.MTI_MessageFunction='0';
		SET outRef.MTI_MessageOrigin='0';
		-- SET outRef.PrimaryAccountNumber_002 = '';
		-- SET outRef.ProcessingCode_003 = '';
		SET outRef.AmountTransaction_004 = inRef.AMOUNT; --4
		SET outRef.TransmissionDatetime_007 = inRef.DEBIT_DATE||debitDate; -- CSV Field 7
		--SET outRef.TimeLocalTransaction_012 = SUBSTRING(inRef.CREDIT_DATE FROM 3 FOR 6); -- CSV Field 8
		SET outRef.DateLocalTransaction_013 = SUBSTRING(inRef.CREDIT_DATE FROM 5 FOR 4); -- CSV Field 8
		-- SET outRef.DateExpiration_014 = SUBSTRING(inRef.CREDIT_DATE FROM 3 FOR 4);
		SET outRef.DateSettlement_015 = SUBSTRING(inRef.CREDIT_DATE FROM 5 FOR 4); -- CSV Field 8
		SET outRef.RetrievalReferenceNumber_037 = SUBSTRING(inRef.CREDIT_THEIR_REFERENCE FROM 1 FOR 12); -- CSV Field 9
		SET outRef.CardAcceptorNameLocation_043 = inRef.NARRATION||narration; -- CSV Field 10
		SET outRef.CurrencyCodeTransaction_049 = inRef.CURRENNCY; -- CSV Field 3
		SET outRef.AccountIdentification1_102 = inRef.CREDIT_ACCOUNT; -- CSV Field 5
		SET outRef.AccountIdentification2_103 = inRef.DEBIT_ACCOUNT; -- CSV Field 2
		SET outRef.TransactionDescription_104 = inRef.TRANSACTION_TYPE; -- CSV Field 1
		CALL UpdateMsgWithAsciiBitMap(outRef);
		--get account details from db lookup
		SET sql='SELECT * FROM ISAVE_CARD_MAPPING WHERE ACCOUNT_ID=?';
		DECLARE DebitAccount CHARACTER outRef.AccountIdentification2_103;
		CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG',DebitAccount) INTO rc;
		SET Response.accountEnquiry[]=PASSTHRU(sql VALUES(DebitAccount));
		SET Environment.Variables.t24dfdlData  = OutputRoot.DFDL; 
		--IF EXISTS (Response.accountEnquiry.*[]) THEN 
		IF EXISTS (Response.accountEnquiry.*[]) OR STARTSWITH(DebitAccount,'2') THEN    
			--ZSS Call
			SET OutputRoot.DFDL = Environment.Variables.t24dfdlData;   
			----- Database Logging ------------
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Environment.MQRFH2.usr.Id,getPayLoad(domainName,outRef,encodeRef,ccidRef),'ZSS Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.timeLocalTransaction,Environment.MQRFH2.usr.dateLocalTransaction,Environment.MQRFH2.usr.retrievalReferenceNumber,outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			SET OutputRoot.DFDL = NULL;
			PROPAGATE TO TERMINAL 'out2';
			----------------------
			--SET OutputRoot.Properties.MessageSet= '{ISO8583_Lib}';
		--	SET OutputRoot.Properties.MessageType= '{}:ISO8583_1987'; 
		SET OutputRoot.Properties=InputRoot.Properties;
			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
			SET OutputRoot.DFDL = Environment.Variables.t24dfdlData;
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','..............End SALARYPAYMENTS  ReqToZSS logging...........') INTO rc;  
				--CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG',getPayLoad(domainName,outRef,encodeRef,ccidRef)) INTO rc;
			END IF;
			PROPAGATE TO TERMINAL 'out';
		ELSE
			--T24 Call
			SET Environment.Variables.zssdfdlData = OutputRoot.DFDL;
			----- Database Logging ------------
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Environment.MQRFH2.usr.Id,getPayLoad(domainName,outRef,encodeRef,ccidRef),'T24 Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.timeLocalTransaction,Environment.MQRFH2.usr.dateLocalTransaction,Environment.MQRFH2.usr.retrievalReferenceNumber,outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			SET OutputRoot.DFDL = NULL;
			PROPAGATE TO TERMINAL 'out2';
			----------------------
			--SET OutputRoot.Properties.MessageSet= '{ISO8583_Lib}';
			--SET OutputRoot.Properties.MessageType= '{}:ISO8583_1987'; 
			SET OutputRoot.Properties=InputRoot.Properties;
			SET OutputRoot.MQRFH2 = Environment.MQRFH2; 
			SET OutputRoot.DFDL = Environment.Variables.zssdfdlData;   
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','..............End SALARYPAYMENTS  ReqToT24 logging...........') INTO rc;
				--CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG',getPayLoad(domainName,outRef,encodeRef,ccidRef)) INTO rc;
			END IF; 
			PROPAGATE TO TERMINAL 'out1';
		END IF;
	END;
END MODULE;
CREATE COMPUTE MODULE T24StatusUpdate_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL CopyEntireMessage();
		RETURN FALSE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		SET UUID = UUIDASCHAR;
		DECLARE currenttimestamp TIMESTAMP cast(CURRENT_TIMESTAMP AS TIMESTAMP FORMAT 'IU');

		CASE

		WHEN InputRoot.DFDL.ISO8583_1987.ResponseCode_039 LIKE '00' THEN
			CALL insertSalaryPayment(UUID,inDomainDataRef.ISO8583_1987.AccountIdentification2_103,CAST(currenttimestamp AS TIMESTAMP FORMAT 'yyyyMMdd HHmmssss'),
			'','00',getPayLoad(domainName,domainDataRef,encodeRef,ccidRef),'','SUCCESS',CAST(currenttimestamp AS TIMESTAMP FORMAT 'yyyyMMdd HHmmssss'),CAST(InputRoot.Properties.CreationTime AS CHARACTER),'123',Environment.Variables.FileName);
			-- SET OutputRoot.DFDL.ISO8583_1987 = InputRoot.DFDL.ISO8583_1987;
			-- SET OutputRoot.DFDL.ISO8583_1987 = getPayLoad(FIELDNAME(inDomainDataRef.ISO8583_1987),inDomainDataRef.ISO8583_1987,encodeRef,ccidRef);
			CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') ENCODING encodeRef CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987');

			PROPAGATE TO TERMINAL 'out';
		ELSE

			CALL insertSalaryPayment(UUID,inDomainDataRef.ISO8583_1987.AccountIdentification2_103,CAST(currenttimestamp AS TIMESTAMP FORMAT 'yyyyMMdd HHmmssss'),
			getPayLoad(domainName,domainDataRef,encodeRef,ccidRef),'','','','FAILURE',CAST(currenttimestamp AS TIMESTAMP FORMAT 'yyyyMMdd HHmmssss'),CAST(InputRoot.Properties.CreationTime AS CHARACTER),'123',Environment.Variables.FileName);
			CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') ENCODING encodeRef CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987');
			PROPAGATE TO TERMINAL 'out';
		END CASE;

	END;
END MODULE;
CREATE COMPUTE MODULE ZSS_StatusUpdate_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL CopyEntireMessage();
		RETURN FALSE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		SET UUID = UUIDASCHAR;
		DECLARE currenttimestamp TIMESTAMP cast(CURRENT_TIMESTAMP AS TIMESTAMP FORMAT 'IU');

		CASE

		WHEN InputRoot.DFDL.ISO8583_1987.ResponseCode_039 LIKE '00' THEN
			CALL insertSalaryPayment(UUID,inDomainDataRef.ISO8583_1987.AccountIdentification2_103,CAST(currenttimestamp AS TIMESTAMP FORMAT 'yyyyMMdd HHmmssss'),
			'','00',getPayLoad(domainName,domainDataRef,encodeRef,ccidRef),'SUCCESS','',CAST(currenttimestamp AS TIMESTAMP FORMAT 'yyyyMMdd HHmmssss'),CAST(InputRoot.Properties.CreationTime AS CHARACTER),'123',Environment.Variables.FileName);
			-- SET OutputRoot.DFDL.ISO8583_1987 = InputRoot.DFDL.ISO8583_1987;
			-- SET OutputRoot.DFDL.ISO8583_1987 = getPayLoad(FIELDNAME(inDomainDataRef.ISO8583_1987),inDomainDataRef.ISO8583_1987,encodeRef,ccidRef);
			CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') ENCODING encodeRef CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987');

			PROPAGATE TO TERMINAL 'out';
		ELSE

			CALL insertSalaryPayment(UUID,inDomainDataRef.ISO8583_1987.AccountIdentification2_103,CAST(currenttimestamp AS TIMESTAMP FORMAT 'yyyyMMdd HHmmssss'),
			getPayLoad(domainName,domainDataRef,encodeRef,ccidRef),'','','FAILURE','',CAST(currenttimestamp AS TIMESTAMP FORMAT 'yyyyMMdd HHmmssss'),CAST(InputRoot.Properties.CreationTime AS CHARACTER),'123',Environment.Variables.FileName);
			CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') ENCODING encodeRef CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987');
			PROPAGATE TO TERMINAL 'out';
		END CASE;

	END;
END MODULE;

CREATE COMPUTE MODULE SalaryPaymentsFlow_ExceptionCapture
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;



CREATE PROCEDURE insertSalaryPayment (IN SALARY_PAYMENTS_GUID CHARACTER,IN SALARY_PAYMENTS_STAN_NUM CHARACTER
,IN SALARY_PAYMENTS_STANDATE TIMESTAMP,IN SALARY_PAYMENTS_ISO_REQUEST_MSG CHARACTER
,IN SALARY_PAYMENTS_RESPONSE_CODE CHARACTER,IN SALARY_PAYMENTS_ISO_RESPONSE_MSG CHARACTER,IN SALARY_PAYMENTS_ZSS_STATUS CHARACTER,
IN SALARY_PAYMENTS_T24_STATUS CHARACTER,IN SALARY_PAYMENTS_DATECREATED TIMESTAMP,IN SALARY_PAYMENTS_DATEUPDATED CHARACTER,IN SALARY_PAYMENTS_ID CHARACTER,IN SALARY_PAYMENTS_CSV_FILENAME CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "INSERT_SALARY_PAYMENTS";