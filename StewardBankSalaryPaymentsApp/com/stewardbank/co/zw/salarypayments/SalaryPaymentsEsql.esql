

BROKER SCHEMA com.stewardbank.co.zw.salarypayments
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH,LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER '';
DECLARE resQueueName EXTERNAL CHARACTER '';
DECLARE UUID SHARED CHARACTER '';
CREATE COMPUTE MODULE csv_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		CASE
		WHEN domainName LIKE 'DFDL' THEN
			DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
			DECLARE inRef REFERENCE TO InputRoot.DFDL.stewardBank_CSV.record;
			CALL CSVToISOMapping(inRef,outRef);
			RETURN FALSE;
		ELSE
			RETURN FALSE;
		END CASE;
	END;
	CREATE PROCEDURE CSVToISOMapping (IN inRef REFERENCE, INOUT outRef REFERENCE)
	BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE inRef REFERENCE TO InputRoot.DFDL.stewardBank_CSV.record;
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET UUID = UUIDASCHAR;
		SET Environment.Variables.UID = UUID;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','..............Start SalaryPayments  ReqToPostilion logging...........') INTO rc;
		END IF;
		--------------DBLogging-------------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.Variables.UID,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,inRef.CREDIT_DATE,inRef.DEBIT_DATE,
			inRef.CREDIT_THEIR_REFERENCE,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out2';
		-----------------------------
		DECLARE env REFERENCE TO Environment.Variables;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		DECLARE resQ CHARACTER Environment.MQRFH2.usr.resQueueName;
		SET Environment.Variables.ResponseQ = resQ;
		DECLARE Response ROW;
		DECLARE sql CHARACTER '';
		DECLARE csvDate DATE CAST(inRef.DEBIT_DATE AS DATE FORMAT 'yyyyMMdd');
		SET Environment.Variables.FileName = InputLocalEnvironment.File.Name;
		SET Environment.Variables.Fields = 'TRANSACTION_TYPE, DEBIT_ACCOUNT, CURRENNCY, AMOUNT, CREDIT_ACCOUNT, COMPANY, DEBIT_DATE, CREDIT_DATE, CREDIT_THEIR_REFERENCE, NARRATION';
		SET Environment.Variables.Amount = inRef.AMOUNT;
		SET Environment.Variables.Dbt_Acc = inRef.DEBIT_ACCOUNT;
		SET Environment.Variables.Crt_Acc = inRef.CREDIT_ACCOUNT;
		SET Environment.Variables.CsvDate = CAST(csvDate AS CHARACTER);
		SET Environment.Variables.CreationDate = CAST(CURRENT_TIMESTAMP AS TIMESTAMP);
		SET Environment.Variables.RRN = inRef.CREDIT_THEIR_REFERENCE;
		DECLARE Env REFERENCE TO Environment.Variables;
		SET Env.FileNameCheck = SUBSTRING(InputLocalEnvironment.File.Name FROM 1 FOR 2);
		DECLARE tiime CHARACTER;
		DECLARE str CHARACTER;
		DECLARE CREDIT_DATE TIME;
		SET tiime = CURRENT_TIME;
		SET str = SUBSTRING(tiime FROM 7 FOR 2)||SUBSTRING(tiime FROM 10 FOR 2)||SUBSTRING(tiime FROM 13 FOR 2);
		SET CREDIT_DATE = CAST(str AS TIME FORMAT 'HHmmss');
		--mapping field to field CSV to ISO8583
		SET OutputRoot.Properties.MessageSet= '{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType= '{}:ISO8583_1987';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		--SET outRef.TCPHeaderBitmap[]=inRef.TCPHeaderBitmap[];
		DECLARE debitDate CHARACTER '  ';
		DECLARE narration CHARACTER '                        ';
		SET outRef.MTI_Version='0';
		SET outRef.MTI_MessageClass='2';
		SET outRef.MTI_MessageFunction='0';
		SET outRef.MTI_MessageOrigin='0';
		IF Env.FileNameCheck LIKE 'PM' THEN
			SET outRef.ProcessingCode_003 = '410000';
		ELSE
			SET outRef.ProcessingCode_003 = '420000';
		END IF;
		SET outRef.AmountTransaction_004 = inRef.AMOUNT; --4
		SET outRef.TransmissionDatetime_007 = inRef.DEBIT_DATE||debitDate; -- CSV Field 7
		SET outRef.TimeLocalTransaction_012 = CREDIT_DATE; -- CSV Field 8
		--SET outRef.DateLocalTransaction_013 = SUBSTRING(inRef.CREDIT_DATE FROM 5 FOR 4); -- CSV Field 8
		--SET outRef.DateSettlement_015 = SUBSTRING(inRef.CREDIT_DATE FROM 5 FOR 4); -- CSV Field 8
		SET outRef.RetrievalReferenceNumber_037 = SUBSTRING(inRef.CREDIT_THEIR_REFERENCE FROM 1 FOR 12); -- CSV Field 9
		SET outRef.CardAcceptorNameLocation_043 = inRef.NARRATION||narration; -- CSV Field 10
		SET outRef.CurrencyCodeTransaction_049 = inRef.CURRENNCY; -- CSV Field 3
		SET outRef.AccountIdentification1_102 = inRef.CREDIT_ACCOUNT; -- CSV Field 5
		SET outRef.AccountIdentification2_103 = inRef.DEBIT_ACCOUNT; -- CSV Field 2
		SET outRef.TransactionDescription_104 = inRef.TRANSACTION_TYPE; -- CSV Field 1
		CALL UpdateMsgWithAsciiBitMap(outRef);
		--get account details from db lookup
		SET sql='SELECT * FROM ISAVE_CARD_MAPPING WHERE ACCOUNT_ID=?';
		DECLARE CreditAccount CHARACTER outRef.AccountIdentification1_102;
		CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG',CreditAccount) INTO rc;
		SET Response.accountEnquiry[]=PASSTHRU(sql VALUES(CreditAccount));
		SET Environment.Variables.zssdfdlData = OutputRoot.DFDL;
		SET Environment.Variables.msg = getPayLoad(domainName,outRef,encodeRef,ccidRef);
		IF EXISTS (Response.accountEnquiry.*[]) OR STARTSWITH(CreditAccount,'2') THEN
			--ZSS Call
			SET OutputRoot.DFDL = Environment.Variables.zssdfdlData;
			----- Database Logging ------------
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Environment.Variables.UID,Environment.Variables.msg,'ZSS Request',ApplicationLabel,BrokerName,outRef.DateSettlement_015,outRef.TransmissionDatetime_007,outRef.RetrievalReferenceNumber_037,outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			SET OutputRoot.DFDL = NULL;
			PROPAGATE TO TERMINAL 'out2';
			----------------------
			SET OutputRoot.Properties=InputRoot.Properties;
			SET OutputRoot.Properties.MessageSet= '{ISO8583_Lib}';
			SET OutputRoot.Properties.MessageType= '{}:ISO8583_1987';
			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
			SET OutputRoot.DFDL = Environment.Variables.zssdfdlData;
			IF Env.FileNameCheck LIKE 'PO' THEN
				CALL INSERT_SB_ISAVE_PAYNET_TRX_TRACKING(Env.UID,'','','',Environment.Variables.msg,'',Env.FileName,Env.Fields,Env.Amount,Env.Dbt_Acc,Env.Crt_Acc,Env.CsvDate,
				'','','','','SUCCESS',Env.CreationDate,CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'TRUE');
			ELSE
				CALL INSERT_SB_ISAVE_PAYNET_TRX_TRACKING(Env.UID,'','','',Environment.Variables.msg,'',Env.FileName,Env.Fields,Env.Amount,Env.Dbt_Acc,Env.Crt_Acc,Env.CsvDate,
				'','','','','SUCCESS',Env.CreationDate,CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'FALSE');
			END IF;
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','..............End SALARYPAYMENTS  ReqToZSS logging...........') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG',getPayLoad(domainName,outRef,encodeRef,ccidRef)) INTO rc;
			END IF;
			PROPAGATE TO TERMINAL 'out';
		ELSE
			--T24 Call
			SET Environment.Variables.t24dfdlData = OutputRoot.DFDL;
			----- Database Logging ------------
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Environment.Variables.UID,Environment.Variables.msg,'T24 Request',ApplicationLabel,BrokerName,outRef.DateSettlement_015,outRef.TransmissionDatetime_007,outRef.RetrievalReferenceNumber_037,outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			SET OutputRoot.DFDL = NULL;
			PROPAGATE TO TERMINAL 'out2';
			----------------------
			SET OutputRoot.Properties=InputRoot.Properties;
			SET OutputRoot.Properties.MessageSet= '{ISO8583_Lib}';
			SET OutputRoot.Properties.MessageType= '{}:ISO8583_1987';
			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
			SET OutputRoot.DFDL = Environment.Variables.t24dfdlData;
			IF Env.FileNameCheck LIKE 'PO' THEN
				CALL INSERT_SB_ISAVE_PAYNET_TRX_TRACKING(Env.UID,'','','','','',Env.FileName,Env.Fields,Env.Amount,Env.Dbt_Acc,Env.Crt_Acc,Env.CsvDate,
				Environment.Variables.msg,'','','','SUCCESS',Env.CreationDate,CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'TRUE');
			ELSE
				CALL INSERT_SB_ISAVE_PAYNET_TRX_TRACKING(Env.UID,'','','','','',Env.FileName,Env.Fields,Env.Amount,Env.Dbt_Acc,Env.Crt_Acc,Env.CsvDate,
				Environment.Variables.msg,'','','','SUCCESS',Env.CreationDate,CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'FALSE');
			END IF;
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','..............End SALARYPAYMENTS  ReqToT24 logging...........') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG',Environment.Variables.msg) INTO rc;
			END IF;
			PROPAGATE TO TERMINAL 'out1';
			-- IF EXISTS (Env.FileNameCheck LIKE 'PO') OR (Env.FileNameCheck LIKE 'PM') THEN
			-- UPDATE Database.ORADSN.SYSTEM.SB_ISAVE_PAYNET_TRX_TRACKING AS I SET
			-- PAYNET_CSV_STATUS = 'SUCCESS' WHERE I.PAYNET_GUID =Env.UID;
			-- ELSE
			-- UPDATE Database.ORADSN.SYSTEM.SB_ISAVE_PAYNET_TRX_TRACKING AS I SET
			-- PAYNET_CSV_STATUS = 'FAILURE' WHERE I.PAYNET_GUID =Env.UID;
			-- END IF;
		END IF;
	END;
END MODULE;
--------------------------------------------------------------------------------------------ZSS or T24 Response COMPUTE------------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE ZSSorT24_StatusUpdate_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN FALSE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET OutputRoot.Properties=InputRoot.Properties;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		SET UUID = UUIDASCHAR;
		DECLARE Env REFERENCE TO Environment.Variables;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Response ROW;
		DECLARE sql CHARACTER '';
		SET sql='SELECT * FROM ISAVE_CARD_MAPPING WHERE ACCOUNT_ID=?';
		DECLARE CreditAccount CHARACTER inDomainDataRef.AccountIdentification1_102;
		CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG',CreditAccount) INTO rc;
		SET Response.accountEnquiry[]=PASSTHRU(sql VALUES(CreditAccount));
		IF EXISTS (Response.accountEnquiry.*[]) OR STARTSWITH(CreditAccount,'2') THEN
			---ZSS_Response to Postilion---
			CASE
			WHEN InputRoot.DFDL.ISO8583_1987.ResponseCode_039 LIKE '00' THEN
				---Success Case---
				IF Env.FileNameCheck LIKE 'PO' THEN
					CALL UPDATE_STATUS_SB_ISAVE(Env.UID,inRef.SystemsTraceAuditNumber_011,CAST(Env.CreationDate AS CHARACTER),inRef.RetrievalReferenceNumber_037,inRef.ResponseCode_039,'SUCCESS','','TRUE');
				ELSE
					CALL UPDATE_STATUS_SB_ISAVE(Env.UID,inRef.SystemsTraceAuditNumber_011,CAST(Env.CreationDate AS CHARACTER),inRef.RetrievalReferenceNumber_037,inRef.ResponseCode_039,'SUCCESS','','FALSE');
				END IF;
				---DB Logging---
				IF IsLogRequired LIKE 'Y' THEN
					CALL DBLogging(Env.UID,Env.msg,'ZSS Success Response',ApplicationLabel,BrokerName,outRef.DateSettlement_015,outRef.TransmissionDatetime_007,outRef.RetrievalReferenceNumber_037,outRefer);
				END IF;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
				PROPAGATE TO TERMINAL 'out';
				----------------------
				CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') ENCODING encodeRef CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987');
				DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
				SET Environment.Variables.resMsg = getPayLoad(domainName,inRef,encodeRef,ccidRef);
				IF IsLogRequired LIKE 'Y' THEN
					CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','..........Logging generated Response...............') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','ZSS Response::') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG',Environment.Variables.resMsg) INTO rc;
				END IF;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
				PROPAGATE TO TERMINAL 'out';
			ELSE
				---Failure Case---
				IF Env.FileNameCheck LIKE 'PO' THEN
					CALL UPDATE_STATUS_SB_ISAVE(Env.UID,'','','','','FAILURE','','TRUE');
				ELSE
					CALL UPDATE_STATUS_SB_ISAVE(Env.UID,'','','','','FAILURE','','FALSE');
				END IF;
				CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') ENCODING encodeRef CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987');
				---Error DB Logging---
				DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
				SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
				DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
				DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
				SET Environment.Variables.Date_Time = CAST(CURRENT_TIMESTAMP AS TIMESTAMP);
				DECLARE Env REFERENCE TO Environment.Variables;
				IF IsLogRequired LIKE 'Y' THEN
					CALL Error_DBLogging(Env.UID,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(Env.Date_Time AS CHARACTER),
					CAST(Env.Date_Time AS CHARACTER),Env.RRN,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SalaryPayments.ErrorCode,outRefer);
					CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
				END IF;
				SET OutputRoot.DFDL = NULL;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
				PROPAGATE TO TERMINAL 'out';
				-------------------------------------
				IF IsLogRequired LIKE 'Y' THEN
					CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','ZSS Response:: FAILURE') INTO rc;
				END IF;
				CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') ENCODING encodeRef CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987');
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
				PROPAGATE TO TERMINAL 'out';
			END CASE;
		ELSE
			---T24 Response to Postilion---
			CASE
			WHEN InputRoot.DFDL.ISO8583_1987.ResponseCode_039 LIKE '00' THEN
				---Success Case---
				IF Env.FileNameCheck LIKE 'PO' THEN
					CALL UPDATE_STATUS_SB_ISAVE(Env.UID,inRef.SystemsTraceAuditNumber_011,CAST(Env.CreationDate AS CHARACTER),inRef.RetrievalReferenceNumber_037,inRef.ResponseCode_039,'','SUCCESS','TRUE');
				ELSE
					CALL UPDATE_STATUS_SB_ISAVE(Env.UID,inRef.SystemsTraceAuditNumber_011,CAST(Env.CreationDate AS CHARACTER),inRef.RetrievalReferenceNumber_037,inRef.ResponseCode_039,'','SUCCESS','FALSE');
				END IF;
				---DB Logging---
				IF IsLogRequired LIKE 'Y' THEN
					CALL DBLogging(Env.UID,Env.msg,'T24 Success Response',ApplicationLabel,BrokerName,outRef.DateSettlement_015,outRef.TransmissionDatetime_007,outRef.RetrievalReferenceNumber_037,outRefer);
				END IF;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
				PROPAGATE TO TERMINAL 'out';
				----------------------
				CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') ENCODING encodeRef CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987');
				IF IsLogRequired LIKE 'Y' THEN
					CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','..........Logging generated Response...............') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','T24 Response::') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG',Environment.Variables.resMsg) INTO rc;
				END IF;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
				PROPAGATE TO TERMINAL 'out';
			ELSE
				---Failure Case---
				IF Env.FileNameCheck LIKE 'PO' THEN
					CALL UPDATE_STATUS_SB_ISAVE(Env.UID,'','','','','','SUCCESS','TRUE');
				ELSE
					CALL UPDATE_STATUS_SB_ISAVE(Env.UID,'','','','','','FAILURE','FALSE');
				END IF;
				CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') ENCODING encodeRef CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987');
				---Error DB Logging---
				DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
				SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
				DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
				DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
				SET Environment.Variables.Date_Time = CAST(CURRENT_TIMESTAMP AS TIMESTAMP);
				DECLARE Env REFERENCE TO Environment.Variables;
				IF IsLogRequired LIKE 'Y' THEN
					CALL Error_DBLogging(Env.UID,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(Env.Date_Time AS CHARACTER),
					CAST(Env.Date_Time AS CHARACTER),Env.RRN,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SalaryPayments.ErrorCode,outRefer);
					CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
				END IF;
				SET OutputRoot.DFDL = NULL;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
				PROPAGATE TO TERMINAL 'out';
				--------------------------- ----------
				IF IsLogRequired LIKE 'Y' THEN
					CALL writeToLogFile(MessageFlowLabel, 'SalaryPayments', 'DEBUG','T24 Response:: FAILURE') INTO rc;
				END IF;
				CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') ENCODING encodeRef CCSID ccidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987');
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
			END CASE;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE SalaryPaymentsFlow_ExceptionCapture
	CREATE FUNCTION Main() RETURNS BOOLEAN BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		--DECLARE Id CHARACTER CAST(Environment.MQRFH2.usr.Id AS CHARACTER);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SalaryPayments';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SalaryPayments');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		DECLARE Env REFERENCE TO Environment.Variables;
		SET Environment.Variables.Date_Time = CAST(CURRENT_TIMESTAMP AS TIMESTAMP);
		IF IsLogRequired LIKE 'Y' THEN
			CALL Error_DBLogging(Env.UID,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(Env.Date_Time AS CHARACTER),CAST(Env.Date_Time AS CHARACTER),Env.RRN,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SalaryPayments.ErrorCode,outRefer);
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		----------------------------------
		RETURN FALSE;
	END;
END MODULE;

CREATE PROCEDURE INSERT_SB_ISAVE_PAYNET_TRX_TRACKING (IN PAYNET_GUID CHARACTER,IN PAYNET_STAN_NUM CHARACTER, IN PAYNET_STANDATE CHARACTER
,IN PAYNET_RRN_REF CHARACTER,IN PAYNET_ISO_REQUEST_MSG CHARACTER,IN PAYNET_ISO_RESPONSE_CODE CHARACTER,IN PAYNET_CSV_FILENAME CHARACTER,IN PAYNET_CSV_FIELDS CHARACTER,IN PAYNET_CSV_AMOUNT CHARACTER,
IN PAYNET_CSV_DTACCOUNT CHARACTER,IN PAYNET_CSV_CRACCOUNT CHARACTER,IN PAYNET_CSV_DTDATE CHARACTER,IN PAYNET_ISO_MSG CHARACTER,
IN PAYNET_ISO_FT CHARACTER,IN PAYNET_ZSS_STATUS CHARACTER,IN PAYNET_T24_STATUS CHARACTER,IN PAYNET_CSV_STATUS CHARACTER,IN PAYNET_DATECREATED TIMESTAMP,IN PAYNET_DATEUPDATED TIMESTAMP,IN PAYNET_TAXABLE CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "INSERT_SB_ISAVE_PAYNET_TRX_TRACKING";


CREATE PROCEDURE UPDATE_STATUS_SB_ISAVE(IN PAYNET_ID CHARACTER,IN PAYNET_STAN_NUM CHARACTER,IN PAYNET_STANDATE CHARACTER,IN PAYNET_RRN_REF CHARACTER,
IN PAYNET_ISO_RESPONSE_CODE CHARACTER,IN PAYNET_ZSS_STATUS CHARACTER,IN PAYNET_T24_STATUS CHARACTER,IN PAYNET_TAXABLE CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "UPDATE_SB_ISAVE_STATUS";