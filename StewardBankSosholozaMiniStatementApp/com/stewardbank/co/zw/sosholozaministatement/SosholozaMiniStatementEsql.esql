BROKER SCHEMA com.stewardbank.co.zw.sosholozaministatement
PATH  com.stewardbank.co.zw.common.esql; 
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';	
DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER'';
DECLARE ALL_SB_HTTP_RES EXTERNAL CHARACTER'';

CREATE COMPUTE MODULE SosholozaMiniStatementFlow_GenerateIsoReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateIsoReq();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateIsoReq() BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE reqMsg,procCodeData,QueueName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE DBDetails ROW;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE col CHARACTER ':';
		DECLARE comm CHARACTER ',';
		DECLARE channel CHARACTER 'Channel';
		DECLARE destinationPhone CHARACTER 'DestinationPhone';
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.JSON,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.reqMsg = reqMsg;
		
		
		
		DECLARE outRefer REFERENCE TO OutputRoot;
		/*=================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(InputRoot.MQRFH2.RequestIdentifier,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END  ==============*/
		/*=================== CALLING LOG4j  LOGGING   ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG','..............Start Mini Statement HTTP logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG','Incoming Request::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG',reqMsg) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END  ==============*/
		SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
		SET OutputRoot.MQRFH2.usr = Environment.Variables.usr;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		SET outRef.MTI_Version = 0;
		SET outRef.MTI_MessageClass = 2;
		SET outRef.MTI_MessageFunction = 0;
		SET outRef.MTI_MessageOrigin = 0;
		SET outRef.ProcessingCode_003 = inRef.JSON.Data.MiniStatementRequest.header.processingCode;
		SET outRef.AccountIdentification1_102 = CAST(inRef.JSON.Data.MiniStatementRequest.body.fromAccount AS INTEGER);
	/*          ==================================     */
		DECLARE keyChannelValue CHARACTER'';
		CALL keyValueGenerator(inRef.JSON.Data.MiniStatementRequest.header.channel) INTO keyChannelValue;   
		DECLARE keyChannel CHARACTER '';
		CALL keyValueGenerator(channel) INTO keyChannel; 
		SET outRef.ReservedPrivate_127 = '000000';
		SET outRef.StructuredDataPostilionPrivate_127_22 = keyChannel ||keyChannelValue;
		CALL UpdateMsgWithAsciiBitMap(outRef);
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;	
		SET Environment.Variables.resMsg = getPayLoad(FIELDNAME(OutputRoot.DFDL),outDomainDataRef,encodeRef,ccsid);        
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET OutputRoot.DFDL = NULL;
		/*=================== CALLING LOG4J LOGGING  ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG','Generate Req in ISO 8583::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END  ==============*/
		/*=================== CALLING DB RAW AUDIT LOGGING   ==============*/
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(InputRoot.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Postilion Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END  ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;
	END;
END MODULE;
CREATE COMPUTE MODULE SosholozaMiniStatementFlow_ReqToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateReqToT24();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateReqToT24() BEGIN
		DECLARE rc BOOLEAN FALSE;
		
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583WithHeader;	
		DECLARE envUsrRef REFERENCE TO Environment.MQRFH2.usr;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		SET Environment.Variables.reqISOMsg = getPayLoad(FIELDNAME(InputRoot.DFDL),inDomainDataRef,encodeRef,ccsid);
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		
		DECLARE reqMsgJson CHARACTER'';
		DECLARE logRef REFERENCE TO InputRoot.DFDL.ISO8583WithHeader;
		DECLARE jsonRef REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot AS jsonRef DOMAIN('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON AS jsonRef NAME ('Data');
		--CALL JSONLogMessage(logRef,jsonRef);
		SET jsonRef = logRef;
		SET reqMsgJson = getPayLoad('JSON',jsonRef,encodeRef,ccsid);
		
		SET OutputRoot.JSON=NULL;
		DECLARE posRef REFERENCE TO Environment.DFDL.ISO8583_1987;
		CALL FieldToFieldMapping(inRef,outRef,'',envUsrRef,posRef);
		SET Environment.DFDL = OutputRoot.DFDL;
		
		DECLARE removeRefPointer REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		CALL remove127(removeRefPointer);
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;	
		SET Environment.Variables.t24ResMsg = getPayLoad(FIELDNAME(OutputRoot.DFDL),outDomainDataRef,encodeRef,ccsid);  
		SET Environment.dfdlData = OutputRoot.DFDL;
		DECLARE reqMsgJson1 CHARACTER'';
		DECLARE logRef1 REFERENCE TO OutputRoot.DFDL;
		DECLARE jsonRef1 REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot AS jsonRef1 DOMAIN('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON AS jsonRef1 NAME ('Data');
		--CALL JSONLogMessage(logRef,jsonRef);
		SET jsonRef1 = logRef1;
		SET OutputRoot.JSON=NULL;
		SET reqMsgJson1 = getPayLoad('JSON',jsonRef1,encodeRef,ccsid);
		SET OutputRoot.DFDL = NULL;
		DECLARE Response ROW;
		DECLARE sql CHARACTER '';
		SET sql='SELECT * FROM ISAVE_CARD_MAPPING WHERE ACCOUNT_ID=?';
		DECLARE DebitAccount CHARACTER inRef.AccountIdentification1_102;
		CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG',DebitAccount) INTO rc; 
		SET Response.accountEnquiry[]=PASSTHRU(sql VALUES(DebitAccount));
		IF EXISTS (Response.accountEnquiry.*[]) OR STARTSWITH(DebitAccount,'2') THEN
				IF IsLogRequired LIKE 'Y' THEN
					CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqISOMsg,'ZSS  Message',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
					SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
					PROPAGATE TO TERMINAL 'out1';
				END IF;
				IF IsLogRequired LIKE 'Y' THEN
					CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG','========= ZSS MESSAGE ==========') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG',reqMsgJson) INTO rc;
				END IF;
				SET OutputRoot.Properties = InputRoot.Properties;
					SET OutputRoot.MQRFH2 = Environment.MQRFH2;
					SET OutputRoot.DFDL = InputRoot.DFDL;
				PROPAGATE TO TERMINAL 'out2';
			ELSE
				/*=================== CALLING DB RAW AUDIT LOGGING ==============*/
				IF IsLogRequired LIKE 'Y' THEN
					CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqISOMsg,'Postilion  Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
					SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
					PROPAGATE TO TERMINAL 'out1';
				END IF;
				/*=================== CALLING DB RAW AUDIT LOGGING END ==============*/
				/*=================== CALLING LOG4J LOGGING ==============*/
				IF IsLogRequired LIKE 'Y' THEN

					CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG','========= POSTILION RESPONSE ==========') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG',reqMsgJson) INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG','========= T24 REQUEST ==========') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG',reqMsgJson1) INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG','========= T24 REQUEST ==========') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG',Environment.Variables.t24ResMsg) INTO rc; 
				END IF;
				/*=================== CALLING LOG4J LOGGING END ==============*/
				SET OutputRoot.Properties = InputRoot.Properties;
				SET OutputRoot.MQRFH2 = Environment.MQRFH2;
				SET OutputRoot.DFDL = Environment.dfdlData; 
				PROPAGATE TO TERMINAL 'out';
			END IF;
	END;
END MODULE;
CREATE COMPUTE MODULE SosholozaMiniStatementFlow_ReqToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL reqToPostilion();
		RETURN TRUE;
	END;
	CREATE PROCEDURE reqToPostilion() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;	
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Environment.Variables.resISOMsg = getPayLoad(FIELDNAME(InputRoot.DFDL),inDomainDataRef,encodeRef,ccsid);
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		SET Environment.dfdlData = InputRoot.DFDL;
		/*=================== CALLING DB RAW AUDIT LOGGING   ==============*/
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resISOMsg,'T24 Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END  ==============*/
		/*=================== CALLING LOG4J LOGGING   ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			
			CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG','Response from T24::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG',Environment.Variables.resISOMsg) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END  ==============*/
		
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;
	END;
END MODULE;
CREATE COMPUTE MODULE SosholozaMiniStatementFlow_ReqToFrondEnd
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateResToPortalBackend();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateResToPortalBackend() BEGIN
SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583WithHeader;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING   ==============*/
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,getPayLoad(FIELDNAME(InputBody),inDomainDataRef,encodeRef,ccsid),'Postilion Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out';
		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END  ==============*/
		/*=================== CALLING LOG4J LOGGING   ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			
			CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG','Response from Postilion::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG',getPayLoad(FIELDNAME(InputBody),inDomainDataRef,encodeRef,ccsid)) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END  ==============*/
		
		DECLARE field48 CHARACTER'';
		SET  field48 = InputRoot.DFDL.ISO8583WithHeader.AdditionalDataPrivate_048;
		
		SET field48 = SUBSTRING(field48 AFTER '~');
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(field48.RESPONSE  ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId  TYPE '{}:Mini_Statement');
			CREATE LASTCHILD OF OutputRoot.JSON.Data NAME 'MiniStatementResponse';
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'header';
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME 'body';
			DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.*.header;
			DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body;
			DECLARE dfdlRef REFERENCE TO OutputRoot.DFDL.Mini_Statement.record[1];
			DECLARE i INTEGER 1;
		DECLARE MTI_Version CHARACTER InputRoot.DFDL.ISO8583WithHeader.MTI_Version;
		DECLARE MTI_MessageClass CHARACTER InputRoot.DFDL.ISO8583WithHeader.MTI_MessageClass;
		DECLARE MTI_MessageFunction CHARACTER InputRoot.DFDL.ISO8583WithHeader.MTI_MessageFunction;
		DECLARE MTI_MessageOrigin CHARACTER InputRoot.DFDL.ISO8583WithHeader.MTI_MessageOrigin;
			
		IF inRef.ResponseCode_039 = '00' THEN
			SET headRef.channel = 'MobileApp';
			SET headRef.processingCode = inRef.ProcessingCode_003;
			SET headRef.responseCode = '200';
			SET headRef.status = 'SUCCESS';     
			SET bodyRef.postilionRRN='';
			SET bodyRef.postilionRespCode = inRef.ResponseCode_039;
			SET bodyRef.postilionRespMsgType = MTI_Version||MTI_MessageClass||MTI_MessageFunction||MTI_MessageOrigin;
			SET bodyRef.reference='';
			SET bodyRef.reference1='';
			SET bodyRef.reference2='';
			SET bodyRef.balance='';
			
			CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)miniStatementData;
			DECLARE minRef REFERENCE TO bodyRef.miniStatementData;
			WHILE LASTMOVE(dfdlRef) DO
				CREATE LASTCHILD OF minRef.Item[i] TYPE NameValue NAME 'DATE_TIME' VALUE dfdlRef.DATE_TIME;
				CREATE LASTCHILD OF minRef.Item[i] TYPE NameValue NAME 'TRAN_TYPE' VALUE dfdlRef.TRAN_TYPE;
				CREATE LASTCHILD OF minRef.Item[i] TYPE NameValue NAME 'SIGN' VALUE dfdlRef.SIGN;
				CREATE LASTCHILD OF minRef.Item[i] TYPE NameValue NAME 'TRAN_AMOUNT' VALUE dfdlRef.TRAN_AMOUNT;
				CREATE LASTCHILD OF minRef.Item[i] TYPE NameValue NAME 'CURR_CODE' VALUE dfdlRef.CURR_CODE;
				SET i=i+1;
				MOVE dfdlRef NEXTSIBLING;
			END WHILE;

			

		ELSE
			SET headRef.statusCode = '000';
			SET headRef.message = 'FAILURE';
			SET headRef.responseBody.source = 'ESB';
			SET headRef.responseBody.applicationName = 'MINI_STATEMENT_HTTP';

		END IF;
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.JSON.Data;
		SET Environment.Variables.resMsg = getPayLoad(FIELDNAME(OutputRoot.JSON),outDomainDataRef,encodeRef,ccsid);
		DECLARE OutRefer REFERENCE TO OutputRoot.JSON.Data;
		DECLARE envref REFERENCE TO Environment;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'JSON';
		CREATE LASTCHILD OF Environment.JSON AS envref NAME 'Data';
		SET envref = OutRefer;
		SET OutputRoot = NULL;
		/*=================== CALLING LOG4J LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG','Response To Outgoing Router::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'MiniStatementHTTPLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END ==============*/
		/*=================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON.Data = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ALL_SB_HTTP_RES'; --Environment.Variables.usr.resQueueName;
END;
END MODULE;

CREATE COMPUTE MODULE SosholozaMiniStatementFlow_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL BuildErrorMsg();
		RETURN TRUE;
	END;
	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'T24ClientOut,connection refused') THEN
			SET errMsg = 'T24 Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientCall,connection refused') THEN
			SET errMsg = 'Postilion Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'T24ClientReceiveData,Exception whilst parsing') THEN 
			SET errMsg = 'No Response from T24 Server';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientReceiveData,Exception whilst parsing') THEN 
			SET errMsg = 'No Response from Postilion Server';	
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'MiniStatementResponse';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'MiniStatementResponse');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('MiniStatementResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headerRef = Environment.MQRFH2.header;
		SET headerRef.status = 'FAILED';
		SET headerRef.responseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.MiniStatementResponse.ErrorCode;
		SET errorRef.message = errMsg;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.MiniStatementResponse.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;    
		----------------------------------
		END;
END MODULE;

