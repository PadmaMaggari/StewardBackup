
/*
Author: Padma Maggari
Version: 0.0.1
Date of Creation: 04-05-2020
Date of Modification: 04-05-2020
Description: Postilion different kind of MTI messages
*/


BROKER SCHEMA com.stewardbank.co.zw.postilionmsgs
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH, APPLICATION_NAME, RAW_AUDIT_LOGGING, ERROR_AUDIT_LOGGING, EXCEPTION_QUEUE EXTERNAL CHARACTER;
CREATE COMPUTE MODULE StewardBankPostilionMsgsFlow_GenerateReqToT24     
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN     
		CALL GenerateReqToT24();
		RETURN FALSE;
	END;

	CREATE PROCEDURE GenerateReqToT24 () BEGIN

      
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.usr = InputRoot.MQRFH2.usr;
		/* ==================== Database Logging Start ==================== */
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		SET Environment.reqMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		
		
		CALL DBLogging(Environment.usr.Id,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName, Environment.usr.timeLocalTransaction, Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out1';
		SET OutputRoot = NULL;
		/* ==================== Database Logging End ==================== */
		/* ==================== Framing Request To T24 ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path';
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'PostilionMsgs', 'DEBUG','..............Start Postilion Messages logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'PostilionMsgs', 'DEBUG','Request to Postilion Msgs::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'PostilionMsgs', 'DEBUG',Environment.reqMsg) INTO rc;
		CALL FieldToFieldMapping(inRef,outRef,'','');
		SET Environment.DFDL = OutputRoot.DFDL;
		SET OutputRoot = NULL;
		/* ==================== Database Logging Start ==================== */
		CALL DBLogging(Environment.usr.Id,Environment.reqMsg,'T24 Request', ApplicationLabel, BrokerName, Environment.usr.timeLocalTransaction, Environment.usr.dateLocalTransaction, Environment.usr.retrievalReferenceNumber, outRefer);		


		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out1';
		/* ==================== Database Logging Ended ==================== */
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.DFDL = Environment.DFDL;
		CALL writeToLogFile(MessageFlowLabel, 'PostilionMsgs', 'DEBUG','Request To T24::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'PostilionMsgs', 'DEBUG',Environment.reqMsg) INTO rc;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;


CREATE COMPUTE MODULE StewardBankPostilionMsgsFlow_GenerateResToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateResToPostilion();
		RETURN FALSE;
	END;	


	CREATE PROCEDURE GenerateResToPostilion() BEGIN
		/* ==================== Database Logging Starting ==================== */
			DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		SET Environment.resMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		


		DECLARE outRefer REFERENCE TO OutputRoot;
		CALL DBLogging(Environment.usr.Id,Environment.resMsg,'T24 Response', ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction, Environment.usr.dateLocalTransaction, Environment.usr.retrievalReferenceNumber, outRefer);


		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot=NULL;
		/* ==================== Database Logging Ended ==================== */
		/* ==================== Framing Response To TCPIP Router ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'PostilionMsgs', 'DEBUG','.........................') INTO rc;
		--field to field mapping
		CALL FieldToFieldMapping(inRef,outRef,'','');
		SET Environment.dfdlData=InputRoot.DFDL;
		SET OutputRoot=NULL;
		/* ==================== Database Logging Starting ==================== */
		CALL DBLogging(Environment.usr.Id,Environment.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);


		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
		/* ==================== Database Logging Ended ==================== */
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.MQRFH2.resData = Environment.resData;
		SET OutputRoot.DFDL = Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'PostilionMsgs', 'DEBUG','Request To Postilion::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'PostilionMsgs', 'DEBUG',Environment.resMsg) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.usr.resQueueName;
		PROPAGATE TO TERMINAL 'out';
	END;

END MODULE;

CREATE COMPUTE MODULE StewardBankPostilionMsgsFlow_ExceptionPropagation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		RETURN FALSE;
	END;

	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Id CHARACTER '';
		SET Id= CAST(Environment.usr.Id AS CHARACTER);


		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'PostilionMsgs';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;

		CALL BuildExceptionDetails(excpRef,outRef,'PostilionMsgs');
		DECLARE brokerErrorMsg CHARACTER;
		DECLARE userErrorMsg CHARACTER;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE  UserdomainDataRef REFERENCE TO InputRoot.XMLNSC;
		SET userErrorMsg = getPayLoad(FIELDNAME(InputBody),UserdomainDataRef,encodeRef,ccidRef); 
		     
		
		SET Environment.postilionMsgsErrorCode = OutputRoot.XMLNSC;
--		/* ==================== Database Logging Ended ==================== */


		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','..................... POSTILION MSGS EXCEPTION .....................') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application User Define Built Exception:'||userErrorMsg) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','TCPIP ID:'||InputRoot.MQRFH2.usr.Id) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_QUEUE;
		PROPAGATE TO TERMINAL 'out';
		
		/* ==================== DATA BASE LOGGING ==================== */

		 CALL Error_DBLogging(InputRoot.MQRFH2.usr.Id,InputRoot.MQRFH2.usr.reqMsg,'Application Error',ApplicationLabel,BrokerName,userErrorMsg,InputRoot.MQRFH2.usr.timeLocalTransaction,InputRoot.MQRFH2.usr.dateLocalTransaction,InputRoot.MQRFH2.usr.retrievalReferenceNumber,CAST(Environment.Variables.ExceptionData.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.ExceptionDetails.ErrorCode,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';

	END;
END MODULE;