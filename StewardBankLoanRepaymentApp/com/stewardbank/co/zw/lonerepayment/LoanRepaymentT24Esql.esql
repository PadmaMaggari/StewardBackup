


BROKER SCHEMA com.stewardbank.co.zw.lonerepayment

PATH com.stewardbank.co.zw.common.esql;
CREATE COMPUTE MODULE LoanRepaymentT24Flow_RequestToT24
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
	DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';
	DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
	DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
	DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
	DECLARE IsLogRequired,RepayURL EXTERNAL CHARACTER'';
	DECLARE ALL_SB_HTTP_RES EXTERNAL CHARACTER '';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL RequestToT24();
		RETURN FALSE;
	END;
	CREATE PROCEDURE RequestToT24() BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE reqMsg CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		-- DECLARE nationalId CHARACTER InputRoot.JSON.Data.nationalId;
		-- DECLARE loanPackageId CHARACTER InputRoot.JSON.Data.loanPackageId;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE executionDate CHARACTER;
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef,encodeRef,ccsid);
		SET executionDate = CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd');
		-- SET DBLogging Properties ==============
		SET Environment.reqMsg = reqMsg;
		-- SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		/* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET Environment.data = InputRoot.JSON.Data;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoneRepaymentLogging', 'DEBUG','..............Start Lone Repayment T24  logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoneRepaymentLogging', 'DEBUG','Incoming Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoneRepaymentLogging', 'DEBUG',reqMsg) INTO rc;
		END IF;
		DECLARE T24_URL CHARACTER;
		SET T24_URL = RepayURL||inRef.creditAccountNumber||'/'||inRef.debitCurrency||'/'||inRef.debitAmount||'/'||inRef.debitAccountNumber||'/'||'20200705'||'/'||inRef.thirdPartyReference;
		--{creditAccountId}/{debitCurrency}/{transactionAmount}/{debitAccount}/{executionDate}/{customer} exchange in debit and credit account
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoneRepaymentLogging', 'DEBUG','Generate URL Req T24::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoneRepaymentLogging', 'DEBUG',T24_URL) INTO rc;
		END IF;
		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
		/* =================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(InputRoot.MQRFH2.RequestIdentifier,T24_URL,'T24  Request',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		--SET OutputRoot.JSON.Data = Environment.data;
		SET OutputRoot.HTTPRequestHeader."Content-Type" = 'application/json';
		SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'POST';
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = T24_URL;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;

CREATE COMPUTE MODULE LoanRepaymentT24Flow_ResponseToChannel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL ResponseToChannel();
		RETURN TRUE;
	END;
	CREATE PROCEDURE ResponseToChannel() BEGIN
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE rc BOOLEAN FALSE;
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Environment.Variables.resMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoneRepaymentLogging', 'DEBUG',' ----- Response from T24 ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoneRepaymentLogging', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'LoneRepayment T24 Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		DECLARE Inrefer REFERENCE to InputRoot.JSON.Data;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('LoneRepayment');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('responseBody'); 
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.responseBody;
		DECLARE status CHARACTER InputRoot.JSON.Data.header.status; 
		IF status LIKE 'success' AND responceCode LIKE '200' THEN
			SET headRef.channel = '*236#';
			SET headRef.processingCode = '120000';
			SET headRef.status = status;
			SET headRef.responseCode = responceCode;
			SET bodyRef = Inrefer;
			-- CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
			-- CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
			-- DECLARE OutRefer REFERENCE to OutputRoot.JSON.Data;
			-- SET OutRefer.statusCode = responceCode;
			-- SET OutRefer.message = 'SUCCESS';
			-- SET OutRefer.responseBody.source = 'ESB';
			-- SET OutRefer.responseBody.applicationName = 'LoneRepayment';
			-- SET OutRefer.responseBody.mobileNumber = Inrefer.mobileNumber;
			-- SET OutRefer.responseBody = Inrefer;
		ELSE
			SET headRef.channel = '*236#';
			SET headRef.processingCode = '120000';
			SET headRef.status = status;
			SET headRef.responseCode = responceCode;
			SET bodyRef = Inrefer;
			-- DECLARE myBlob REFERENCE TO InputRoot.BLOB.BLOB;
			-- CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(myBlob, InputRoot.Properties.Encoding, InputRoot.Properties.CodedCharSetId);
			-- DECLARE domainDataRef REFERENCE TO OutputRoot.JSON.Data;
			-- SET OutputRoot.JSON = NULL;
			-- DECLARE OutRefer REFERENCE to OutputRoot.JSON.Data;
			-- DECLARE Inrefer REFERENCE to InputRoot.JSON.Data.body;
			-- SET OutRefer.statusCode = responceCode;
			-- SET OutRefer.message = 'FAILURE';
			-- SET OutRefer.responseBody.source = 'ESB';
			-- SET OutRefer.responseBody.applicationName = 'LoneRepayment';
			-- SET OutRefer.responseBody.mobileNumber = Inrefer.mobileNumber;
			-- SET OutRefer.responseBody.reason =domainDataRef;
		END IF;
		DECLARE envref REFERENCE TO Environment.JSON.Data;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'JSON';
		CREATE LASTCHILD OF envref AS envref NAME 'Data';
		SET envref = OutputRoot.JSON.Data;
		SET domainName = FIELDNAME(OutputRoot.JSON);
		MOVE domainDataRef TO OutputRoot.JSON.Data;
		SET OutputRoot = NULL;
		--SET Environment.Variables.resMsg = getPayload(domainName,domainDataRef,encodeRef,ccidRef);
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoneRepaymentLogging', 'DEBUG',' ----- Response to FrontEnd ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoneRepaymentLogging', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoneRepaymentLogging', 'DEBUG',' Response QueueName :  '||'ALL_SB_HTTP_RES') INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Response to FrontEnd',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON.Data = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.MQRFH2.usr.resQueueName;
		--PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;

CREATE COMPUTE MODULE LoanRepaymentT24Flow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildException();
		RETURN FALSE;
	END;
	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'T24ClientOut,connection refused') THEN
			SET errMsg = 'T24 Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientCall,connection refused') THEN
			SET errMsg = 'Postilion Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'T24ClientReceiveData,Exception whilst parsing') THEN 
			SET errMsg = 'No Response from T24 Server';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientReceiveData,Exception whilst parsing') THEN 
			SET errMsg = 'No Response from Postilion Server';	
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'Loan_Repayment';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'Loan_Repayment');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		MOVE outRef TO OutputRoot.JSON.Data;
		SET outRef.statusCode = '000';
		SET outRef.status = 'FAILED';
		SET outRef.message = errMsg;
		SET outRef.responseBody.source = 'ESB';
		SET outRef.responseBody.applicationName = ApplicationLabel;
		SET outRef.responseBody.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.Loan_Repayment.ErrorCode;
 		SET OutputRoot.XMLNSC = NULL;
 		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.MQRFH2.usr.resQueueName;    
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		--CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.Loan_Repayment.ErrorCode,outRefer);
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.Loan_Repayment.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;
	END;
END MODULE;