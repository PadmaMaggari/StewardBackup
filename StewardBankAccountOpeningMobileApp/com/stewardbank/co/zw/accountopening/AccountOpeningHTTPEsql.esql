BROKER SCHEMA com.stewardbank.co.zw.accountopening
PATH  com.stewardbank.co.zw.common.esql; 
DECLARE LOG_CONFIG_PATH  EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_QNAME  EXTERNAL CHARACTER '';
DECLARE ERROR_AUDIT_QNAME  EXTERNAL CHARACTER '';
CREATE COMPUTE MODULE AccountOpeningHTTPFlow_GenerateReqToDWH
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL GenerateReqToDWH();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE GenerateReqToDWH() BEGIN
		DECLARE reqMsg,procCodeData,QueueName CHARACTER '';
		--DECLARE DBDetails ROW;
		SET reqMsg = CAST(ASBITSTREAM(InputRoot.JSON CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
			
		-- HTTP ID ==========================
		SET Environment.usr.Id= InputLocalEnvironment.Destination.HTTP.RequestIddentifier;   
		-- SET DBLogging Properties ==============
		SET Environment.reqMsg = reqMsg;
		-- SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CALL DBLogging(Environment.usr.Id,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName,outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		SET Environment.dbLog = OutputRoot.XMLNSC;
		PROPAGATE TO TERMINAL 'out1';
		
		DECLARE env REFERENCE TO Environment.Variables; 
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data.receive.isomsg;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		DECLARE outRef REFERENCE TO OutputRoot.JSON;
		CREATE LASTCHILD OF OutputRoot.JSON AS outRef NAME 'Data';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG','..............Start Account Opening logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG','Request to Account Opening::') INTO rc; 
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.JSON.Data ENCODING 546 CCSID 1208 ) AS CHARACTER)) INTO rc;
		---Construct DWH Request
		SET OutputRoot = InputRoot;	  	
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG','Request To DWH::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.JSON.Data ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER )) INTO rc;
	END;
	
END MODULE;


CREATE COMPUTE MODULE AccountOpeningHTTPFlow_GenerateReqToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL GenerateReqToT24();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE GenerateReqToT24() BEGIN
		DECLARE reqMsg,procCodeData,QueueName CHARACTER '';
		DECLARE DBDetails ROW;
		SET reqMsg = CAST(ASBITSTREAM(InputRoot.JSON CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
			
		-- HTTP ID ==========================
		SET Environment.usr.Id= InputLocalEnvironment.Destination.HTTP.RequestIddentifier;   
		-- SET DBLogging Properties ==============
		SET Environment.reqMsg = reqMsg;
		-- SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CALL DBLogging(Environment.usr.Id,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName,outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		SET Environment.dbLog = OutputRoot.XMLNSC;
		PROPAGATE TO TERMINAL 'out1';
		
		DECLARE env REFERENCE TO Environment.Variables; 
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data.receive.isomsg;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG','JSON before convertig JSON to ISO') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.JSON.Data ENCODING 546 CCSID 1208 SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER)) INTO rc;
		---JSON TO ISO
	--	CALL JSONToISOMapping(inRef,outRef);
		SET OutputRoot = InputRoot;	  	
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG','Request To T24::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER )) INTO rc;
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpeningHTTPFlow_GenerateReqToFCB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL GenerateReqToFCB();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE GenerateReqToFCB() BEGIN
		DECLARE reqMsg,procCodeData,QueueName CHARACTER '';
		DECLARE DBDetails ROW;
		SET reqMsg = CAST(ASBITSTREAM(InputRoot.JSON CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
			
		-- SET DBLogging Properties ==============
		SET Environment.reqMsg = reqMsg;
		-- SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CALL DBLogging(Environment.usr.Id,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName,outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		SET Environment.dbLog = OutputRoot.XMLNSC;
		PROPAGATE TO TERMINAL 'out1';
		
		DECLARE env REFERENCE TO Environment.Variables; 
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		DECLARE outRef REFERENCE TO OutputRoot.JSON;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'Data';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG','JSON before convertig JSON to ISO') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.JSON.Data ENCODING 546 CCSID 1208 ) AS CHARACTER)) INTO rc;
		---construct request to FCB
		SET OutputRoot = InputRoot;	  	
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG','Request To FCB::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.JSON.Data ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER )) INTO rc;
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpeningHTTPFlow_GenerateResToApplicationBackend
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL GenerateResToApplicationBackend();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE GenerateResToApplicationBackend() BEGIN
		DECLARE reqMsg,procCodeData,QueueName CHARACTER '';
		DECLARE DBDetails ROW;
		SET reqMsg = CAST(ASBITSTREAM(InputRoot.JSON CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
			
		-- SET DBLogging Properties ==============
		SET Environment.reqMsg = reqMsg;
		-- SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CALL DBLogging(Environment.usr.Id,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName,outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		SET Environment.dbLog = OutputRoot.XMLNSC;
		PROPAGATE TO TERMINAL 'out1';
		
		DECLARE env REFERENCE TO Environment.Variables; 
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data.receive.isomsg;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		DECLARE outRef REFERENCE TO OutputRoot.JSON;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'Data';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG','JSON before convertig JSON to ISO') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.JSON.Data ENCODING 546 CCSID 1208 SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER)) INTO rc;
	--	Construct response to ApplicationBackend
		SET OutputRoot = InputRoot;	  	
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG','Request To T24::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'DebugLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.JSON.Data ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER )) INTO rc;
	END;END MODULE;


CREATE COMPUTE MODULE AccountOpeningHTTPFlow_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL BuildErrorMsg();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	
	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Id CHARACTER CAST(Environment.usr.Id AS CHARACTER);
		-- ============Error  Logging in DB===================
		DECLARE exe_Desc CHARACTER CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);  
		CALL Error_DBLogging(CAST(Environment.usr.Id AS CHARACTER),Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		-- ============END Error  Logging in DB===================
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'AccountOpening';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'AccountOpening');
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
END;

END MODULE;
