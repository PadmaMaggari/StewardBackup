BROKER SCHEMA com.steward.bank
PATH com.steward.log4j;

CREATE COMPUTE MODULE mini_Statement_Flow_Compute2
	DECLARE rc BOOLEAN;
	DECLARE Config_File EXTERNAL CHARACTER '';
	DECLARE IsLogRequired EXTERNAL CHARACTER '';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog (Config_File) INTO rc;
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		
	DECLARE dbLogging  REFERENCE TO Environment.DB_LOGGING.Data.DB_LOGGING;
	
	
	
			SET OutputRoot.JSON.Data.DB_LOGGING.msgId = dbLogging.msgId;
			SET OutputRoot.JSON.Data.DB_LOGGING.serverIp=dbLogging.serverIp;
			SET OutputRoot.JSON.Data.DB_LOGGING.brokerName =dbLogging.brokerName;
			SET OutputRoot.JSON.Data.DB_LOGGING.egName =dbLogging.egName;
			SET OutputRoot.JSON.Data.DB_LOGGING.createdBy =dbLogging.createdBy; 
			SET OutputRoot.JSON.Data.DB_LOGGING.msgTime = dbLogging.msgTime;
			SET OutputRoot.JSON.Data.DB_LOGGING.payload = dbLogging.req;   
			SET OutputRoot.JSON.Data.DB_LOGGING.payloadTime=dbLogging.msgTime;
			SET OutputRoot.JSON.Data.DB_LOGGING.payloadTP =dbLogging.req;
			SET OutputRoot.JSON.Data.DB_LOGGING.payloadTPTime =dbLogging.msgTime;      
			
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'DB_AUDIT';
		PROPAGATE TO TERMINAL 'out1'; 
	
		 
		SET OutputRoot = InputRoot;
		  
		  
		  
		 
		  
		  
		DECLARE req CHARACTER ''; 
		IF IsLogRequired LIKE 'Y' THEN         

			CALL writerToLogFile (MessageFlowLabel,'Log','INFO','=================== Request Received From Postilion ================') INTO rc;
			SET req = CAST(ASBITSTREAM(InputRoot CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
			CALL writerToLogFile (MessageFlowLabel,'Log','INFO',req) INTO rc;
			CALL writerToLogFile (MessageFlowLabel,'Log','INFO','=================== Postilion Request End ================') INTO rc;			


		END IF;	
		
	END;
END MODULE;
