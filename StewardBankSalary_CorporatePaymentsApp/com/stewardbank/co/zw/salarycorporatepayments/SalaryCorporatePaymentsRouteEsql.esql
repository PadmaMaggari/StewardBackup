
BROKER SCHEMA com.stewardbank.co.zw.salarycorporatepayments
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';
DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER'';  
DECLARE UUID SHARED CHARACTER '';
DECLARE ZSS_Queue EXTERNAL CHARACTER ''; 
CREATE COMPUTE MODULE SalaryCorporatePaymentsFlow_RouteBasedOnT24OrZSS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE Tran_Id CHARACTER InputRoot.DFDL.stewardBank_CSV.record.Tran_ID;
		CASE
		WHEN domainName LIKE 'DFDL' AND Tran_Id NOT LIKE 'tran id' THEN
			DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
			SET Environment.MQRFH2= InputRoot.MQRFH2;
			SET Environment.Variable.data = InputRoot.DFDL;
			DECLARE reqMsg,procCodeData,QueueName CHARACTER '';
			DECLARE rc BOOLEAN FALSE;
			DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
			DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
			DECLARE inRef REFERENCE TO InputRoot;
			DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
			DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
			DECLARE domainDataRef REFERENCE TO InputRoot.DFDL.stewardBank_CSV;
			DECLARE domainName CHARACTER 'stewardBank_CSV';
			DECLARE Response ROW;
			DECLARE sql CHARACTER '';
			-- SET DBLogging Properties ==============
			SET reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
			SET Environment.MQRFH2.reqMsg = reqMsg;
			SET UUID = UUIDASCHAR;
			SET Environment.MQRFH2.UID = UUID;
			SET Environment.MQRFH2.FileName = InputLocalEnvironment.File.Name;
			DECLARE outRefer REFERENCE TO OutputRoot;
			DECLARE inRefer REFERENCE TO InputRoot.DFDL.stewardBank_CSV.record;
			CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
			IF ( rc = FALSE ) THEN
				SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
			END IF;
			DECLARE inAmount REFERENCE TO InputRoot.DFDL.stewardBank_CSV.record.Amount;
			IF CONTAINS(inAmount,'-') THEN
				IF IsLogRequired LIKE 'Y' THEN
					CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','*..............Start Salary & Corporate Payments Logging...........') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','CSV Data:: '||reqMsg) INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','..............Failure due to Negative Amount...........') INTO rc; 
					CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','Negative Amount :: '||inRefer.Amount) INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','Message ID :: '|| Environment.MQRFH2.UID) INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','..............End of Logging...........*') INTO rc;  
				END IF;
				IF CONTAINS(inRefer.Purpose,'Salary') OR CONTAINS(inRefer.Purpose,'Salaries')THEN
					CALL INSERT_SB_SCP_TRACKING(Environment.MQRFH2.UID,'PENDING','PENDING','PENDING','PENDING','PENDING',InputLocalEnvironment.File.Name,reqMsg,inRefer.Amount,
					inRefer.Remitter_Account_Number,inRefer.Beneficiary_Account_Number,inRefer.Date,'','PENDING','FAILURE','PENDING','FAILURE','SUCCESS',CAST(dbLoggingDate AS TIMESTAMP),CAST(dbLoggingDate AS TIMESTAMP),'FALSE');
				ELSE
					CALL INSERT_SB_SCP_TRACKING(Environment.MQRFH2.UID,'PENDING','PENDING','PENDING','PENDING','PENDING',InputLocalEnvironment.File.Name,reqMsg,inRefer.Amount,
					inRefer.Remitter_Account_Number,inRefer.Beneficiary_Account_Number,inRefer.Date,'','PENDING','FAILURE','PENDING','FAILURE','SUCCESS',CAST(dbLoggingDate AS TIMESTAMP),CAST(dbLoggingDate AS TIMESTAMP),'TRUE');
				END IF;
			ELSE
				/* ============== CALL ISAVE DB LOOKUP ===================== */
				SET sql='SELECT * FROM ISAVE_CARD_MAPPING WHERE ACCOUNT_ID=?';
				DECLARE CreditAccount CHARACTER InputRoot.DFDL.stewardBank_CSV.record.Beneficiary_Account_Number;
				SET Response.accountEnquiry[]=PASSTHRU(sql VALUES(CreditAccount));
				IF EXISTS (Response.accountEnquiry.*[]) OR STARTSWITH(CreditAccount,'2') THEN
					--------ZSS-----------
					IF IsLogRequired LIKE 'Y' THEN
						CALL DBLogging(Environment.MQRFH2.UID,reqMsg,'ZSS RouteFlow Request',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),inRef.DFDL.stewardBank_CSV.record.Purpose,outRefer);
						SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
						PROPAGATE TO TERMINAL 'out';
					END IF;
					IF IsLogRequired LIKE 'Y' THEN
						CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','*..............Start Salary & Corporate Payments ZSS Logging...........') INTO rc;
						CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','Sending Data to ZSS :: '||reqMsg) INTO rc;
						CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','CreditAccountId :: '||CreditAccount) INTO rc;
						CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','Message ID :: '|| Environment.MQRFH2.UID) INTO rc;
					END IF;
					SET OutputRoot.Properties = InputRoot.Properties;
					SET OutputRoot.MQRFH2 = Environment.MQRFH2;
					SET OutputRoot.DFDL = Environment.Variable.data;
					SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ZSS_Queue;  
					PROPAGATE TO TERMINAL 'out';
				ELSE
					--------T24----------
					IF IsLogRequired LIKE 'Y' THEN
						CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','*..............Start Salary & Corporate Payments T24 Logging ...........') INTO rc;
						CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','Sending Data To T24 :: '||reqMsg) INTO rc;
						CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','CreditAccountId :: '||CreditAccount) INTO rc;
						CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','Message ID :: '|| Environment.MQRFH2.UID) INTO rc;
						CALL DBLogging(Environment.MQRFH2.UID,reqMsg,'T24 RouteFlow Request',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),inRef.DFDL.stewardBank_CSV.record.Purpose,outRefer);
						SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
						PROPAGATE TO TERMINAL 'out';
					END IF;
					SET OutputRoot.Properties = InputRoot.Properties;
					SET OutputRoot.MQRFH2 = Environment.MQRFH2;
					SET OutputRoot.DFDL = Environment.Variable.data;
					SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'SCP_T24_REQ';
					PROPAGATE TO TERMINAL 'out';
				END IF;


			END IF;
			RETURN FALSE;
		ELSE
			RETURN FALSE;
		END CASE;
	END;
END MODULE;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE SalaryCorporatePaymentsFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildException();
		RETURN FALSE;
	END;
	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET UUID = UUIDASCHAR;
		DECLARE reqMsg CHARACTER;
		SET Environment.MQRFH2.usr.UID = UUID;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		SET reqMsg = Environment.Variable.data.stewardBank_CSV;
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SalaryCorporatePayments';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SalaryCorporatePayments');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;  
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;  
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CALL UPDATE_SB_SCP_STATUS(Environment.Variables.UID,'PENDING','PENDING','PENDING','PENDING','PENDING','FAILURE','PENDING','FAILURE',CAST(Environment.Variables.CreationDate AS TIMESTAMP));
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		IF IsLogRequired LIKE 'Y' THEN
			CALL Error_DBLogging(Environment.MQRFH2.usr.UID,reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),Environment.MQRFH2.usr.retrievalReferenceNumber,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SalaryCorporatePayments.ErrorCode,outRefer);
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;