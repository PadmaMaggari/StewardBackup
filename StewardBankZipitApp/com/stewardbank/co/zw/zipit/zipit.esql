
/*
Application Name : ZIPIT.
Description :
1) From TCP router we get the ISO data, here we are generating request to T24.
2) Audit logging has been done here.
Date :27-3-2020 .
Modified Date : .
Author : G Raghavender.
=================================================================================================================== */
BROKER SCHEMA com.stewardbank.co.zw.zipit
PATH  com.stewardbank.co.zw.common.esql;      
DECLARE LOG_CONFIG_PATH,APPLICATION_NAME EXTERNAL CHARACTER ''; 

CREATE COMPUTE MODULE Zipit_GenerateReqToT24      
	DECLARE Config_File EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL GenerateReqToT24();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN 
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE GenerateReqToT24() BEGIN
		DECLARE messageType CHARACTER FIELDNAME(InputBody);
		DECLARE reqMsg CHARACTER'';
		
		SET Environment.msgID= InputRoot.MQMD.MsgId;
		SET reqMsg = CAST(ASBITSTREAM(InputRoot.DFDL ENCODING 546 CCSID 1208 SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
		SET OutputRoot.XMLNSC.DBLogging.MSGID = CAST(Environment.msgID AS CHARACTER);
		SET OutputRoot.XMLNSC.DBLogging.PROCESSINGCODE= InputRoot.DFDL.ISO8583_1987.ProcessingCode_003;
		SET OutputRoot.XMLNSC.DBLogging.MESSAGE= CAST(reqMsg AS CHARACTER);
		SET OutputRoot.XMLNSC.DBLogging.MESSAGE_TYPE=messageType;
		SET OutputRoot.XMLNSC.DBLogging.APPNAME = APPLICATION_NAME;   
		SET OutputRoot.XMLNSC.DBLogging.BROKERNAME=BrokerName;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'RAW_AUDIT';
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL; 
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'IFTLogger', 'DEBUG','..............Start ZIPIT logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'IFTLogger', 'DEBUG','Request to ZIPIT_INQ::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'IFTLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.DFDL ENCODING 546 CCSID 1208 SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER)) INTO rc;
		--field to field mapping
		CALL FieldToFieldMapping(inRef,outRef,''); 
		CALL writeToLogFile(MessageFlowLabel, 'IFTLogger', 'DEBUG','Request To T24::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'IFTLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER )) INTO rc;
	END;
	
END MODULE;

CREATE COMPUTE MODULE Zipit_RouteBasedOnProtocol 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
/*==================================================================================================================
Application Name : ZIPIT.
Description : 
1)Here we're handling the exceptions that occur in ESB with the Name of the Service ZIPIT.

Date :27-3-2020 .
Modified Date : .
Author : G Raghavender.
=================================================================================================================== */

CREATE COMPUTE MODULE ZipitFlowCaptureException 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL BuildErrorMsg(); 
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I]; 
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE BuildErrorMsg() BEGIN  
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'ZIPIT';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'ZIPIT');  
	END;
END MODULE;
/*==================================================================================================================
Application Name : ZIPIT.
Description : 
1)From T24 Simulator we get the response, here we are generating Response to Positlion. 
2) Audit logging has been done here.
Date :27-3-2020 .
Modified Date : .
Author : G Raghavender.
=================================================================================================================== */

CREATE COMPUTE MODULE Zipit_GenerateResToPostilion 
	DECLARE Config_File EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		 CALL Zipit_GenerateResToPostilion();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE Zipit_GenerateResToPostilion() BEGIN 
		SET Environment.Properties = InputRoot.Properties;
		DECLARE messageType CHARACTER FIELDNAME(InputBody);
		-- SET DBLogging Properties ==============
		DECLARE reqMsg CHARACTER'';
		
		
		SET reqMsg = CAST(ASBITSTREAM(InputRoot.DFDL ENCODING 546 CCSID 1208 SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
		SET OutputRoot.XMLNSC.DBLogging.MSGID = CAST(Environment.msgID AS CHARACTER);
		SET OutputRoot.XMLNSC.DBLogging.PROCESSINGCODE= InputRoot.DFDL.ISO8583_1987.ProcessingCode_003;
		SET OutputRoot.XMLNSC.DBLogging.MESSAGE= CAST(reqMsg AS CHARACTER);
		SET OutputRoot.XMLNSC.DBLogging.MESSAGE_TYPE=messageType;
		SET OutputRoot.XMLNSC.DBLogging.APPNAME=APPLICATION_NAME;  
		SET OutputRoot.XMLNSC.DBLogging.BROKERNAME=BrokerName;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'RAW_AUDIT';
		PROPAGATE TO TERMINAL 'out1';
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		--field to field mapping
		CALL FieldToFieldMapping(inRef,outRef,''); 
		CALL writeToLogFile(MessageFlowLabel, 'IFTLogger', 'DEBUG','Response To Postilion::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'IFTLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER )) INTO rc;
	END;
END MODULE;


