
/*
Application Name : ZIPIT.
Description :
1) From TCP router we get the ISO data, here we are generating request to T24.
2) Audit Logging and DB Logging has been done here.
Date :27-3-2020 .
Modified Date : .
Author : G Raghavender.
=================================================================================================================== */
BROKER SCHEMA com.stewardbank.co.zw.zipit
PATH com.stewardbank.co.zw.common.esql;      
DECLARE LOG_CONFIG_PATH,APPLICATION_NAME EXTERNAL CHARACTER '';     
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER;

CREATE COMPUTE MODULE Zipit_GenerateReqToT24  
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL GenerateReqToT24(); 
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateReqToT24() BEGIN
		/* ==================== SETTING MQRFH2 DETAILS IN ENVIRONMENT ==================== */
		SET Environment.usr= InputRoot.MQRFH2.usr;
		/* ==================== DATABASE LOGGING START ==================== */
		DECLARE reqMsg CHARACTER'';
		SET Environment.reqMsg = CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
		DECLARE outRefer REFERENCE TO OutputRoot;
		CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId),'Application Request',ApplicationLabel,BrokerName,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'RAW_AUDIT_Q';
		PROPAGATE TO TERMINAL 'out1';
		SET OutputRoot=NULL;
		/* ==================== DATABASE LOGGING ENDING ==================== */
		/* ==================== FRAMING REQUEST TO T24 ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG','..............Start ZIPIT logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG','Request to ZIPIT::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId)) INTO rc; 
		
		CALL FieldToFieldMapping(inRef,outRef,'');
		 
		SET Environment.dfdlData=OutputRoot.DFDL;
		SET OutputRoot=NULL;
		/* ==================== DATA BASE LOGGING ==================== */
		CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId),'T24 Request',ApplicationLabel,BrokerName,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'RAW_AUDIT_Q';
		PROPAGATE TO TERMINAL 'out1';
		/* ==================== DATA BASE LOGGING ENDING ==================== */
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.DFDL= Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG','Request To T24::') INTO rc;  
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId)) INTO rc; 
		PROPAGATE TO TERMINAL 'out';
	END;

END MODULE;

CREATE COMPUTE MODULE Zipit_RouteBasedOnProtocol
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
/*==================================================================================================================
Application Name : ZIPIT.
Description :
1)Here we're handling the exceptions that occur and storing in ERROR DB Logging. 
Date :27-3-2020 .
Modified Date : .
Author : G Raghavender.
=================================================================================================================== */

CREATE COMPUTE MODULE ZipitFlowCaptureException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG','..............Start Exception logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId)) INTO rc; 

		RETURN FALSE;
	END;

	
		CREATE PROCEDURE BuildErrorMsg() BEGIN 
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Id CHARACTER '';
		SET Id= CAST(Environment.usr.Id AS CHARACTER);
		/* ==================== DATABASE LOGGING ==================== */
		DECLARE exe_Desc CHARACTER'';
		SET exe_Desc = CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);

		CALL Error_DBLogging(CAST(Environment.usr.Id AS CHARACTER),Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ERROR_AUDIT_Q';
		PROPAGATE TO TERMINAL 'out1';

		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'ZIPIT';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;

		CALL BuildExceptionDetails(excpRef,outRef,'Ministatement');
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'SB_EXCQ';  
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE; 
/*==================================================================================================================
Application Name : ZIPIT.
Description :
1)From T24 Simulator we get the response, here we are generating Response to TCPIP Router. 
2) Audit Logging and DB Logging has been done here.
Date :27-3-2020 .
Modified Date : .
Author : G Raghavender.
=================================================================================================================== */

CREATE COMPUTE MODULE Zipit_GenerateResToPostilion
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL Zipit_GenerateResToPostilion();
		RETURN TRUE;
	END;
	CREATE PROCEDURE Zipit_GenerateResToPostilion() BEGIN
				/* ==================== DATABASE LOGGING ==================== */
		DECLARE outRefer REFERENCE TO OutputRoot;
		CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId),'T24 Response',ApplicationLabel,BrokerName,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'RAW_AUDIT_Q';
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot=NULL;
		/* ==================== DATABASE LOGGING END ==================== */
		/* ==================== FRAMING RESPONSE TO TCPIP ROUTER ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG','.........................') INTO rc; 
		--field to field mapping
		CALL FieldToFieldMapping(inRef,outRef,'');
		SET Environment.dfdlData=InputRoot.DFDL;
		SET OutputRoot=NULL;
		/* ==================== DATABASE LOGGING ==================== */
		CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId),'Application Response',ApplicationLabel,BrokerName,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'RAW_AUDIT_Q'; 
		PROPAGATE TO TERMINAL 'out';
		/* ==================== DATABASE LOGGING END ==================== */ 
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQRFH2.usr=Environment.usr; 
		SET OutputRoot.DFDL=Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG','Request To Postilion::') INTO rc; 
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId)) INTO rc; 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.usr.resQueueName;
		PROPAGATE TO TERMINAL 'out'; 
	END;
END MODULE;
