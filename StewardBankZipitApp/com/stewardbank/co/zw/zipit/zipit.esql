
/*
Application Name : ZIPIT.
Description :
1) From TCP router we get the ISO data, here we are generating request to T24.
2) Audit Logging and DB Logging has been done here.
Date :27-3-2020 .
Modified Date : .
Author : G Raghavender.
=================================================================================================================== */
BROKER SCHEMA com.stewardbank.co.zw.zipit
PATH com.stewardbank.co.zw.common.esql;      
DECLARE LOG_CONFIG_PATH,APPLICATION_NAME EXTERNAL CHARACTER '';    
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER;

CREATE COMPUTE MODULE Zipit_GenerateReqToT24  
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL GenerateReqToT24(); 
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateReqToT24() BEGIN
			SET Environment.usr= InputRoot.MQRFH2.usr;
		SET Environment.reqMsg = CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CALL DBLogging(Environment.usr.Id,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		SET Environment.dbLog = OutputRoot.XMLNSC;
		PROPAGATE TO TERMINAL 'out1';
		CALL DBLogging(Environment.dbLog.DBLogging.MSGID,Environment.dbLog.DBLogging.MESSAGE,'T24 Request',ApplicationLabel,BrokerName,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-- =================== END DB RAW AUDIT LOGGING ==============
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;	
		--set response queue and tcpip connection id in environment
		DECLARE resQ CHARACTER Environment.usr.resQueueName;
		DECLARE connId CHARACTER Environment.usr.Id;
		SET Environment.Variables.ResponseQ = resQ;
		SET Environment.Variables.TcpIp.ConnectionId = connId;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG','..............start ZIPIT logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG','Request to ZIPIT_INQ::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId)) INTO rc;
		--field to field mapping
		CALL FieldToFieldMapping(inRef,outRef,'');
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG','Request To T24::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId)) INTO rc;
	END;

END MODULE;

CREATE COMPUTE MODULE Zipit_RouteBasedOnProtocol
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
/*==================================================================================================================
Application Name : ZIPIT.
Description :
1)Here we're handling the exceptions that occur and storing in ERROR DB Logging. 
Date :27-3-2020 .
Modified Date : .
Author : G Raghavender.
=================================================================================================================== */

CREATE COMPUTE MODULE ZipitFlowCaptureException
	DECLARE ERROR_AUDIT_Q EXTERNAL CHARACTER; 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL BuildErrorMsg();
		RETURN TRUE;
	END;


	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Id CHARACTER CAST(Environment.usr.Id AS CHARACTER);
		-- ============Error  Logging in DB===================
		DECLARE exe_Desc CHARACTER CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);  
		CALL Error_DBLogging(CAST(Environment.usr.Id AS CHARACTER),Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-- ============END Error  Logging in DB===================
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'ZIPIT';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'ZIPIT');  
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
	END;
END MODULE;
/*==================================================================================================================
Application Name : ZIPIT.
Description :
1)From T24 Simulator we get the response, here we are generating Response to Positlion.
2) Audit Logging and DB Logging has been done here.
Date :27-3-2020 .
Modified Date : .
Author : G Raghavender.
=================================================================================================================== */

CREATE COMPUTE MODULE Zipit_GenerateResToPostilion
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL Zipit_GenerateResToPostilion();
		RETURN TRUE;
	END;
	CREATE PROCEDURE Zipit_GenerateResToPostilion() BEGIN
		
		SET Environment.Properties = InputRoot.Properties;
		SET Environment.MQMD = InputRoot.MQMD;
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		SET Environment.t24Res = CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
		CALL DBLogging(Environment.usr.Id,Environment.t24Res,'T24 Response',ApplicationLabel,BrokerName,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		SET Environment.t24Res = OutputRoot.XMLNSC;
		PROPAGATE TO TERMINAL 'out1';
		CALL DBLogging(Environment.t24Res.DBLogging.MSGID,Environment.t24Res.DBLogging.MESSAGE,'Application Response',ApplicationLabel,BrokerName,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1'; 
		-- =================== END DB RAW AUDIT LOGGING ==============
		SET OutputRoot.Properties = Environment.Properties;
		SET OutputRoot.MQRFH2.usr = Environment.usr;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		--field to field mapping
		CALL FieldToFieldMapping(inRef,outRef,'');
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.Variables.ResponseQ; 
		
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG','Response To Postilion::') INTO rc; 
		CALL writeToLogFile(MessageFlowLabel, 'ZIPITLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.DFDL CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId)) INTO rc;
	END;
END MODULE;
