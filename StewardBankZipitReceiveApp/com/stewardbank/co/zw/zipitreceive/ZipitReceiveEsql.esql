
/*
Application Name : ZIPIT RECEIVE.
Description :
1) From TCP router we get the ISO data, here we are generating request to T24.
2) Audit Logging and DB Logging has been done here.
Date : 24-04-2020.
Modified Date : 28-04-2020.
Author : G Raghavender.
=================================================================================================================== */
BROKER SCHEMA com.stewardbank.co.zw.zipitreceive
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH,APPLICATION_NAME,RAW_AUDIT_LOGGING,ERROR_AUDIT_LOGGING,EXCEPTION_QUEUE EXTERNAL CHARACTER;
CREATE COMPUTE MODULE ZipitReceiveFlow_GenerateReqToT24 
	CREATE FUNCTION Main() RETURNS BOOLEAN 
	BEGIN
		CALL GenerateReqToT24();
		RETURN FALSE;
	END;
		CREATE PROCEDURE GenerateReqToT24() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path';
		END IF;
		/* ==================== Setting MQRFH2 Details in Environment ==================== */
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.Variables.Id = InputRoot.MQRFH2.usr.Id;
		SET Environment.Variables.timeLocalTransaction = InputRoot.MQRFH2.usr.timeLocalTransaction;
		SET Environment.Variables.dateLocalTransaction = InputRoot.MQRFH2.usr.dateLocalTransaction;
		SET Environment.Variables.retrievalReferenceNumber = InputRoot.MQRFH2.usr.retrievalReferenceNumber;
		/* ==================== Database Logging ==================== */
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CALL DBLogging(Environment.MQRFH2.usr.Id,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.Variables.timeLocalTransaction,Environment.Variables.dateLocalTransaction,Environment.Variables.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out1';
		/* ==================== Database Logging End ==================== */
		/* ==================== Framming Request to T24 ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		CALL writeToLogFile(MessageFlowLabel, 'ZipitReceiveLogger', 'DEBUG','..............Start ZipitReceive logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitReceiveLogger', 'DEBUG','Request to ZipitReceive::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitReceiveLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
		CALL FieldToFieldMapping(inRef,outRef,'');
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET OutputRoot=NULL;
		/* ==================== Database Logging ==================== */
		CALL DBLogging(Environment.Variables.Id,Environment.Variables.reqMsg,'T24 Request',ApplicationLabel,BrokerName,Environment.Variables.timeLocalTransaction,Environment.Variables.dateLocalTransaction,Environment.Variables.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out1';
		/* ==================== Database Logging End ==================== */
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.DFDL = Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitReceiveLogger', 'DEBUG','Request To T24::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitReceiveLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;  
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;
/*==================================================================================================================
Application Name : ZIPIT RECEIVE.
Description :
1)From T24 Simulator we get the response, here we are generating Response to TCPIP Router.
2) Audit Logging and DB Logging has been done here.
Date :24-04-2020 .
Modified Date : 28-04-2020.
Author : G Raghavender.
=================================================================================================================== */
CREATE COMPUTE MODULE ZipitReceiveFlow_GenerateResToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateResToPostilion();
		RETURN FALSE;
	END;
CREATE PROCEDURE GenerateResToPostilion() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path ';
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitReceiveLogger', 'DEBUG','.........................') INTO rc;
		SET Environment.Properties = InputRoot.Properties;
		SET Environment.MQMD = InputRoot.MQMD;
		/* ==================== Database Logging ==================== */
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.resMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		CALL DBLogging(Environment.Variables.Id,Environment.Variables.resMsg,'T24 Response',ApplicationLabel,BrokerName,Environment.Variables.timeLocalTransaction,Environment.Variables.dateLocalTransaction,Environment.Variables.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot=NULL;
		/* ==================== Database Logging End ==================== */
		/* ==================== Framming Response to TCPIP Router ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		--field to field mapping
		CALL FieldToFieldMapping(inRef,outRef,'');
		SET Environment.dfdlData=InputRoot.DFDL;
		SET OutputRoot=NULL;
		/* ==================== Database Logging ==================== */
		CALL DBLogging(Environment.Variables.Id,Environment.Variables.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.Variables.timeLocalTransaction,Environment.Variables.dateLocalTransaction,Environment.Variables.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
		/* ==================== Database Logging End ==================== */
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL=Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitReceiveLogger', 'DEBUG','Request To Postilion::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitReceiveLogger', 'DEBUG',Environment.resMsg) INTO rc; 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.MQRFH2.usr.resQueueName;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;
/*==================================================================================================================
Application Name : ZIPIT RECEIVE.
Description :
1)Here we're handling the exceptions that occur and storing in ERROR DB Logging.
Date :24-04-2020 .
Modified Date : .
Author : G Raghavender.
=================================================================================================================== */
CREATE COMPUTE MODULE ZipitReceiveFlow_CaptureException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		RETURN FALSE;
	END;
	CREATE PROCEDURE BuildErrorMsg() BEGIN
	DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Id CHARACTER '';
		SET Id= CAST(Environment.usr.Id AS CHARACTER);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'ZipitReceive';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'ZipitReceive');
		DECLARE brokerErrorMsg CHARACTER;
		DECLARE userErrorMsg CHARACTER;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE UserdomainDataRef REFERENCE TO InputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		SET brokerErrorMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		SET userErrorMsg = getPayLoad(FIELDNAME(InputBody),UserdomainDataRef,encodeRef,ccidRef);		
		SET Environment.Variables.ZipitReceiveErrorCodes = OutputRoot.XMLNSC.ZipitReceive; 
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','..................... ZipitReceive Exception .....................') INTO rc; 
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application User Define Built Exception:'||userErrorMsg) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','TCPIP ID:'||InputRoot.MQRFH2.usr.Id) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_QUEUE;
		PROPAGATE TO TERMINAL 'out';
		/* ==================== DATA BASE LOGGING ==================== */
		CALL Error_DBLogging(Environment.Variables.Id,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,userErrorMsg,Environment.Variables.timeLocalTransaction,Environment.Variables.dateLocalTransaction,Environment.Variables.retrievalReferenceNumber,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.ZipitReceiveErrorCodes.ErrorCode,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_LOGGING; 
		PROPAGATE TO TERMINAL 'out';  
	END;
END MODULE;