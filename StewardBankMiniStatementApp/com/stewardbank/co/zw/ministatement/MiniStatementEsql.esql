

/*
Author : Bobby
Version:0.0.1
Date of Creation:30-03-2020
Date of Modification:15-04-2020
Description: Mini Statement
*/

BROKER SCHEMA com.stewardbank.co.zw.ministatement

PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH,APPLICATION_NAME,RAW_AUDIT_LOGGING,ERROR_AUDIT_LOGGING,EXCEPTION_QUEUE,REQUIRED_LOG4J_LOGGING,REQUIRED_DB_LOGGING EXTERNAL CHARACTER;
CREATE COMPUTE MODULE MiniStatementFlow_GenerateReqToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToT24();
		RETURN FALSE;
	END;


	CREATE PROCEDURE GenerateReqToT24() BEGIN
		/* ==================== SETTING MQRFH2 DETAILS IN ENVIRANMENT ==================== */
		SET Environment.usr= InputRoot.MQRFH2.usr;
		/* ==================== DATA BASE LOGGING START ==================== */
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		SET Environment.Variables.reqMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);


		IF REQUIRED_DB_LOGGING LIKE 'Y' THEN
			CALL DBLogging(Environment.usr.Id,Environment.Variables.reqMsg ,'Application Request',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out1';
		SET OutputRoot=NULL;
		/* ==================== DATA BASE LOGGING ENDING ==================== */
		/* ==================== FRAMMING REQUEST TO T24 ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path';
		END IF;

		IF REQUIRED_LOG4J_LOGGING LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'minidebug', 'DEBUG','..............Start MiniStatement logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'minidebug', 'DEBUG','Request to MiniStatement::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'minidebug', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'minidebug', 'DEBUG','TCPIP ID:'||InputRoot.MQRFH2.usr.Id) INTO rc;
		END IF;
		CALL FieldToFieldMapping(inRef,outRef,'');
		SET Environment.dfdlData=OutputRoot.DFDL;
		SET OutputRoot=NULL;
		/* ==================== DATA BASE LOGGING ==================== */
		IF REQUIRED_DB_LOGGING LIKE 'Y' THEN
			CALL DBLogging(Environment.usr.Id,Environment.Variables.reqMsg,'T24 Request',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);
		END IF;

		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out1';
		/* ==================== DATA BASE LOGGING ENDING ==================== */
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.DFDL= Environment.dfdlData;
		IF REQUIRED_LOG4J_LOGGING LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'minidebug', 'DEBUG','Request To T24::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'minidebug', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'minidebug', 'DEBUG','TCPIP ID:'||InputRoot.MQRFH2.usr.Id) INTO rc;
			
		END IF;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;


CREATE COMPUTE MODULE MiniStatementFlow_GenerateResToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateResToPostilion();
		RETURN FALSE;
	END;
	CREATE PROCEDURE GenerateResToPostilion() BEGIN
		/* ==================== DATA BASE LOGGING ==================== */
		-- DECLARE resData CHARACTER;
		-- SET Environment.resData= CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER);
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		SET Environment.Variables.resMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);


		DECLARE outRefer REFERENCE TO OutputRoot;
		IF REQUIRED_DB_LOGGING LIKE 'Y' THEN
			CALL DBLogging(Environment.usr.Id,Environment.Variables.resMsg,'T24 Response',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);
		END IF;

		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot=NULL;
		/* ==================== DATA BASE LOGGING ENDING ==================== */
		/* ==================== FRAMMING RESPONSE TO TCPIP ROUTER ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path ';
		END IF;
		--field to field mapping
		CALL FieldToFieldMapping(inRef,outRef,'');
		SET Environment.dfdlData=InputRoot.DFDL;
		SET OutputRoot=NULL;
		/* ==================== DATA BASE LOGGING ==================== */
		IF REQUIRED_DB_LOGGING LIKE 'Y' THEN
			CALL DBLogging(Environment.usr.Id,Environment.Variables.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);
		END IF;

		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
		/* ==================== DATA BASE LOGGING ENDING ==================== */
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQRFH2.usr=Environment.usr;
		--SET OutputRoot.MQRFH2.resData=Environment.resData;
		SET OutputRoot.DFDL=Environment.dfdlData;
		IF REQUIRED_LOG4J_LOGGING LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'minidebug', 'DEBUG','.........................') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'minidebug', 'DEBUG','Responce To Postilion::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'minidebug', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'minidebug', 'DEBUG','TCPIP ID:'||Environment.usr.Id) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.usr.resQueueName;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;



CREATE COMPUTE MODULE MiniStatementFlow_CaptureException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();

		RETURN FALSE;
	END;


	CREATE PROCEDURE BuildErrorMsg() BEGIN


		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Id CHARACTER '';
		SET Id= CAST(Environment.usr.Id AS CHARACTER);


		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'Ministatement';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;

		CALL BuildExceptionDetails(excpRef,outRef,'Ministatement');
		DECLARE brokerErrorMsg CHARACTER;
		DECLARE userErrorMsg CHARACTER;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE UserdomainDataRef REFERENCE TO InputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		SET brokerErrorMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		SET userErrorMsg = getPayLoad(FIELDNAME(InputBody),UserdomainDataRef,encodeRef,ccidRef);


		SET Environment.miniStatementErrorCode=OutputRoot.XMLNSC;
		IF REQUIRED_LOG4J_LOGGING LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','..................... MINI STATEMENT EXCEPTION .....................') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application User Define Built Exception:'||userErrorMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','TCPIP ID:'||Id) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_QUEUE;
		PROPAGATE TO TERMINAL 'out';
		/* ==================== DATA BASE LOGGING ==================== */
		--DECLARE exe_Desc CHARACTER'';
		IF REQUIRED_DB_LOGGING LIKE 'Y' THEN
			CALL Error_DBLogging(Id,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,userErrorMsg,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,CAST(COALESCE(excpRef.excpNumber,excpRef.ExcpNumber,'') AS CHARACTER),Environment.miniStatementErrorCode.Ministatement.ErrorCode,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;