BROKER SCHEMA com.stewardbank.co.zw.schoolfeepayment

PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH,LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER ''; 
DECLARE IsLogRequired EXTERNAL CHARACTER '';
DECLARE resQueueName EXTERNAL CHARACTER '';
DECLARE URL EXTERNAL CHARACTER ''; 
CREATE COMPUTE MODULE SchoolFeePaymentFlow_GenerateReqToT24 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN TRUE; 
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN 
				SET Environment.MQRFH2 = InputRoot.MQRFH2; 
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		/* ==================== Setting MQRFH2 Details in Environment ==================== */
		SET Environment.usr= InputRoot.MQRFH2.usr;
		/* ==================== Database Logging ==================== */
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		--SET Environment.Variables.usr.Id = InputRoot.MQRFH2.RequestIdentifier;
		SET Environment.Variables.reqMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		SET Environment.MQRFH2.usr.Id = InputRoot.MQRFH2.RequestIdentifier; 
		DECLARE debitAccountId CHARACTER;
		DECLARE debitCurrency CHARACTER;
		DECLARE creditAccountId CHARACTER;
		DECLARE orderingCustomerName CHARACTER;
		DECLARE paymentCurrency CHARACTER;
		DECLARE transactionAmount CHARACTER;
		DECLARE executionDate CHARACTER;
		DECLARE narrative CHARACTER;
		DECLARE invoiceReference CHARACTER; 
		--------------DBLogging-------------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.Id,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),
			Environment.MQRFH2.usr.retrievalReferenceNumber,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-----------------------------
		/* ==================== Database Logging End ==================== */
		/* ==================== Framming Request to T24 ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		DECLARE outRef REFERENCE TO OutputRoot.JSON;
		CREATE LASTCHILD OF OutputRoot.JSON AS outRef NAME 'Data';
		--set response queue and tcpip connection id in environment
		DECLARE resQ CHARACTER Environment.MQRFH2.usr.resQueueName;
		DECLARE connId CHARACTER Environment.MQRFH2.usr.Id;
		SET Environment.Variables.ResponseQ = resQ;
		SET Environment.Variables.HttpIp.ConnectionId = connId;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG','..............Initializing School Fee Payment logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG','Request from Postilion::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG',getPayLoad(domainName,inRef,encodeRef,ccidRef)) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG','HTTP ID::'|| Environment.MQRFH2.usr.Id) INTO rc;
		END IF;
		----------------------------------------------------------------
		SET outRef = inRef;
		SET Environment.Variables.jsonData = outRef;
		SET OutputRoot = NULL;
		----- Database Logging ------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.Id,getPayLoad(domainName,outRef,encodeRef,ccidRef),'T24 Request',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),
			CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),'',outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		----------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON.Data = Environment.Variables.jsonData;
		MOVE outRef TO OutputRoot.JSON;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG','Request To T24::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG',getPayLoad(domainName,outRef,encodeRef,ccidRef)) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG','HTTP ID::'|| Environment.MQRFH2.usr.Id) INTO rc;
		END IF;
		--{debitAccountId}/{debitCurrency}/{creditAccountId}/{orderingCustomerName}/{paymentCurrency}/{transactionAmount}/{executionDate}/{narrative}/{invoiceReference}"
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = URL||'/'||debitAccountId||'/'||debitCurrency||'/'||creditAccountId||'/'||orderingCustomerName||'/'||paymentCurrency||'/'||transactionAmount||'/'||executionDate||'/'||narrative||'/'||invoiceReference; 
	END;
END MODULE; 



CREATE COMPUTE MODULE SchoolFeePaymentFlow_GenerateResToPostilion 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		SET Environment.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET Environment.MQMD = InputRoot.MQMD;
		DECLARE resData CHARACTER;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE OutRef REFERENCE TO OutputRoot;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
			DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code"; 

		SET Environment.Variables.resData = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		SET OutputRoot = NULL;
		---------DBLogging------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.Id,Environment.Variables.resData,'T24 Response',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),
			CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),'',OutRef);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		------------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG','..........Logging generated Response...............') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG','T24 Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG',getPayLoad(domainName,inRef,encodeRef,ccidRef)) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG','HTTP ID::'|| Environment.MQRFH2.usr.Id) INTO rc;
		END IF;
		------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		DECLARE OutRefer REFERENCE to OutputRoot.JSON.Data;
		DECLARE Inrefer REFERENCE to InputRoot.JSON.Data.body;
		IF domainName LIKE 'JSON' OR  responceCode LIKE  '200' THEN   
			SET OutRefer.statusCode = '200';
			SET OutRefer.message = 'SUCCESS';
			SET OutRefer.responseBody.source = 'ESB';
			SET OutRefer.responseBody.applicationName = 'SchoolFeePayment';
		ELSE
			SET OutRefer.statusCode = '000';
			SET OutRefer.message = 'FAILURE';
			SET OutRefer.responseBody.source = 'ESB';
			SET OutRefer.responseBody.applicationName = 'SchoolFeePayment';
		END IF;
		DECLARE envref REFERENCE TO Environment.JSON.Data;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'JSON';
		CREATE LASTCHILD OF envref AS envref NAME 'Data';
		SET envref = OutRefer;
		SET OutputRoot = NULL;
		----- Database Logging ------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.Id,getPayLoad(FIELDNAME(InputBody),envref,encodeRef,ccidRef),'Application Response',ApplicationLabel,BrokerName,
			CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),'',OutRef);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		----------------------
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.Properties = Environment.Properties; 
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQRFH2.usr=Environment.usr;
		SET OutputRoot.JSON.Data=envref;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG','SchoolFeePayment Response To Postilion::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG',Environment.jsonData) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SchoolFeePaymentLogger', 'DEBUG','HTTP ID::'|| Environment.MQRFH2.usr.Id) INTO rc; 
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.MQRFH2.usr.resQueueName;
	END;
END MODULE;


CREATE COMPUTE MODULE SchoolFeePaymentFlow_CaptureException 
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL BuildErrorMsg();
		RETURN TRUE;
	END;
	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		--DECLARE Id CHARACTER CAST(Environment.MQRFH2.usr.Id AS CHARACTER);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;     
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SchoolFeePayment';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SchoolFeePayment');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);  
		/* =================== CALLING LOG4J LOGGING   ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Start Logging Application Related Exception ...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		/* =================== CALLING LOG4J LOGGING ENDING  ==============*/
		/* =================== CALLING DB LOGGING  ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.timeLocalTransaction,Environment.MQRFH2.usr.dateLocalTransaction,Environment.MQRFH2.usr.retrievalReferenceNumber,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SchoolFeePayment.ErrorCode,outRefer);
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;   
		PROPAGATE TO TERMINAL 'out';
		/* =================== CALLING DB LOGGING ENDING  ==============*/
		----------------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		DECLARE outJsonRef REFERENCE TO OutputRoot.JSON.Data;
		SET outJsonRef.statusCode = '000';
		SET outJsonRef.message = 'FAILURE';
		SET outJsonRef.responseBody.source = 'ESB';
		SET outJsonRef.responseBody.applicationName = FIELDNAME(Environment.Variables.UserDefinedErrorCodes.SchoolFeePayment);
		SET outJsonRef.responseBody.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.SchoolFeePayment.ErrorCode;
		SET outJsonRef.responseBody.applicationErrorType = Environment.Variables.UserDefinedErrorCodes.SchoolFeePayment.ErrorType;
		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = CAST(Environment.MQRFH2.RequestIdentifier AS BLOB);
		/* =================== CALLING LOG4J LOGGING   ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Response To Frond End System in case of Failure:'||getPayLoad(FIELDNAME(OutputRoot.JSON),outJsonRef,encodeRef,ccidRef)) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','End of Logging Application Related Exception') INTO rc;
		END IF;
		/* =================== CALLING LOG4J LOGGING ENDING  ==============*/
		PROPAGATE TO TERMINAL 'out1';
		----------------------------------
		END;
END MODULE;
