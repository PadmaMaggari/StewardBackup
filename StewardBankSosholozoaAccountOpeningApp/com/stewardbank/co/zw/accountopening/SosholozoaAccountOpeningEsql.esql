







BROKER SCHEMA com.stewardbank.co.zw.accountopening
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE ALL_SB_HTTP_RES EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE TABLENAME EXTERNAL CHARACTER '';
DECLARE rc BOOLEAN FALSE;
CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_VerifyRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL VerifyRequest();
		RETURN TRUE;
	END;
	CREATE PROCEDURE VerifyRequest() BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE accountOpeningCheck CHAR COALESCE(inRef.Data.accountOpeningCheck,inRef.Data.*.header.accountOpeningCheck,'');
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Environment.Variables.header = InputRoot.JSON.Data.*.header;
		SET Environment.Variables.body = InputRoot.JSON.Data.*.body;
		SET Environment.MQRFH2.ChannelRequest = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET Environment.Variables.reqMsg = Environment.MQRFH2.ChannelRequest;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		------------DBLogging-------------------
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Application Request------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		---------------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = InputRoot.JSON;
		IF accountOpeningCheck = 'KYC_CHECK' THEN
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'KYC';
		ELSEIF accountOpeningCheck = 'T24_CHECK' THEN
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'T24';
		ELSE
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'Unknown';
		END IF;
	END;
END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateUnknownResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateUnknownResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateUnknownResponse() BEGIN
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headerRef = Environment.Variables.header;
		SET headerRef.Status = 'FAILED';
		SET headerRef.ResponseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = 'AccountOpening_001';
		SET errorRef.message = 'Unknown Request';
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET Environment.jsonData = OutputRoot.JSON;
		SET OutputRoot.JSON = NULL;
		------------DBLogging-------------------
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Application Response------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.MQEFH2.usr.dbLogTime,Environment.MQEFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		---------------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		SET OutputRoot.JSON = Environment.jsonData;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
	END;
END MODULE;


CREATE FILTER MODULE SosholozoaAccountOpeningFlow_VerifyDWHResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToDWH
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToDWH();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToDWH() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE national_ID CHARACTER InputRoot.JSON.Data.*.body.idNumber;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE query CHAR;
		SET query = 'SELECT * FROM  '||TABLENAME||' WHERE NATIONAL_ID = '''||national_ID||'''';
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Calling DWH Service ------') INTO rc;
		END IF;
		SET Environment.KYC_Data[] = PASSTHRU(query);
		IF EXISTS(Environment.KYC_Data[]) THEN
			DECLARE firstName,lastName CHAR;
			SET firstName = SUBSTRING(Environment.KYC_Data.FULL_NAME BEFORE ' ');
			SET lastName = SUBSTRING(Environment.KYC_Data.FULL_NAME AFTER ' ');
			CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
			CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
			CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('body');
			DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
			DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body;
			SET headerRef = Environment.Variables.header;
			SET headerRef.Status = 'SUCCESS';
			SET headerRef.ResponseCode = '200';
			SET bodyRef.msisdn = '263772984803';
			SET bodyRef.firstname = firstName;
			SET bodyRef.lastname = lastName;
			SET bodyRef.nationalid = national_ID;
			SET bodyRef.dob = Environment.KYC_Data.DATE_OF_BIRTH;
			SET bodyRef.gender = Environment.KYC_Data.GENDER;
			SET bodyRef.address = Environment.KYC_Data.ADDRESS;
		ELSE
			CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
			CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
			CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
			DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
			DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
			SET headerRef = Environment.Variables.header;
			SET headerRef.Status = 'FAILED';
			SET headerRef.ResponseCode = '000';
			SET errorRef.source = 'ESB';
			SET errorRef.applicationName = ApplicationLabel;
			SET errorRef.applicationErrorCode = 'AccountOpening_002';
			SET errorRef.message = 'No data from DWH';
		END IF;
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET Environment.jsonData = OutputRoot.JSON;
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- DWH Response ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'DWH Response',ApplicationLabel,BrokerName,Environment.MQEFH2.usr.dbLogTime,Environment.MQEFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.jsonData;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
	END;
END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToT24();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToT24() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE mobileNumber CHARACTER InputRoot.JSON.Data.mobileNumber;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('body');
		DECLARE outRef REFERENCE TO OutputRoot.JSON;
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.header;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.body;
		CREATE LASTCHILD OF headRef NAME ('override');
		CREATE LASTCHILD OF headRef.override IDENTITY(JSON.Array)overrideDetails;
		CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)customerIds;
		CREATE LASTCHILD OF bodyRef.customerIds.Item[1] NAME 'customerId' VALUE '100121';
		CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)properties;
		CREATE LASTCHILD OF bodyRef NAME 'productId' VALUE 'STW.PERSONAL.CURRENT';
		CREATE LASTCHILD OF bodyRef NAME 'currencyId' VALUE 'ZWL';
		CREATE LASTCHILD OF bodyRef NAME 'activityId' VALUE 'ACCOUNTS-NEW-ARR.CHANNEL';
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.jsonData = OutputRoot.JSON;
		SET Environment.Variables.reqMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- T24 Request ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'T24 Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.ContentType = 'application/json';
		--SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.HTTPInputHeader = Environment.MQRFH2.usr.HTTPInputHeader;
		SET OutputRoot.JSON = Environment.jsonData;
	END;
END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToFCB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToFCB();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateReqToFCB() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE mobileNumber CHARACTER InputRoot.JSON.Data.mobileNumber;
		DECLARE id,email,password CHAR;
		SET id = '201126287';
		SET email = 'padma.maggari@eidiko.com';
		SET password = 'tawa@steward';
		--CALL newIndividualRequest();
		CALL getIndividualRequest(id,email,password);
	END;
	CREATE PROCEDURE createParts(INOUT partsRef REFERENCE,IN I INT,IN KEY CHAR,IN VAL CHAR) BEGIN
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="'||KEY||'"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE(VAL CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
	END;
	CREATE PROCEDURE newIndividualRequest() BEGIN
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE I INT 1;
		CREATE LASTCHILD OF OutputRoot DOMAIN('MIME');
		CREATE LASTCHILD OF OutputRoot.MIME NAME 'Content-Type' VALUE 'multipart/form-data; boundary= --------------------------775154329068382263430548';
		CREATE LASTCHILD OF OutputRoot.MIME NAME 'Parts';
		DECLARE partsRef REFERENCE TO OutputRoot.MIME.Parts;
		-- WHILE I < 30 DO
		-- CALL createParts(partsRef,I,KEY,VAL);
		-- SET I = I + 1;
		-- END WHILE;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="dob"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="names"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="surname"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="national_id"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="gender"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="search_purpose"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="email"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="password"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="drivers_licence"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="passport"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="married"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="nationality"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="streetno"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="streetname"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="building"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="suburb"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="pbag"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="city"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="telephone"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="mobile"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="ind_email"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="property_density"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="property_status"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="occupation_class"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="employer"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="employer_industry"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="salary_band"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="loan_purpose"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="loan_amount"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE('' CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET Environment.mimeData = OutputRoot.MIME;
		DECLARE domainName CHAR FIELDNAME(OutputRoot.MIME);
		DECLARE domainDataRef REFERENCE TO OutputRoot.MIME;
		SET Environment.Variables.reqMsg = getPayload(domainName,domainDataRef,InputProperties.Encoding,InputProperties.CodedCharSetId);
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- FCB Request ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'FCB Request',ApplicationLabel,BrokerName,Environment.MQEFH2.usr.dbLogTime,Environment.MQEFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.ContentType = 'multipart/form-data; boundary= --------------------------775154329068382263430548';
		SET OutputRoot.HTTPInputHeader."Content-Type" = 'multipart/form-data; boundary= --------------------------775154329068382263430548';
		SET OutputRoot.HTTPInputHeader.Accept = '*/*';
		SET OutputRoot.HTTPInputHeader."X-Original-HTTP-Command" = 'POST https://www.fcbureau.co.zw/api/newIndividual HTTP/1.1';
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.jsonData;
		END;
		CREATE PROCEDURE getIndividualRequest(IN id CHAR,IN email CHAR,IN password CHAR) BEGIN
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE I INT 1;
		SET OutputRoot.Properties.ContentType = 'multipart/form-data; boundary= --------------------------775154329068382263430548';
		SET OutputRoot.HTTPInputHeader."Content-Type" = 'multipart/form-data; boundary= --------------------------775154329068382263430548';
		SET OutputRoot.HTTPInputHeader.Accept = '*/*';
		SET OutputRoot.HTTPInputHeader."X-Original-HTTP-Command" = 'POST https://www.fcbureau.co.zw/api/getIndividual HTTP/1.1';
		CREATE LASTCHILD OF OutputRoot DOMAIN('MIME');
		CREATE LASTCHILD OF OutputRoot.MIME NAME 'Content-Type' VALUE 'multipart/form-data; boundary=--------------------------775154329068382263430548';
		CREATE LASTCHILD OF OutputRoot.MIME NAME 'Parts';
		DECLARE partsRef REFERENCE TO OutputRoot.MIME.Parts;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="id"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE(id CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="email"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE(email CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET I = I + 1;
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Content-Disposition' VALUE 'form-data; name="password"';
		CREATE LASTCHILD OF partsRef.Part[I] NAME 'Data';
		CREATE LASTCHILD OF partsRef.Part[I].Data DOMAIN('BLOB') PARSE(password CCSID InputProperties.CodedCharSetId ENCODING InputProperties.Encoding);
		SET Environment.mimeData = OutputRoot.MIME;
		DECLARE domainName CHAR FIELDNAME(OutputRoot.MIME);
		DECLARE domainDataRef REFERENCE TO OutputRoot.MIME;
		SET Environment.Variables.reqMsg = getPayload(domainName,domainDataRef,InputProperties.Encoding,InputProperties.CodedCharSetId);
		IF IsLogRequired = 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- FCB Request ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'FCB Request',ApplicationLabel,BrokerName,Environment.MQEFH2.usr.dbLogTime,Environment.MQEFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.jsonData;
		END;
		END MODULE;
		CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateKYCResponse
		CREATE FUNCTION Main() RETURNS BOOLEAN
		BEGIN
		CALL GenerateKYCResponse();
		RETURN TRUE;
		END;
		CREATE PROCEDURE GenerateKYCResponse() BEGIN
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE rc BOOLEAN FALSE;
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
		SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		IF IsLogRequired = 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Response from DWH ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'DWH Response',ApplicationLabel,BrokerName,Environment.MQEFH2.usr.localTime,Environment.MQEFH2.usr.localDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		END IF;
		SET OutputRoot.JSON = InputRoot.JSON;
		SET Environment.outputData = OutputRoot.JSON;
		SET OutputRoot.JSON = NULL;
		SET domainName = FIELDNAME(OutputRoot.JSON);
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload(domainName,domainDataRef,encodeRef,ccidRef);
		IF IsLogRequired = 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Response to FrontEnd ------') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' Response QueueName :  '||ALL_SB_HTTP_RES) INTO rc;
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Response to FrontEnd',ApplicationLabel,BrokerName,Environment.MQEFH2.usr.localTime,Environment.MQEFH2.usr.localDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.outputData;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
		END;
		END MODULE;
		CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateFCMResponse
		CREATE FUNCTION Main() RETURNS BOOLEAN
		BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
		END;
		CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
		SET OutputRoot.*[I] = InputRoot.*[I];
		SET I = I + 1;
		END WHILE;
		END;
		CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		END;
		END MODULE;
		CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToT241
		CREATE FUNCTION Main() RETURNS BOOLEAN
		BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
		END;
		CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
		SET OutputRoot.*[I] = InputRoot.*[I];
		SET I = I + 1;
		END WHILE;
		END;
		CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		END;
		END MODULE;
		CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_BuildException
		CREATE FUNCTION Main() RETURNS BOOLEAN
		BEGIN
		CALL BuildErrorMsg();
		RETURN TRUE;
		END;
		CREATE PROCEDURE BuildErrorMsg() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
		SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'T24ServiceCall') THEN
		SET errMsg = 'T24 Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'FCBServiceCall') THEN
		SET errMsg = 'FCB Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'T24ClientReceiveData,Exception whilst parsing') THEN
		SET errMsg = 'No Response from T24 Server';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientReceiveData,Exception whilst parsing') THEN
		SET errMsg = 'No Response from Postilion Server';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'AccountOpening';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'AccountOpening');
		SET Environment.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		MOVE outRef TO OutputRoot.JSON.Data;
		SET outRef.statusCode = '000';
		SET outRef.status = 'FAILED';
		SET outRef.message = errMsg;
		SET outRef.responseBody.source = 'ESB';
		SET outRef.responseBody.applicationName = ApplicationLabel;
		SET outRef.responseBody.applicationErrorCode = Environment.UserDefinedErrorCodes.AccountOpening.ErrorCode;
		SET OutputRoot.XMLNSC = NULL;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.MQRFH2.inputRequest,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.UserDefinedErrorCodes.AccountOpening.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
		----------------------------------
		END;
		END MODULE;