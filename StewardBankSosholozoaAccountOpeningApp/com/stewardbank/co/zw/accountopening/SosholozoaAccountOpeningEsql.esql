



BROKER SCHEMA com.stewardbank.co.zw.accountopening
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE ALL_SB_HTTP_RES EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE TABLENAME EXTERNAL CHARACTER '';
DECLARE rc BOOLEAN FALSE;
CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_VerifyRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL VerifyRequest();
		RETURN TRUE;
	END;
	CREATE PROCEDURE VerifyRequest() BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE accountOpeningCheck CHAR COALESCE(inRef.Data.accountOpeningCheck,inRef.Data.*.header.accountOpeningCheck,'');
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Environment.Variables.header = InputRoot.JSON.Data.*.header;
		SET Environment.Variables.body = InputRoot.JSON.Data.*.body;
		SET Environment.MQRFH2.ChannelRequest = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET Environment.Variables.reqMsg = Environment.MQRFH2.ChannelRequest;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		------------DBLogging-------------------
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Application Request------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		---------------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = InputRoot.JSON;
		IF accountOpeningCheck = 'KYC_CHECK' THEN
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'KYC';
		ELSEIF accountOpeningCheck = 'T24_CHECK' THEN
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'T24';
		ELSE
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'Unknown';
		END IF;
	END;
END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateUnknownResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateUnknownResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateUnknownResponse() BEGIN
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headerRef = Environment.Variables.header;
		SET headerRef.Status = 'FAILED';
		SET headerRef.ResponseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = 'AccountOpening_001';
		SET errorRef.message = 'Unknown Request';
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET Environment.jsonData = OutputRoot.JSON;
		SET OutputRoot.JSON = NULL;
		------------DBLogging-------------------
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Application Response------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.MQEFH2.usr.dbLogTime,Environment.MQEFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		---------------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		SET OutputRoot.JSON = Environment.jsonData;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
	END;
END MODULE;


CREATE FILTER MODULE SosholozoaAccountOpeningFlow_VerifyDWHResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToDWH
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToDWH();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToDWH() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE national_ID CHARACTER InputRoot.JSON.Data.*.body.idNumber;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE query CHAR;
		SET query = 'SELECT * FROM  '||TABLENAME||' WHERE NATIONAL_ID = '''||national_ID||'''';
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Calling DWH Service ------') INTO rc;
		END IF;
		SET Environment.KYC_Data[] = PASSTHRU(query);
		IF EXISTS(Environment.KYC_Data[]) THEN
			DECLARE firstName,lastName CHAR;
			SET firstName = SUBSTRING(Environment.KYC_Data.FULL_NAME BEFORE ' ');
			SET lastName = SUBSTRING(Environment.KYC_Data.FULL_NAME AFTER ' ');
			CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
			CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
			CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('body');
			DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
			DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body;
			SET headerRef = Environment.Variables.header;
			SET headerRef.Status = 'SUCCESS';
			SET headerRef.ResponseCode = '200';
			SET bodyRef.msisdn = '263772984803';
			SET bodyRef.firstname = firstName;
			SET bodyRef.lastname = lastName;
			SET bodyRef.nationalid = national_ID;
			SET bodyRef.dob = Environment.KYC_Data.DATE_OF_BIRTH;
			SET bodyRef.gender = Environment.KYC_Data.GENDER;
			SET bodyRef.address = Environment.KYC_Data.ADDRESS;
		ELSE
			CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
			CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
			CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
			DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
			DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
			SET headerRef = Environment.Variables.header;
			SET headerRef.Status = 'FAILED';
			SET headerRef.ResponseCode = '000';
			SET errorRef.source = 'ESB';
			SET errorRef.applicationName = ApplicationLabel;
			SET errorRef.applicationErrorCode = 'AccountOpening_002';
			SET errorRef.message = 'No data from DWH';
		END IF;
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF Environment DOMAIN('JSON');
		SET Environment.JSON = OutputRoot.JSON;
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- DWH Response ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'DWH Response',ApplicationLabel,BrokerName,Environment.MQEFH2.usr.dbLogTime,Environment.MQEFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.JSON;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
	END;
END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToT24();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToT24() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE customerId CHARACTER inRef.Data.*.body.customerId;
		DECLARE productId CHARACTER inRef.Data.*.body.productId;
		DECLARE currencyId CHARACTER inRef.Data.*.body.currencyId;
		DECLARE activityId CHARACTER inRef.Data.*.body.activityId;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('body');
		DECLARE outRef REFERENCE TO OutputRoot.JSON;
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.header;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.body;
		CREATE LASTCHILD OF headRef NAME ('override');
		CREATE LASTCHILD OF headRef.override IDENTITY(JSON.Array)overrideDetails;
		CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)customerIds;
		CREATE LASTCHILD OF bodyRef.customerIds.Item[1] NAME 'customerId' VALUE customerId;
		CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)properties;
		CREATE LASTCHILD OF bodyRef NAME 'productId' VALUE productId;
		CREATE LASTCHILD OF bodyRef NAME 'currencyId' VALUE currencyId;
		CREATE LASTCHILD OF bodyRef NAME 'activityId' VALUE activityId;
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		CREATE LASTCHILD OF Environment DOMAIN('JSON');
		SET Environment.JSON = OutputRoot.JSON;
		SET Environment.Variables.reqMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.JSON = NULL;
		--PROPAGATE TO TERMINAL 'out1';
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- T24 Request ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'T24 Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
		SET OutputRoot.JSON = Environment.JSON;
	END;
END MODULE;

CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToFCB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToFCB();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateReqToFCB() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		IF EXISTS(InputRoot.JSON[]) THEN

		ELSEIF EXISTS(InputRoot.BLOB[]) THEN

		END IF;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE mobileNumber CHARACTER InputRoot.JSON.Data.mobileNumber;
		DECLARE id,email,password CHAR;
		SET id = '201126287'; --201152883
		SET email = 'padma.maggari@eidiko.com';
		SET password = 'tawa@steward';
		--CALL newIndividualRequest(outRefer);
		CALL getIndividualRequest(id,email,password,outRefer);
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.reqMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF Environment DOMAIN('JSON');
		SET Environment.JSON = OutputRoot.JSON;
		--PROPAGATE TO TERMINAL 'out1';
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- FCB Request ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'FCB Request',ApplicationLabel,BrokerName,Environment.MQEFH2.usr.dbLogTime,Environment.MQEFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
		SET OutputRoot.JSON = Environment.JSON;
	END;

	CREATE PROCEDURE newIndividualRequest(INOUT outRefer REFERENCE) BEGIN
		CREATE LASTCHILD OF outRefer AS outRefer DOMAIN('JSON');
		CREATE LASTCHILD OF outRefer AS outRefer NAME('Data');
		SET outRefer.dob = '03-03-1986';
		SET outRefer.names = 'forbes';
		SET outRefer.surname = 'karinda';
		SET outRefer.national_id = '12345678A00';
		SET outRefer.gender = 'M';
		SET outRefer.search_purpose = '1';
		SET outRefer.email = 'padma.maggari@eidiko.com';
		SET outRefer.password = 'tawa@steward';
		SET outRefer.drivers_licence = 'drv';
		SET outRefer.passport = 'pp';
		SET outRefer.married = 'M';
		SET outRefer.nationality = '3';
		SET outRefer.streetno = '24';
		SET outRefer.streetname = 'harvey brown';
		SET outRefer.building = 'fcb mansion';
		SET outRefer.suburb = 'milton park';
		SET outRefer.pbag = 'p.o. highlands';
		SET outRefer.city = 'harare';
		SET outRefer.telephone = '794367-9';
		SET outRefer.mobile = '0772495573';
		SET outRefer.ind_email = 'padma.maggari@eidiko.com';
		SET outRefer.property_density = '1';
		SET outRefer.property_status = '2';
		SET outRefer.occupation_class = '1';
		SET outRefer.employer = 'fcb';
		SET outRefer.employer_industry = '6';
		SET outRefer.salary_band = '3';
		SET outRefer.loan_purpose = '3';
		SET outRefer.loan_amount = '334.45';
	END;
	CREATE PROCEDURE getIndividualRequest(IN id CHAR,IN email CHAR,IN password CHAR,INOUT outRef REFERENCE) BEGIN
		CREATE LASTCHILD OF outRef AS outRef DOMAIN('JSON');
		CREATE LASTCHILD OF outRef AS outRef NAME('Data');
		SET outRef.id = id;
		SET outRef.email = email;
		SET outRef.password = password;
	END;
END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateKYCResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateKYCResponse();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateKYCResponse() BEGIN
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE rc BOOLEAN FALSE;
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Response from DWH ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'DWH Response',ApplicationLabel,BrokerName,Environment.MQEFH2.usr.localTime,Environment.MQEFH2.usr.localDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		SET OutputRoot.JSON = InputRoot.JSON;
		SET Environment.outputData = OutputRoot.JSON;
		SET OutputRoot.JSON = NULL;
		SET domainName = FIELDNAME(OutputRoot.JSON);
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload(domainName,domainDataRef,encodeRef,ccidRef);
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Response to FrontEnd ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' Response QueueName :  '||ALL_SB_HTTP_RES) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Response to FrontEnd',ApplicationLabel,BrokerName,Environment.MQEFH2.usr.localTime,Environment.MQEFH2.usr.localDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.outputData;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
	END;
END MODULE;

CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateFCMResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToT241
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToT24();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToT24() BEGIN
	--	DECLARE individual ROW;
	--	CREATE LASTCHILD OF individual IDENTITY(JSON.Array) Report;
	-- initialize the variable with JSON string
DECLARE unStructuredData CHAR InputRoot.JSON.Data.individual;

-- converting JSON string into JSON object
DECLARE dataAsBit BIT  CAST(unStructuredData AS BIT CCSID 1208);
CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON' PARSE(dataAsBit CCSID 1208);
SET Environment.individual = OutputRoot.JSON.Data;

		
		SET OutputRoot = InputRoot;
		SET OutputRoot.JSON.Data.individual = Environment.individual;
		SET OutputRoot.JSON.Data.individual = NULL;
	END;
	CREATE PROCEDURE structureJSONMessage(IN unStructuredData CHAR,IN structuredRef REFERENCE) BEGIN
		DECLARE CurrentFieldName,CurrentFieldValue CHAR;
		SET CurrentFieldName = SUBSTRING(SUBSTRING(unStructuredData AFTER '"') BEFORE '"');
		SET unStructuredData = SUBSTRING(unStructuredData AFTER ':');
		CREATE LASTCHILD OF structuredRef IDENTITY(JSON.Array){CurrentFieldName};
		DECLARE I INT 1;
		WHILE I < 18 DO
			SET CurrentFieldName = SUBSTRING(SUBSTRING(unStructuredData AFTER '"') BEFORE '"');
			SET CurrentFieldValue = SUBSTRING(SUBSTRING(SUBSTRING(unStructuredData AFTER ':')AFTER '"') BEFORE '"');
			SET unStructuredData = SUBSTRING(unStructuredData AFTER ',');
			CREATE LASTCHILD OF structuredRef.*.Item[I] TYPE NameValue NAME CurrentFieldName VALUE CurrentFieldValue;
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;

CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		RETURN TRUE;
	END;
	CREATE PROCEDURE BuildErrorMsg() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'T24ServiceCall') THEN
			SET errMsg = 'T24 Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'FCBServiceCall') THEN
			SET errMsg = 'FCB Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'T24ClientReceiveData,Exception whilst parsing') THEN
			SET errMsg = 'No Response from T24 Server';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientReceiveData,Exception whilst parsing') THEN
			SET errMsg = 'No Response from Postilion Server';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'AccountOpening';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'AccountOpening');
		SET Environment.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headerRef = Environment.Variables.header;
		SET headerRef.status = 'FAILED';
		SET headerRef.responseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = Environment.UserDefinedErrorCodes.AccountOpening.ErrorCode;
		SET errorRef.message = errMsg;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.UserDefinedErrorCodes.AccountOpening.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
		----------------------------------
	END;
END MODULE;