

BROKER SCHEMA com.stewardbank.co.zw.accountopening
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_VerifyRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL VerifyRequest();
		RETURN TRUE;
	END;
	CREATE PROCEDURE VerifyRequest() BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.MQMD = InputRoot.MQMD;
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
--		IF CONTAINS(InputRoot.BLOB.BLOB,'XMLNSC') THEN
--			CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') PARSE(InputRoot.BLOB.BLOB);
--			DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
--			DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
--			DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
--			DECLARE domainDataRef REFERENCE TO InputRoot.XMLNSC;
--			DECLARE domainName CHARACTER FIELDNAME(InputBody);
--			DECLARE outRefer REFERENCE TO OutputRoot;
--			SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
--			IF IsLogRequired = 'Y' THEN
--				CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Request from Frontend------') INTO rc;
--				CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
--			END IF;
--			------------DBLogging-------------------
--			SET Environment.inputData = InputRoot.XMLNSC;
--			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,'','','',outRefer);
--			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
--			PROPAGATE TO TERMINAL 'out1';
--			---------------------------
--			SET OutputRoot.Properties = InputRoot.Properties;
--			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
--			SET OutputRoot.XMLNSC = Environment.inputData;
--			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'KYC';
--		ELSEIF CONTAINS(InputRoot.BLOB.BLOB,'mobileNumber') THEN
--			CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(InputRoot.BLOB.BLOB);
--			DECLARE inRef REFERENCE TO InputRoot.JSON;
--			DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
--			DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
--			DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
--			DECLARE domainName CHARACTER FIELDNAME(InputBody);
--			DECLARE outRefer REFERENCE TO OutputRoot;
--			SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
--			IF IsLogRequired = 'Y' THEN
--				CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Request from Frontend------') INTO rc;
--				CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
--			END IF;
--			------------DBLogging-------------------
--			SET Environment.inputData = InputRoot.JSON;
--			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,'','','',outRefer);
--			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
--			PROPAGATE TO TERMINAL 'out1';
--			---------------------------
--			SET OutputRoot.Properties = InputRoot.Properties;
--			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
--			SET OutputRoot.JSON = Environment.inputData;
--			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'KYC';
--		ELSEIF CONTAINS(InputRoot.BLOB.BLOB,'JSON') THEN
--			CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(InputRoot.BLOB.BLOB);
			DECLARE inRef REFERENCE TO InputRoot.JSON;
			DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
			DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
			DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
			DECLARE domainName CHARACTER FIELDNAME(InputBody);
			DECLARE outRefer REFERENCE TO OutputRoot;
			SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
			IF IsLogRequired = 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Request from Frontend------') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			END IF;
			------------DBLogging-------------------
			SET OutputRoot.JSON = InputRoot.JSON;
			SET Environment.inputData = OutputRoot.JSON;
			SET OutputRoot.JSON = NULL;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,'','','',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
			---------------------------
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
			--SET OutputRoot.JSON = Environment.inputData;
			SET OutputRoot.JSON = InputRoot.JSON;
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'KYC';
--		ELSEIF CONTAINS(InputRoot.BLOB.BLOB,'DFDL') THEN
--			CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(InputRoot.BLOB.BLOB);
--			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'Update_ACC';
--		END IF;		 			 
	END;
END MODULE;


CREATE FILTER MODULE SosholozoaAccountOpeningFlow_VerifyDWHResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;

END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToDWH
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToDWH();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToDWH() BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE mobileNumber CHARACTER InputRoot.JSON.Data.mobileNumber;
		DECLARE rc BOOLEAN FALSE;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Econet Response ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.EconetResponseMsg) INTO rc;
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = 'http://localhost:7080/ecocash/?mobileNumber='||mobileNumber;
	END;
END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateKYCResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateKYCResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateKYCResponse() BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		SET OutputRoot.JSON = InputRoot.JSON;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ALL_SB_HTTP_RES';
	END;
END MODULE;

CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateFCMResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateReqToT24();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToT24() BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		SET OutputRoot.JSON = InputRoot.JSON;
	END;
END MODULE;

CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToT241
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_GenerateReqToFCB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE SosholozoaAccountOpeningFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL BuildErrorMsg();
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC');
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE rc BOOLEAN FALSE;
		CALL writeToLogFile(MessageFlowLabel, 'AccountOpeningDebugLogger', 'DEBUG','Generating Exception Response::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'AccountOpeningDebugLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER )) INTO rc;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'BalanceEnquiry';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'BalanceEnquiry');
	END;
END MODULE;