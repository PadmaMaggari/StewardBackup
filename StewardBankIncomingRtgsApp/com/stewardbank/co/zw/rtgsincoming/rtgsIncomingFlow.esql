/*
Author:Swathi
Version:0.0.1
Date of Creation:6-07-2020
Date of Modification:
Description:Pick file from remote location and based on the account send request to t24 or zss.
			If it is t24 account then send to T24 Application else sends to ZSS Application.
 			
*/
BROKER SCHEMA com.stewardbank.co.zw.rtgsincoming

PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH,LOG4J_INIT_ERROR,SB_EXCQ,ERROR_AUDIT_Q,IsLogRequired,ZSS_REQ,T24_REQ,DSN  EXTERNAL CHARACTER '';
DECLARE UUID SHARED CHARACTER '';
CREATE COMPUTE MODULE rtgsIncomingFlow_GenerateMt103Req
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildMT103FromRaw();
		RETURN TRUE;
	END;
	/*
	build MT103 from raw data recevied from remote location
	*/
	CREATE PROCEDURE BuildMT103FromRaw() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE reqMsg CHARACTER;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.BLOB;
		SET Environment.Variables.File.Name = InputLocalEnvironment.File.Name;
		IF (InputLocalEnvironment.File.Name NOT LIKE ' ') THEN
			SET Environment.Variables.File.Status = 'SUCCESS';
		ELSE
			SET Environment.Variables.File.Status = 'FAILURE'; 	
		END IF;
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','..............Start RTGSIncoming logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','RTGSIncoming Request in RAW data start') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG',Environment.reqMsg) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','RTGSIncoming Request in RAW data end') INTO rc;
		END IF;
		SET OutputRoot.Properties.MessageSet = '{MT103}';
		SET OutputRoot.Properties.MessageType = '{}:MT103';
		CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL')
		parse(InputRoot.BLOB.BLOB ENCODING encodeRef CCSID ccidRef SET '{MT103}' TYPE '{}:MT103');
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;
		SET Environment.Variables.mtReqMsg = getPayLoad(FIELDNAME(OutputRoot.DFDL.MT103),outDomainDataRef,encodeRef,ccidRef);
		IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','RTGSIncoming Request Original start') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG',Environment.Variables.mtReqMsg) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','RTGSIncoming Request Original end') INTO rc;
		END IF;
	END;
END MODULE;
CREATE COMPUTE MODULE rtgsIncomingFlow_RouteToT24orZss
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		CALL GeneratingReqToT24orZSS();
		RETURN TRUE;
	END;
	/*
	Log Incoming Request i.e MT103 in RTGS_INCOMING_DETAILS Table and form ISO8583 if account is in T24 or
	else form MT103 
	*/
	CREATE PROCEDURE GeneratingReqToT24orZSS() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE reqMsg,crAcctId CHARACTER ;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE sql CHARACTER;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','..............Start RTGSIncoming  ReqToPostilion logging...........') INTO rc;
		END IF;
		DECLARE Response ROW;
		DECLARE CRLF CHARACTER CAST(X'0D0A' AS CHARACTER CCSID 1208);
		SET UUID = UUIDASCHAR;
		SET Environment.Variables.Guid = UUID;
		DECLARE Mt50DataAdd CHARACTER SUBSTRING(inDomainDataRef.MT103.body.MT50Data.MT50DataField AFTER CRLF);
		SET Environment.Variables.exeDate = SUBSTRING(inDomainDataRef.MT103.body.MT32A FROM 1 FOR 6);
		SET Environment.Variables.transactionAmount= LTRIM(SUBSTRING(inDomainDataRef.MT103.body.MT32A FROM 10)) ; 
		SET Environment.Variables.debitCurrency = SUBSTRING(inDomainDataRef.MT103.body.MT32A FROM 7 FOR 3); 
		SET Environment.Variables.ordCustomerName = SUBSTRING(Mt50DataAdd BEFORE CRLF);
		SET Environment.Variables.narrative = LTRIM(inDomainDataRef.MT103.body.MT20);
		DECLARE mtField70 CHARACTER inDomainDataRef.MT103.body.MT70 ;
		IF ( mtField70 NOT LIKE ' ' ) THEN
			SET Environment.Variables.invoiceReference = SUBSTRING(mtField70 BEFORE CRLF);
		ELSE
			SET Environment.Variables.invoiceReference ='NOTPROVIDED';
		END IF;
		SET Environment.Variables.drAcctId = SUBSTRING(SUBSTRING(inDomainDataRef.MT103.body.MT50Data.MT50DataField AFTER '/')BEFORE CRLF);
		SET  crAcctId = SUBSTRING(SUBSTRING(inDomainDataRef.MT103.body.MT59Data.MT59DataField AFTER '/')BEFORE CRLF);
		SET Environment.Variables.crAcctId = crAcctId;
		--SET Response.accountEnquiry[] = SELECT * FROM Database.ISAVE_CARD_MAPPING AS I WHERE I.ACCOUNT_ID = crAcctId;
		--get account details from db to check weather Account belongs to Zss or T24
		SET sql='SELECT * FROM ISAVE_CARD_MAPPING WHERE ACCOUNT_ID=?';
		SET Response.accountEnquiry[] = PASSTHRU(sql TO Database.{DSN} VALUES(crAcctId));
		--*************If Account Exist in Isave table or it starts with 2 then it is ZSS Account**********
		IF EXISTS(Response.accountEnquiry.*[]) OR STARTSWITH(crAcctId,'2') THEN
			-- Routing to Zss Application
			IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','..............Account Exists in Zss ,Routing Req to Zss Flow...........') INTO rc;
		END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ZSS_REQ;
		ELSE
			-- Routing to T24 Application
		IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','..............Account Exists in T24 ,Routing Req to T24 Flow...........') INTO rc;
		END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = T24_REQ;
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','..............End of RTGSIncoming  ReqToPostilion logging...........') INTO rc;
		SET OutputRoot.MQRFH2 = Environment.Variables;
		SET OutputRoot.DFDL = InputRoot.DFDL; 
		
--		SET OutputRoot.Properties.MessageSet = '{MT103}';
--		SET OutputRoot.Properties.MessageType = '{}:MT103';
		--CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(InputRoot.DFDL ENCODING encodeRef CCSID ccidRef SET '{MT103}' TYPE '{}:MT103');
		END;
		END MODULE;
CREATE COMPUTE MODULE rtgsIncomingFlow__GenerateExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		CALL BuildErrorMsg();
		RETURN FALSE;
	END;
	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE dbLoggingDate TIMESTAMP CURRENT_DATE;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.XMLNSC;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','..............Start RTGSIncoming Exception logging...........') INTO rc;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE exe_Desc CHARACTER'';  
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'RTGSIncoming';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;    
		CALL BuildExceptionDetails(excpRef,outRef,'RTGSIncoming');
		SET Environment.userDefineError = OutputRoot.XMLNSC;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = SB_EXCQ ;
		PROPAGATE TO TERMINAL 'out';
				-- DB Logging===================
		SET exe_Desc = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		CALL writeToLogFile(MessageFlowLabel,'ErrorLogger','ERROR','Exception Details: '||exe_Desc) INTO rc ;
		CALL Error_DBLogging(Environment.Variables.Guid,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),' ',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.ExceptionDetails.ErrorCode,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','..............End RTGSIncoming Exception logging...........') INTO rc;
	END;
END MODULE;