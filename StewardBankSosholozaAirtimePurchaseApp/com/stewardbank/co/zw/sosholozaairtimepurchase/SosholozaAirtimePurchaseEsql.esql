BROKER SCHEMA com.stewardbank.co.zw.sosholozaairtimepurchase

PATH  com.stewardbank.co.zw.common.esql; 

DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';	
DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER'';
DECLARE ALL_SB_HTTP_RES EXTERNAL CHARACTER'';
CREATE COMPUTE MODULE SosholozaAirtimePurchaseFlow_GenerateIsoReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateIsoReq();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateIsoReq() BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE reqMsg,procCodeData,QueueName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE DBDetails ROW;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE col CHARACTER ':';
		DECLARE comm CHARACTER ',';
		DECLARE channel CHARACTER 'Channel';
		DECLARE destinationPhone CHARACTER 'DestinationPhone';
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.JSON,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.Variable.reqMsg = reqMsg;
		DECLARE outRefer REFERENCE TO OutputRoot;
		/*=================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(InputRoot.MQRFH2.RequestIdentifier,Environment.Variable.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF;
		
--		DECLARE dataLength INTEGER LENGTH(InputRoot.JSON.Data.billProvider);
--		DECLARE billProvider CHARACTER  InputRoot.JSON.Data.billProvider;
--		DECLARE i INTEGER 1;
--		DECLARE dataSpace CHARACTER;
--		IF dataLength < 25 THEN
--		WHILE dataLength < 25 DO
--			SET  billProvider = billProvider||' ';
--			SET  dataLength = dataLength + 1;
--		END WHILE;
--		ELSEIF dataLength > 25 THEN
--			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
--		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
--		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
--		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
--		SET outRef.statusCode = '000';
--		SET outRef.status = 'FAILED';
--		SET outRef.message = 'Airtime Purchase Length Exceds';
--		SET outRef.responseBody.source = 'ESB';
--		SET outRef.responseBody.applicationName = ApplicationLabel;
--		SET outRef.responseBody.applicationErrorCode = 'Airtime_001';
--		
--		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ALL_SB_HTTP_RES';
--		PROPAGATE TO TERMINAL 'out1';
--		RETURN;
--		END IF; 
--		
		/*=================== CALLING DB RAW AUDIT LOGGING END  ==============*/
		/*=================== CALLING LOG4j  LOGGING   ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG','..............Start AirtimePurchaseHTTPApp logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG','Incoming Request::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG',reqMsg) INTO rc;
		END IF;
		
		
		/*=================== CALLING LOG4J LOGGING END  ==============*/
		
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		SET outRef.MTI_Version = 0;
		SET outRef.MTI_MessageClass = 2;
		SET outRef.MTI_MessageFunction = 0;
		SET outRef.MTI_MessageOrigin = 0;
		SET outRef.ProcessingCode_003 = inRef.JSON.Data.BuyAirtimeRequest.header.processingCode;
		SET outRef.AmountTransaction_004 = CAST(inRef.JSON.Data.BuyAirtimeRequest.body.billAmount AS INTEGER);
		
		 SET outRef.CurrencyCodeTransaction_049 = inRef.JSON.Data.BuyAirtimeRequest.body.debitCurrency;
		 

         SET outRef.Payee_098 = inRef.JSON.Data.BuyAirtimeRequest.body.billProvider;
 
		SET outRef.AccountIdentification1_102 = CAST(inRef.JSON.Data.BuyAirtimeRequest.body.debitAccountNumber AS INTEGER);
		SET outRef.AccountIdentification2_103 = CAST(inRef.JSON.Data.BuyAirtimeRequest.body.billAccount AS INTEGER);
		
		
		DECLARE keyChannelValue CHARACTER'';
		CALL keyValueGenerator(inRef.JSON.Data.BuyAirtimeRequest.header.channel) INTO keyChannelValue;   
		DECLARE keyChannel CHARACTER '';
		CALL keyValueGenerator(channel) INTO keyChannel; 
		
		
		DECLARE keydestinationPhoneValue CHARACTER'';
		CALL keyValueGenerator(inRef.JSON.Data.BuyAirtimeRequest.body.destinationPhone) INTO keydestinationPhoneValue;   
		DECLARE keydestinationPhone CHARACTER '';
		CALL keyValueGenerator(destinationPhone) INTO keydestinationPhone; 
		
		SET outRef.ReservedPrivate_127 = '000000';
		SET outRef.StructuredDataPostilionPrivate_127_22 = keyChannel ||keyChannelValue||comm||keydestinationPhone ||keydestinationPhoneValue;
		SET OutputRoot.JSON= NULL;
		CALL UpdateMsgWithAsciiBitMap(outRef);
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;	
		SET Environment.Variables.resMsg = getPayLoad(FIELDNAME(OutputRoot.DFDL),outDomainDataRef,encodeRef,ccsid);        
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET OutputRoot.DFDL = NULL;
		/*=================== CALLING LOG4J LOGGING  ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG','Generate Req in ISO 8583::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG',getPayLoad(FIELDNAME(OutputRoot.DFDL),outDomainDataRef,encodeRef,ccsid)) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END  ==============*/
		/*=================== CALLING DB RAW AUDIT LOGGING   ==============*/
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(InputRoot.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Postilion Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END  ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;
		
	END;

END MODULE;



CREATE COMPUTE MODULE SosholozaAirtimePurchaseFlow_ReqToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateReqToT24();
		RETURN TRUE;
	END;     

	CREATE PROCEDURE GenerateReqToT24() BEGIN
		DECLARE rc BOOLEAN FALSE;
		
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583WithHeader;	
		DECLARE envUsrRef REFERENCE TO Environment.MQRFH2.usr;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		SET Environment.Variables.reqISOMsg = getPayLoad(FIELDNAME(InputRoot.DFDL),inDomainDataRef,encodeRef,ccsid);
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		
		DECLARE reqMsgJson CHARACTER'';
		DECLARE logRef REFERENCE TO InputRoot.DFDL.ISO8583WithHeader;
		DECLARE jsonRef REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot AS jsonRef DOMAIN('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON AS jsonRef NAME ('Data');
		--CALL JSONLogMessage(logRef,jsonRef);
		SET jsonRef = logRef;
		SET reqMsgJson = getPayLoad('JSON',jsonRef,encodeRef,ccsid);
		
		SET OutputRoot.JSON=NULL;
		DECLARE posRef REFERENCE TO Environment.DFDL.ISO8583_1987;
		CALL FieldToFieldMapping(inRef,outRef,'',envUsrRef,posRef);
		SET Environment.DFDL = OutputRoot.DFDL;
		
		DECLARE removeRefPointer REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		CALL remove127(removeRefPointer);
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET OutputRoot.DFDL = NULL;
		/*=================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqISOMsg,'T24 Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END ==============*/
		/*=================== CALLING LOG4J LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN

			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG','Request to T24::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG','========= ISO TO JSON T24 REQUEST ==========') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG',reqMsgJson) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END ==============*/


		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;

	END;
END MODULE;

CREATE COMPUTE MODULE SosholozaAirtimePurchaseFlow_ReqToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL reqToPostilion();
		RETURN TRUE;
	END;

	

	CREATE PROCEDURE reqToPostilion() BEGIN
	DECLARE rc BOOLEAN FALSE;
		
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Environment.Variables.resISOMsg = getPayLoad(FIELDNAME(InputRoot.DFDL),inDomainDataRef,encodeRef,ccsid);
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		SET Environment.dfdlData = InputRoot.DFDL;
		/*=================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resISOMsg,'T24 Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END ==============*/
		/*=================== CALLING LOG4J LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN

			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG','Response from T24::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG',Environment.Variables.resISOMsg) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END ==============*/

		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;

	END;
END MODULE;

CREATE COMPUTE MODULE SosholozaAirtimePurchaseFlow_ReqToFrondEnd
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateResToPortalBackend();
		RETURN TRUE;
	END;

	

	CREATE PROCEDURE GenerateResToPortalBackend() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.DFDL;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,inRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		IF IsLogRequired LIKE 'Y' THEN
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Postilion Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out';
			-----------------------------	
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG','Postilion Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
		END IF;
		--field to field mapping
		--CALL ISOToJSONMapping(inRef,outRef);
		IF EXISTS(inRef.*.SecondaryBitmap[]) THEN
			MOVE inRef TO InputRoot.DFDL.*.SecondaryBitmap;
			MOVE inRef NEXTSIBLING;
		ELSEIF EXISTS(inRef.*.PrimaryBitmap[]) THEN
			MOVE inRef TO InputRoot.DFDL.*.PrimaryBitmap;
			MOVE inRef NEXTSIBLING;
		ELSE	
		MOVE inRef TO InputRoot.DFDL.*.PrimaryAccountNumber_002;	
		END IF;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AirtimePurchaseResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('body');
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body;
		SET headRef = Environment.header;
		SET headRef.status = 'SUCCESS';
		SET headRef.responseCode = '200';
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		CALL ISOToJSONMapping(inRef,bodyRef);
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.JSON;
		DECLARE OutRefer REFERENCE TO OutputRoot.JSON.Data;
		DECLARE envref REFERENCE TO Environment;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'JSON';
		CREATE LASTCHILD OF Environment.JSON AS envref NAME 'Data';
		SET envref = OutRefer;
	--	SET OutputRoot = NULL;

		SET domainName = FIELDNAME(outDomainDataRef);
		SET Environment.Variables.resMsg = getPayLoad(domainName,outDomainDataRef,encodeRef,ccidRef);
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired LIKE 'Y' THEN
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out';
			-----------------------------
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG','Application Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AirtimePurchaseHTTPLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON.Data = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
	END;
	
END MODULE;

CREATE COMPUTE MODULE SosholozaAirtimePurchaseFlow_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL BuildErrorMsg();
		RETURN TRUE;
	END;

	
	CREATE PROCEDURE BuildErrorMsg() BEGIN

DECLARE rc BOOLEAN FALSE;
CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'T24ClientOut,connection refused') THEN
			SET errMsg = 'T24 Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientCall,connection refused') THEN
			SET errMsg = 'Postilion Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'T24ClientReceiveData,Exception whilst parsing') THEN 
			SET errMsg = 'No Response from T24 Server';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientReceiveData,Exception whilst parsing') THEN 
			SET errMsg = 'No Response from Postilion Server';	
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'AIRTIME_PURCHASE_HTTP';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'AIRTIME_PURCHASE_HTTP');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		MOVE outRef TO OutputRoot.JSON.Data;
		SET outRef.statusCode = '000';
		SET outRef.status = 'FAILED';
		SET outRef.message = errMsg;
		SET outRef.responseBody.source = 'ESB';
		SET outRef.responseBody.applicationName = ApplicationLabel;
		SET outRef.responseBody.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.AIRTIME_PURCHASE_HTTP.ErrorCode;
 		SET OutputRoot.XMLNSC = NULL;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ALL_SB_HTTP_RES';   
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		--CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.AIRTIME_PURCHASE_HTTP.ErrorCode,outRefer);
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variable.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.AIRTIME_PURCHASE_HTTP.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;
		----------------------------------
		END;

END MODULE;

