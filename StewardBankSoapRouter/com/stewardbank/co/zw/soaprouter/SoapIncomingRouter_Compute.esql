BROKER SCHEMA com.stewardbank.co.zw.soaprouter
PATH com.stewardbank.co.zw.common.esql;
DECLARE IsLogRequired EXTERNAL CHARACTER ''; 
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER ''; 
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER ''; 
DECLARE rc BOOLEAN; 
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
CREATE COMPUTE MODULE SoapIncomingRouter_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		CALL writeToLogFile(MessageFlowLabel,'SoapRouterLog','DEBUG','=====================================  INCOMMING  ROUTER =================================') INTO rc ;
		
		DECLARE inRefData REFERENCE TO InputRoot.SOAP;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.SOAP;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE SoapReplyIdentifier REFERENCE TO InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier;
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET Environment.id = SoapReplyIdentifier;
		DECLARE outRefer REFERENCE TO OutputRoot;
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(CAST(Environment.id AS CHARACTER),Environment.Variables.reqMsg,'Router Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.timeLocalTransaction,Environment.MQRFH2.usr.dateLocalTransaction,
			Environment.MQRFH2.usr.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		END IF;
		
		
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SoapRouterLog', 'DEBUG','SOAP Router Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SoapRouterLog', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SoapRouterLog', 'DEBUG','SOAP ID::'|| CAST(InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier AS CHARACTER)) INTO rc;
		END IF;
		
		
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2.usr = InputLocalEnvironment;
		DECLARE inRef REFERENCE TO InputRoot.SOAP.Body.[1];
		IF CONTAINS(FIELDNAME(inRef),'getTransactionExportTransactions')
			OR CONTAINS(FIELDNAME(inRef),'acknowledgeTransactionExport') THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'IN';
		ELSEIF CONTAINS(FIELDNAME(inRef),'AccountDetails')
			OR CONTAINS(FIELDNAME(inRef),'AmendCard') THEN
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'INDIGO_SB_SOAP_REQ';
			
		ELSE 
			--other soap business flow queues
		END IF;
		SET OutputRoot.SOAP = InputRoot.SOAP;
	END;
END MODULE;


CREATE COMPUTE MODULE SoapIncomingRouter_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL BuildException();
		RETURN TRUE;
	END;

	
	CREATE PROCEDURE BuildException() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE exe_Desc CHARACTER'';
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'InComingRouter';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'InComingRouter');
		SET Environment.Variables.UserDefineErrorCodes = OutputRoot.XMLNSC;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q ;
		PROPAGATE TO TERMINAL 'out';
		-- DB Logging===================
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.XMLNSC;
		SET exe_Desc = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		CALL writeToLogFile(MessageFlowLabel,'ErrorLogger','ERROR','=====================================  INCOMING ROUTER  EXCEPTIOPN =================================') INTO rc ;
		CALL writeToLogFile(MessageFlowLabel,'ErrorLogger','ERROR','Exception Details: '||exe_Desc) INTO rc ;
		CALL writeToLogFile(MessageFlowLabel,'ErrorLogger','ERROR','SOAP ID: '||CAST(InputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier AS CHARACTER))INTO rc;
		CALL Error_DBLogging(Environment.id,Environment.Variables.reqMsg,'Router Request Error',ApplicationLabel,BrokerName,exe_Desc,Environment.Variables.systemsTraceAuditNumber,Environment.Variables.dateLocalTransaction,Environment.Variables.retrievalReferenceNumber,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefineErrorCodes.InComingRouter.ErrorCode,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;