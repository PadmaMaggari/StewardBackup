
/*
Application Name : ZIPIT SEND.
Description :
1) From TCP router we get the ISO data, here we are generating request to T24.
2) Audit Logging and DB Logging has been done here.
3) Checks with T24 with the processingcode. 
Date :28-3-2020 .
Modified Date : 28-04-2020.  
Author : G Raghavender.
=================================================================================================================== */
BROKER SCHEMA com.stewardbank.co.zw.zipitsend

PATH com.stewardbank.co.zw.common.esql;       
  
DECLARE LOG_CONFIG_PATH,APPLICATION_NAME,RAW_AUDIT_LOGGING,ERROR_AUDIT_LOGGING,EXCEPTION_QUEUE EXTERNAL CHARACTER; 

CREATE COMPUTE MODULE Zipit_GenerateReqToT24    
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN          
		CALL GenerateReqToT24(); 
		RETURN FALSE;
	END;


	CREATE PROCEDURE GenerateReqToT24() BEGIN
		
		
		
		/* ==================== Setting MQRFH2 Details in Environment ==================== */
		SET Environment.usr= InputRoot.MQRFH2.usr;
		/* ==================== Database Logging ==================== */
		DECLARE outRefer REFERENCE TO OutputRoot;
		
		
		 CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER),'Application Request',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out1';
		SET OutputRoot=NULL;
		/* ==================== Database Logging End ==================== */
		/* ==================== Framming Request to T24 ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path'; 
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitSendLogger', 'DEBUG','..............Start ZipitSend logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitSendLogger', 'DEBUG','Request to ZipitSend::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitSendLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER)) INTO rc;
		CALL FieldToFieldMapping(inRef,outRef,'');
		SET Environment.dfdlData=OutputRoot.DFDL;
		SET OutputRoot=NULL;
		/* ==================== Database Logging ==================== */
		 CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER),'T24 Request',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);
		
		
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out1';
		/* ==================== Database Logging End ==================== */
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.DFDL= Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitSendLogger', 'DEBUG','Request To T24::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitSendLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER )) INTO rc;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;


/*==================================================================================================================
Application Name : ZIPIT SEND.
Description :
1)From T24 Simulator we get the response, here we are generating Response to TCPIP Router. 
2) Audit Logging and DB Logging has been done here.
Date :27-3-2020 .
Modified Date : 28-04-2020.
Author : G Raghavender.
=================================================================================================================== */

CREATE COMPUTE MODULE Zipit_GenerateResToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateResToPostilion();  
		RETURN FALSE;
	END;
	CREATE PROCEDURE GenerateResToPostilion() BEGIN
		/* ==================== Database Logging ==================== */
		
		DECLARE resData CHARACTER;
		SET Environment.resData= CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER); 
		
		
		DECLARE outRefer REFERENCE TO OutputRoot;
		 CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER),'T24 Response',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);


		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot=NULL;
		/* ==================== Database Logging End ==================== */
		/* ==================== Framming Response to  TCPIP Router ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitSendLogger', 'DEBUG','.........................') INTO rc;
		--field to field mapping 
		CALL FieldToFieldMapping(inRef,outRef,'');
		SET Environment.dfdlData=InputRoot.DFDL;
		SET OutputRoot=NULL;
		/* ==================== Database Logging ==================== */
		 CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER),'Application Response',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);


		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
		/* ==================== Database Logging End ==================== */
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQRFH2.usr=Environment.usr;
		SET OutputRoot.MQRFH2.resData=Environment.resData;
		SET OutputRoot.DFDL=Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitSendLogger', 'DEBUG','Request To Postilion::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitSendLogger', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER )) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.usr.resQueueName;
		PROPAGATE TO TERMINAL 'out';            
	END;
END MODULE;

/*==================================================================================================================
Application Name : ZIPIT SEND.
Description :
1)Here we're handling the exceptions that occur and storing in ERROR DB Logging. 
Date :27-3-2020 .
Modified Date :28-04-2020.
Author : G Raghavender.
=================================================================================================================== */

CREATE COMPUTE MODULE ZipitFlowCaptureException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitSendLogger', 'DEBUG','..............Start Exception logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ZipitSendLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER)) INTO rc;
 
		RETURN FALSE;
	END;

	
	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Id CHARACTER '';
		SET Id= CAST(Environment.usr.Id AS CHARACTER);
		/* ==================== Database Logging ==================== */
		DECLARE exe_Desc CHARACTER'';
		SET exe_Desc = CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);

		CALL Error_DBLogging(InputRoot.MQRFH2.usr.Id,InputRoot.MQRFH2.usr.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,InputRoot.MQRFH2.usr.timeLocalTransaction,InputRoot.MQRFH2.usr.dateLocalTransaction,InputRoot.MQRFH2.usr.retrievalReferenceNumber,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';

		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC'; 
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'Zipit Send';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;

		CALL BuildExceptionDetails(excpRef,outRef,'Zipit Send'); 
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_QUEUE;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;