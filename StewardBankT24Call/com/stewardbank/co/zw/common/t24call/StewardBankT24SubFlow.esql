/*
Author:Rathod Veerender
Version:0.0.1
Date of Creation:14-04-2020
Date of Modification: 20-04-2020,20-05-2020
Description: compute module StewardBankT24SubFlow is for retrying 3 times when tcp connection is down or unavaiable.
 			
*/
BROKER SCHEMA com.stewardbank.co.zw.common.t24call
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE MAX_RETRY_COUNT EXTERNAL INTEGER 0;
DECLARE INIT_LOG4J_ERROR EXTERNAL CHARACTER '';
DECLARE RETRY_INTERVAL EXTERNAL INTEGER 0;

	
CREATE COMPUTE MODULE StewardBankT24SubFlow
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 DECLARE rc BOOLEAN FALSE;
		 CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		 IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = INIT_LOG4J_ERROR;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR',INIT_LOG4J_ERROR) INTO rc;		
		 END IF;
		 IF Environment.Variables.Counter IS NULL THEN 
		 	CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Environment.Variables.Counter is null maybe didnt capture tcp exceptionMsg') INTO rc;
			SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
			SET OutputRoot.Properties = InputRoot.Properties;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE; 
		 END IF;
		 CALL CopyEntireMessage();
		 IF Environment.Variables.Retry.Counter IS NULL THEN 
				SET Environment.Variables.Retry.Counter = 1; 
		 END IF;
		 IF Environment.Variables.Retry.Counter <= MAX_RETRY_COUNT THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','retry count for connection:'||CAST(Environment.Variables.Retry.Counter AS CHARACTER)) INTO rc;
			DECLARE envRef REFERENCE TO Environment.Variables.Retry;
			IF envRef.Counter = 1 THEN 
				SET envRef.Counter = envRef.Counter + 1;
			ELSE
				SET envRef.Counter = envRef.Counter + 1;
				CALL retryWithDelay(envRef.Counter);
				CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','retry the request after '||CAST(RETRY_INTERVAL AS CHARACTER)||' sec delay for current count:'||CAST(envRef.Counter AS CHARACTER)||'is Complete') INTO rc;
				RETURN TRUE;
			END IF;
		 ELSE
		 	SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
			SET OutputRoot.Properties = InputRoot.Properties;
			PROPAGATE TO TERMINAL 'out1';
		 	RETURN FALSE;
		 END IF;
		
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	CREATE PROCEDURE retryWithDelay(IN count INTEGER) BEGIN
		IF count <= MAX_RETRY_COUNT AND count > 1 THEN
			DECLARE varDelay BOOLEAN SLEEP(RETRY_INTERVAL);
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE StewardBankT24SubFlow_addHeaderData
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
	DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE ccsidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE data BLOB ASBITSTREAM(InputRoot.DFDL ENCODING encodeRef CCSID ccsidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987'); 
 		DECLARE tcpHeader BLOB ;
 		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'T24SubFlowLogger', 'DEBUG','..............Start logging T24 sub flow...........') INTO rc;
 		--JAVA procedure call to get 2 byte header
 		SET tcpHeader = Get2ByteHeader(data);
 		CALL writeToLogFile(MessageFlowLabel, 'T24SubFlowLogger', 'DEBUG','Data with header'||CAST(tcpHeader AS CHARACTER CCSID ccsidRef)) INTO rc;
 		DECLARE hexBits CHARACTER SUBSTRING(CAST(tcpHeader AS CHARACTER) FROM 3 FOR 4);
 		CALL writeToLogFile(MessageFlowLabel, 'T24SubFlowLogger', 'DEBUG','Hex Data of Header:'||hexBits) INTO rc;
 		----TCp bitmaps population
 		--CALL UpdateTCPHeaderBitmaps(tcpBitmapRef,hexBits);
 		DECLARE dataWithHeader CHARACTER SUBSTRING(CAST(data AS CHARACTER) FROM 1 FOR 2) || hexBits || SUBSTRING(CAST(data AS CHARACTER) FROM 3);
 		CALL writeToLogFile(MessageFlowLabel, 'T24SubFlowLogger', 'DEBUG','Data with Header'||dataWithHeader) INTO rc;
 		SET OutputRoot.Properties.MessageType = '{}:ISO8583WithHeader';
 		CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') 
 		PARSE(CAST(dataWithHeader AS BLOB)  ENCODING encodeRef CCSID ccsidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583WithHeader');
 		DECLARE outDomainRef REFERENCE TO OutputRoot.DFDL;
 		CALL writeToLogFile(MessageFlowLabel, 'T24SubFlowLogger', 'DEBUG','OutputRoot:') INTO rc;
 		CALL writeToLogFile(MessageFlowLabel, 'T24SubFlowLogger', 'DEBUG',getPayLoad(FIELDNAME(OutputRoot.DFDL.ISO8583WithHeader),outDomainRef,encodeRef,ccsidRef)) INTO rc;
 		RETURN TRUE;
	END;

	
END MODULE;

CREATE COMPUTE MODULE StewardBankT24SubFlow_removeHeaderData
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
	DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE ccsidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE data BLOB ASBITSTREAM(InputRoot.DFDL ENCODING encodeRef CCSID ccsidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583WithHeader'); 
 		DECLARE tcpHeader BLOB ;
 		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
 		DECLARE isoData CHARACTER SUBSTRING(CAST(data AS CHARACTER) FROM 1 FOR 2) || SUBSTRING(CAST(data AS CHARACTER) FROM 7);
 		CALL writeToLogFile(MessageFlowLabel, 'T24SubFlowLogger', 'DEBUG','iso data after removing header:'||isoData) INTO rc;
 		SET OutputRoot.Properties.MessageType = '{}:ISO8583_1987';
 		CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') 
 		PARSE(CAST(isoData AS BLOB)  ENCODING encodeRef CCSID ccsidRef SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987');
 		DECLARE outDomainRef REFERENCE TO OutputRoot.DFDL;
 		CALL writeToLogFile(MessageFlowLabel, 'T24SubFlowLogger', 'DEBUG','OutputRoot:') INTO rc;
 		CALL writeToLogFile(MessageFlowLabel, 'T24SubFlowLogger', 'DEBUG',getPayLoad(FIELDNAME(OutputRoot.DFDL),outDomainRef,encodeRef,ccsidRef)) INTO rc;
 		CALL writeToLogFile(MessageFlowLabel, 'T24SubFlowLogger', 'DEBUG','..............end logging T24 sub flow...........') INTO rc;
 		RETURN TRUE;
	END;

	
END MODULE;
