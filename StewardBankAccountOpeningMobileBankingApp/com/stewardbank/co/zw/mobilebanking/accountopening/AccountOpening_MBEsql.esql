





BROKER SCHEMA com.stewardbank.co.zw.mobilebanking.accountopening
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE ALL_SB_HTTP_RES EXTERNAL CHAR '';
DECLARE IsLogRequired EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE TABLENAME EXTERNAL CHARACTER '';
DECLARE rc BOOLEAN FALSE;
CREATE COMPUTE MODULE AccountOpening_MBFlow_VerifyRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL VerifyRequest();
		RETURN TRUE;
	END;
	CREATE PROCEDURE VerifyRequest() BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		SET Environment.JSON = InputRoot.JSON;
		CREATE LASTCHILD OF Environment NAME 'ChannelRequest';
		SET Environment.MQRFH2.ChannelRequest = InputRoot.JSON.Data;
		SET Environment.ChannelRequest.header = InputRoot.JSON.Data.*.header;
		SET Environment.ChannelRequest.body = InputRoot.JSON.Data.*.body;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE accountOpeningCheck CHAR COALESCE(inRef.accountOpeningCheck,inRef.header.accountOpeningCheck,inRef.*.header.accountOpeningCheck,'');
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Environment.MQRFH2.ChannelRequest = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET Environment.Variables.reqMsg = Environment.MQRFH2.ChannelRequest;
		------------DBLogging-------------------
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Application Request------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		---------------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = InputRoot.JSON;
		IF accountOpeningCheck = 'KYC_CHECK' THEN
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'KYC';
		ELSEIF accountOpeningCheck = 'UPDATE' THEN
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'UPDATE';
		ELSE
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'Unknown';
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateDWHRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateDWHRequest();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateDWHRequest() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE national_ID CHARACTER inRef.Data.nationalId;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE host,port,baseURL,url CHAR;
		SET host = '192.168.11.55';
		SET port = '18050';
		SET baseURL = '/v1/dwh/customer/';
		SET url = 'http://'||host||':'||port||baseURL||national_ID;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Calling DWH Service ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- '||url||' ------') INTO rc;
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.ContentType = 'application/json';
		SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'GET';
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = url;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateDWHResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE status CHARACTER FIELDVALUE(inRef.Data.status);
		DECLARE outRefer REFERENCE TO OutputRoot;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Calling DWH Service ------') INTO rc;
		END IF;
		IF status = '200' THEN
			CALL GenerateDWHResponse();
		ELSE
			CALL GenerateKYCFailure();
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateDWHResponse() BEGIN
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		SET OutputRoot.JSON = InputRoot.JSON;
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		IF EXISTS(Environment.JSON[]) THEN
			SET Environment.JSON = OutputRoot.JSON;
		ELSE
			CREATE LASTCHILD OF Environment DOMAIN('JSON');
			SET Environment.JSON = OutputRoot.JSON;
		END IF;
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- DWH Response ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'DWH Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.JSON;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
	END;

	CREATE PROCEDURE GenerateKYCFailure() BEGIN
		DECLARE outRefer REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headRef = Environment.MQRFH2.header;
		SET headRef.Status = 'FAILED';
		SET headRef.ResponseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = 'AccountOpening_002';
		SET errorRef.message = 'No data from Econet';
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayLoad('JSON',domainDataRef,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId);
		IF EXISTS(Environment.JSON[]) THEN
			SET Environment.JSON = OutputRoot.JSON;
		ELSE
			CREATE LASTCHILD OF Environment DOMAIN('JSON');
			SET Environment.JSON = OutputRoot.JSON;
		END IF;
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Application Response ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
			-----------------------------
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.JSON;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateReqToCheckWhetherCustomerExists
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToCheckWhetherCustomerExists();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToCheckWhetherCustomerExists() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Environment.DWH.Data = InputRoot.JSON.Data;
		DECLARE host,port,baseURL,url,identificationDocNo,mobileNumber,dateOfBirth CHAR;
		SET host = '192.168.1.233';
		SET port = '8080';
		SET baseURL = '/stwbc/api/v1.0.0/stwb/customer/enquiry/';
		SET identificationDocNo = Environment.ChannelRequest.body.identificationDocNo;
		SET mobileNumber = Environment.ChannelRequest.body.mobileNumber;
		SET dateOfBirth = Environment.ChannelRequest.body.dateOfBirth;
		SET url = 'http://'||host||':'||port||baseURL||identificationDocNo||'/'||mobileNumber||'/'||dateOfBirth;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- getSTWBCustomerInformation Request ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- URL :  ------'||url) INTO rc;
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.ContentType = 'application/json';
		SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'GET';
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = url;
	END;
END MODULE;

CREATE FILTER MODULE AccountOpening_MBFlow_VerifyCustExistence
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE status CHAR Root.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		IF EXISTS(Root.JSON[]) AND status ='200' THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateReqToDWH
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE national_ID CHARACTER inRef.Data.*.body.national_Id;
		SET Environment.Variables.national_ID = national_ID;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Calling DWH Service ------') INTO rc;
		END IF;
		CALL GenerateDWHRequest(national_ID);
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateDWHRequest(IN national_ID CHAR) BEGIN
		DECLARE host,port,baseURL,url CHAR;
		SET host = '192.168.11.55';
		SET port = '18050';
		SET baseURL = '/v1/dwh/customer/';
		SET url = 'http://'||host||':'||port||baseURL||national_ID;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- Calling DWH Service ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- '||url||' ------') INTO rc;
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.ContentType = 'application/json';
		SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'GET';
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = url;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateReqToNewIndividual
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE national_ID CHARACTER inRef.Data.national_ID;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE url CHAR;
		DECLARE status CHAR InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- getCustomerInformation Response ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'getCustomerInformation Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
			-----------------------------
		END IF;
		IF EXISTS(InputRoot.JSON[]) AND status = '200' THEN
			SET Environment.Variables.IsCustomerExists = 'YES';
			SET Environment.CustomerInformation = InputRoot.JSON.Data;
		END IF;
		CALL newIndividualRequest(outRefer,url);
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayLoad('JSON',domainDataRef,encodeRef,ccidRef);
		IF EXISTS(Environment.JSON[]) THEN
			SET Environment.JSON = OutputRoot.JSON;
		ELSE
			CREATE LASTCHILD OF Environment DOMAIN('JSON');
			SET Environment.JSON = OutputRoot.JSON;
		END IF;
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- newIndividual Request ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'newIndividual Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
			-----------------------------
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.JSON = Environment.JSON;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = url;
		RETURN TRUE;
	END;

	CREATE PROCEDURE newIndividualRequest(INOUT outRefer REFERENCE,INOUT url CHAR) BEGIN
		CREATE LASTCHILD OF outRefer AS outRefer DOMAIN('JSON');
		CREATE LASTCHILD OF outRefer AS outRefer NAME('Data');
		SET outRefer.dob = COALESCE(Environment.ChannelRequest.body.dataOfBirth,Environment.DWH.Data.body.dataOfBirth,''); --'14/12/1992';--M
		SET outRefer.names = COALESCE(Environment.ChannelRequest.body.fullName,Environment.DWH.Data.body.fullName,''); --'forbes';--M
		SET outRefer.surname = COALESCE(Environment.ChannelRequest.body.firstName,Environment.DWH.Data.body.firstName,''); --'karinda';--M
		SET outRefer.national_id = COALESCE(Environment.ChannelRequest.body.nationalId,Environment.DWH.Data.body.nationalId,''); --'12345678A00';--O
		SET outRefer.gender = COALESCE(Environment.ChannelRequest.body.gender,Environment.DWH.Data.body.gender,''); --'M';--M
		SET outRefer.search_purpose = Environment.ChannelRequest.body.search_purpose; --*/'1';--M
		SET outRefer.email = Environment.ChannelRequest.body.email; --*/'padma.maggari@eidiko.com';---M
		SET Environment.MQRFH2.email = outRefer.email;
		SET outRefer.password = Environment.ChannelRequest.body.password; --*/'tawa@steward';--M
		SET Environment.MQRFH2.password = outRefer.password;
		SET outRefer.drivers_licence = Environment.ChannelRequest.body.drivers_licence; --*/'drv';--O
		SET outRefer.passport = Environment.ChannelRequest.body.passport; --*/'pp';--O
		SET outRefer.married = Environment.ChannelRequest.body.married; --*/'M';--M
		SET outRefer.nationality = COALESCE(Environment.ChannelRequest.body.nationality,Environment.DWH.Data.body.nationality,''); --*/'3';--M
		SET outRefer.streetno = COALESCE(Environment.ChannelRequest.body.addressDetails.Item[1].streetno,SUBSTRING(Environment.CustomerInformation.body.addresses.Item[1].street FROM 1 FOR 2),''); --*/'24';--M
		SET outRefer.streetname = COALESCE(Environment.ChannelRequest.body.addressDetails.Item[1].streetName,Environment.CustomerInformation.body.addresses.Item[1].street,''); --*/'harvey brown';--O
		SET outRefer.building = COALESCE(Environment.ChannelRequest.body.addressDetails.Item[1].building,Environment.CustomerInformation.body.addresses.Item[1].addressDetails.Item[1].addressDetail,''); --*/'fcb mansion';--O
		SET outRefer.suburb = COALESCE(Environment.ChannelRequest.body.addressDetails.Item[1].suburb,Environment.CustomerInformation.body.addresses.Item[1].addressDetails.Item[1].addressDetail,''); --*/'milton park';--O
		SET outRefer.pbag = COALESCE(Environment.ChannelRequest.body.addressDetails.Item[1].pbag,Environment.CustomerInformation.body.addresses.Item[1].addressDetails.Item[1].addressDetail,''); --*/'p.o. highlands';--O
		SET outRefer.city = COALESCE(Environment.ChannelRequest.body.addressDetails.Item[1].city,Environment.CustomerInformation.body.addresses.Item[1].addressCity,''); --*/'harare';--M
		SET outRefer.telephone = Environment.ChannelRequest.body.telephone; --*/'794367-9';--O
		SET outRefer.mobile = COALESCE(Environment.ChannelRequest.body.city,Environment.DWH.Data.body.mobileNumber,''); --*/'0772495573';--O
		SET outRefer.ind_email = Environment.ChannelRequest.body.email; --*/'padma.maggari@eidiko.com';--O
		SET outRefer.property_density = Environment.ChannelRequest.body.property_density; --*/'1';--M
		SET outRefer.property_status = Environment.ChannelRequest.body.property_status; --*/'2';--M
		SET outRefer.occupation_class = Environment.ChannelRequest.body.occupation_class; --*/'1';--M
		SET outRefer.employer = Environment.ChannelRequest.body.employer; --*/'fcb';--O
		SET outRefer.employer_industry = Environment.ChannelRequest.body.employer_industry; --*/'6';--M
		SET outRefer.salary_band = Environment.ChannelRequest.body.salary_band; --*/'3';--M
		SET outRefer.loan_purpose = Environment.ChannelRequest.body.loan_purpose; --*/'3';--O
		SET outRefer.loan_amount = Environment.ChannelRequest.body.loan_amount; --*/'334.45';--O
		SET url = 'https://www.fcbureau.co.zw/api/newIndividual';
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateReqToGetIndividual
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE outRefer,outRef REFERENCE TO OutputRoot;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE code CHAR COALESCE(inRef.Data.code,InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code",'');
		DECLARE status CHAR inRef.Data.individual.Report.Item[1].Status;
		DECLARE errorMsg CHAR inRef.Data.message;
		DECLARE url CHAR;
		SET Environment.MQRFH2.id = InputRoot.JSON.Data.id;
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----newIndividual Response------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'newIndividual Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
			-----------------------------
		END IF;
		IF code = '200' AND code IS NOT NULL THEN
			IF status = 'OPEN' AND status = 'PENDING' THEN
				CALL getIndividualRequest(outRef,url);
				MOVE domainDataRef TO OutputRoot.JSON;
				SET Environment.Variables.resMsg = getPayLoad('JSON',domainDataRef,encodeRef,ccidRef);
				IF EXISTS(Environment.JSON[]) THEN
					SET Environment.JSON = OutputRoot.JSON;
				ELSE
					CREATE LASTCHILD OF Environment DOMAIN('JSON');
					SET Environment.JSON = OutputRoot.JSON;
				END IF;
				SET OutputRoot.JSON = NULL;
				IF IsLogRequired = 'Y' THEN
					CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- getIndividual Request ------') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
					--------------DBLogging-------------------
					CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'getIndividual Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
					SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
					PROPAGATE TO TERMINAL 'out1';
					-----------------------------
				END IF;
				SET OutputRoot.Properties = InputRoot.Properties;
				SET OutputRoot.MQRFH2 = Environment.MQRFH2;
				SET OutputRoot.JSON = Environment.JSON;
				SET OutputLocalEnvironment.Destination.HTTP.RequestURL = url;
				RETURN TRUE;
			ELSE
				SET OutputRoot.Properties = InputRoot.Properties;
				SET OutputRoot.MQRFH2 = Environment.MQRFH2;
				SET OutputRoot.JSON = InputRoot.JSON;
				PROPAGATE TO TERMINAL 'out2';
				RETURN FALSE;
			END IF;
		ELSE
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
			SET OutputRoot.JSON = InputRoot.JSON;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
	END;
	CREATE PROCEDURE getIndividualRequest(INOUT outRef REFERENCE,INOUT url CHAR) BEGIN
		CREATE LASTCHILD OF outRef AS outRef DOMAIN('JSON');
		CREATE LASTCHILD OF outRef AS outRef NAME('Data');
		SET outRef.id = InputRoot.JSON.Data.id;
		SET outRef.email = Environment.MQRFH2.email;
		SET outRef.password = Environment.MQRFH2.password;
		SET url = 'https://www.fcbureau.co.zw/api/getIndividual';
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateReqToOpenAccount
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToOpenAccount();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToOpenAccount() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE national_ID CHARACTER inRef.request.national_Id;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE host,port,baseURL,url CHAR;
		SET host = '192.168.1.233';
		SET port = '8080';
		SET baseURL = '/stwbc/api/v1.0.0/stwb/arrangement/creation/';
		SET url = 'http://'||host||':'||port||baseURL;
		DECLARE domainDataRef REFERENCE TO InputBody;
		SET Environment.Variables.reqMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----UpdateDWH Response------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'UpdateDWH Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
			-----------------------------
		END IF;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('body');
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.header;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.body;
		CREATE LASTCHILD OF headRef NAME ('override');
		CREATE LASTCHILD OF headRef NAME ('audit');
		CREATE LASTCHILD OF headRef.override IDENTITY(JSON.Array)overrideDetails;
		--CREATE LASTCHILD OF headRef.override.overrideDetails.Item[1] NAME 'id' VALUE '';
		--CREATE LASTCHILD OF headRef.override.overrideDetails.Item[1] NAME 'description' VALUE '';
		--CREATE LASTCHILD OF headRef.override.overrideDetails.Item[1] NAME 'responseCode' VALUE '';
		--CREATE LASTCHILD OF headRef.audit NAME 'versionNumber' VALUE '';
		CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)customerIds;
		CREATE LASTCHILD OF bodyRef.customerIds.Item[1] NAME 'customerId' VALUE Environment.CustomerInformation.body.customerId;
		CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)properties;
		--CREATE LASTCHILD OF bodyRef.properties.Item[1] NAME 'propertyId' VALUE '';
		--CREATE LASTCHILD OF bodyRef.properties.Item[1] IDENTITY(JSON.Array)fields;
		--CREATE LASTCHILD OF bodyRef.properties.Item[1].fields.Item[1] NAME 'fieldName' VALUE '';
		--CREATE LASTCHILD OF bodyRef.properties.Item[1].fields.Item[1] NAME 'fieldValue' VALUE '';
		--CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)overrides;
		--CREATE LASTCHILD OF bodyRef.overrides.Item[1] NAME 'override' VALUE '';
		CREATE LASTCHILD OF bodyRef NAME 'productId' VALUE COALESCE(Environment.ChannelRequest.body.productId,Environment.CustomerInformation.body.productId,'');
		--CREATE LASTCHILD OF bodyRef NAME 'masterArrangementId' VALUE '';
		--CREATE LASTCHILD OF bodyRef NAME 'roleName' VALUE '';
		CREATE LASTCHILD OF bodyRef NAME 'currencyId' VALUE COALESCE(Environment.ChannelRequest.body.currencyId,Environment.CustomerInformation.body.productId,'');
		--CREATE LASTCHILD OF bodyRef NAME 'effectiveDate' VALUE '';
		CREATE LASTCHILD OF bodyRef NAME 'activityId' VALUE 'ACCOUNTS-NEW-ARR.CHANNEL';
		-- CREATE LASTCHILD OF bodyRef NAME 'transactionAmount' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.account IDENTITY(JSON.Array)alternateIds;
		-- CREATE LASTCHILD OF bodyRef.account.alternateIds.Item[1] NAME 'alternateIdType' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.account.alternateIds.Item[1] NAME 'alternateId' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.account NAME 'accountType' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.account NAME 'accountName' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.account NAME 'accountId' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.account NAME 'portfolioId' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.account NAME 'anniversary' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.customer IDENTITY(JSON.Array)customers;
		-- CREATE LASTCHILD OF bodyRef.customer.customers.Item[1] NAME 'customer' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.customer.customers.Item[1] NAME 'customerRole' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.customer.customers.Item[1] NAME 'taxLiabilityPercentage' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.customer.customers.Item[1] NAME 'limitAllocactionPercentage' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.customer.customers.Item[1] NAME 'GLAllocactionPercentage' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.customer NAME 'jointLiability' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.commitment NAME 'amount' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.commitment NAME 'changeAmount' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.commitment NAME 'term' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.commitment NAME 'revolving' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.commitment NAME 'updateLimit' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.commitment NAME 'amount' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement IDENTITY(JSON.Array)settlement;
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1] NAME 'payinSettlement' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1] NAME 'payoutSettlement' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1] IDENTITY(JSON.Array)reference;
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1].reference.Item[1] NAME 'ddMandateReference' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1].reference.Item[1] NAME 'payinAccount' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1].reference.Item[1] NAME 'payinBeneficiary' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1].reference.Item[1] NAME 'payinPercentage' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1].reference.Item[1] NAME 'payinAmount' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1].reference.Item[1] NAME 'payoutAccount' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1].reference.Item[1] NAME 'payoutBeneficiary' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1].reference.Item[1] NAME 'payoutPercentage' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.settlement.Item[1].reference.Item[1] NAME 'payoutAmount' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef.settlement IDENTITY(JSON.Array)assocSettlement;
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1] NAME 'payinSettlement' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1] NAME 'payinRule' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1] NAME 'payinSettlementActivity' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1] NAME 'payinRCType' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1] NAME 'payinRCCondition' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1] IDENTITY(JSON.Array)reference;
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1].reference.Item[1] NAME 'ddMandateReference' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1].reference.Item[1] NAME 'payinAccount' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1].reference.Item[1] NAME 'payinBeneficiary' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1].reference.Item[1] NAME 'payinPOProduct' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1].reference.Item[1] NAME 'payinPercentage' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1].reference.Item[1] NAME 'payinAmount' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.assocSettlement.Item[1].reference.Item[1] NAME 'payinActivity' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef.settlement IDENTITY(JSON.Array)payout;
		-- CREATE LASTCHILD OF bodyRef.settlement.payout.Item[1] NAME 'payoutSettlement' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.payout.Item[1] NAME 'payoutSettlementActivity' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.payout.Item[1] IDENTITY(JSON.Array)property;
		-- CREATE LASTCHILD OF bodyRef.settlement.payout.Item[1].property.Item[1] NAME 'payoutPropertyClass' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.payout.Item[1].property.Item[1] NAME 'payoutProperty' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.payout.Item[1].property.Item[1] NAME 'payoutAccount' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.payout.Item[1].property.Item[1] NAME 'payoutBeneficiary' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.payout.Item[1].property.Item[1] NAME 'payoutPOProduct' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.payout.Item[1].property.Item[1] NAME 'payoutPercentage' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.payout.Item[1].property.Item[1] NAME 'payoutAmount' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement.payout.Item[1].property.Item[1] NAME 'payoutActivity' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef.settlement NAME 'paymentType' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.settlement NAME 'defaultSettlementAccount' VALUE '';
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		IF EXISTS(Environment.JSON[]) THEN
			SET Environment.JSON = OutputRoot.JSON;
		ELSE
			CREATE LASTCHILD OF Environment DOMAIN ('JSON');
			SET Environment.JSON = OutputRoot.JSON;
		END IF;
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----startSTWBArrangementCreation Request------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'startSTWBArrangementCreation Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
			-----------------------------
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.JSON = Environment.JSON;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = url;
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateSuccessResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateAccountOpenedResponse();
		RETURN FALSE;
	END;

	CREATE PROCEDURE GenerateAccountOpenedResponse() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE resHeadRef REFERENCE TO InputRoot.JSON.Data.header;
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.reqMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----startSTWBArrangementCreation Response------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'startSTWBArrangementCreation Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
			-----------------------------
		END IF;
		IF resHeadRef.status = 'success' THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
			CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
			CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('body');
			DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.*.header;
			DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body;
			SET headRef.channel = Environment.ChannelRequest.header.channel;
			SET headRef.processingCode = Environment.ChannelRequest.header.processingCode;
			SET headRef.accountOpeningCheck = Environment.ChannelRequest.header.accountOpeningCheck;
			SET headRef.status = 'SUCCESS';
			SET bodyRef.customerId = Environment.NewCustomer.header.id;
			SET bodyRef = Environment.NewCustomer.body;
			SET bodyRef.code = '200';
			SET bodyRef.message = 'Account Opened Successfully';
			IF IsLogRequired = 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- CustomerExists Request ------') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			END IF;
		ELSE
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
			SET OutputRoot.JSON = InputRoot.JSON;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
	END;
END MODULE;



CREATE COMPUTE MODULE AccountOpening_MBFlow_VerifyHits
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE status CHAR inRef.Data.status;
		DECLARE code CHAR inRef.Data.code;
		DECLARE domainDataRef REFERENCE TO InputBody;
		SET Environment.Variables.reqMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----getInduvidual Response------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'getInduvidual Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out3';
			-----------------------------
		END IF;
		IF code = '200' THEN
			IF status = 'OPEN' OR status = 'PENDING' THEN
				CALL setupTimer();
				PROPAGATE TO TERMINAL 'out2';
				RETURN FALSE;
			ELSEIF status = 'GREEN' OR status = 'GOOD' THEN
				SET OutputRoot = InputRoot;
				RETURN TRUE;
			ELSEIF status = 'ADVERSE' OR status = 'PEP' OR status = 'FAIR' THEN
				SET OutputRoot = InputRoot;
				PROPAGATE TO TERMINAL 'out1';
				RETURN FALSE;
			ELSE
				SET OutputRoot.Properties = InputRoot.Properties;
				SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
				SET OutputRoot.JSON = InputRoot.JSON;
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
				PROPAGATE TO TERMINAL 'out3';
				RETURN FALSE;
			END IF;
		END IF;
	END;

	CREATE PROCEDURE setupTimer() BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.JSON;
		Set OutputLocalEnvironment.TimeoutRequest.Action = 'SET';
		Set OutputLocalEnvironment.TimeoutRequest.Identifier = 'ControlledTN';
		Set OutputLocalEnvironment.TimeoutRequest.StartDate = CURRENT_DATE;
		-- Set OutputLocalEnvironment.TimeoutRequest.StartTime = CAST(CURRENT_TIME + INTERVAL '30' MINUTE AS TIME);
		Set OutputLocalEnvironment.TimeoutRequest.StartTime = CAST(CURRENT_TIME + INTERVAL '2' MINUTE AS TIME);
		Set OutputLocalEnvironment.TimeoutRequest.Interval = CAST('5' AS INTEGER);
		-- Set OutputLocalEnvironment.TimeoutRequest.Interval = CAST('180' AS INTEGER);
		-- Set OutputLocalEnvironment.TimeoutRequest.Count=CAST(count as INTEGER);
		Set OutputLocalEnvironment.TimeoutRequest.IgnoreMissed = FALSE;
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateReqToVerifyHits
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE url CHAR;
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		SET OutputRoot.Properties = InputRoot.Properties;
		DECLARE outRef REFERENCE TO OutputRoot;
		CALL getIndividualRequest(outRef,url);
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = url;
		RETURN TRUE;
	END;
	CREATE PROCEDURE getIndividualRequest(INOUT outRef REFERENCE,INOUT url CHAR) BEGIN
		CREATE LASTCHILD OF outRef AS outRef DOMAIN('JSON');
		CREATE LASTCHILD OF outRef AS outRef NAME('Data');
		SET outRef.id = InputRoot.JSON.Data.id;
		SET outRef.email = InputRoot.JSON.Data.email;
		SET outRef.password = InputRoot.JSON.Data.password;
		SET url = 'https://www.fcbureau.co.zw/api/getIndividual';
	END;
END MODULE;

CREATE FILTER MODULE AccountOpening_MBFlow_IsCustomerExists
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF Environment.Variables.IsCustomerExists = 'YES' AND FIELDNAME(Environment.CustomerInformation) IS NOT NULL THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_CreateCustomerReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CreateCustomerReq();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CreateCustomerReq() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE national_ID CHARACTER inRef.request.national_Id;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE customerMnemonic,displayName,customerName,phoneNumber,smsNumber,email,dateOfBirth,gender,maritalstatus,street,address,addressCity,legalId,legalDocumentName,title,lastName,givenName,issueDate CHARACTER;
		DECLARE host,port,baseURL,url CHAR;
		SET host = '192.168.1.233';
		SET port = '8080';
		SET baseURL = '/stwbc/api/v1.0.0/stwb/customer/newCustomer/'; --http://192.168.1.233:8080/stwbc/api/v1.0.0/stwb/customer/newCustomer/
		--{customerMnemonic}/{displayName}/{customerName}/{phoneNumber}/{smsNumber}/{email}/{dateOfBirth}/{gender}/{maritalstatus}/{street}/{address}/{addressCity}/{legalId}/{legalDocumentName}/{title}/{lastName}/{givenName}/{issueDate}
		SET customerMnemonic = Environment.DWH.Data.body.mnemonic;
		SET displayName = Environment.DWH.Data.body.fullName;
		SET customerName = Environment.DWH.Data.body.fullName;
		SET phoneNumber = Environment.DWH.Data.body.mobileNumber;
		SET smsNumber = Environment.DWH.Data.body.mobileNumber;
		SET email = Environment.ChannelRequest.email;
		SET dateOfBirth = Environment.DWH.Data.body.dateOfBirth;
		SET gender = Environment.DWH.Data.body.gender;
		SET maritalstatus = Environment.DWH.Data.body.status;
		SET street = Environment.DWH.Data.body.address;
		SET address = Environment.DWH.Data.body.address;
		SET addressCity = Environment.DWH.Data.body.city;
		SET legalId = Environment.DWH.Data.body.nationalId;
		SET legalDocumentName = Environment.DWH.Data.body.dateOfBirth;
		SET title = Environment.DWH.Data.body.title;
		SET lastName = Environment.DWH.Data.body.lastName;
		SET givenName = Environment.DWH.Data.body.firstName;
		SET issueDate = Environment.DWH.Data.body.dateCreated;
		SET url = 'http://'||host||':'||port||baseURL||customerMnemonic||'/'||displayName||'/'||customerName||'/'||phoneNumber||'/'||smsNumber||'/'||email||'/'||dateOfBirth||'/'||gender||'/'||maritalstatus||'/'||street||'/'||address||'/'||addressCity||'/'||legalId||'/'||legalDocumentName||'/'||title||'/'||lastName||'/'||givenName||'/'||issueDate;
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.reqMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		-- CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		-- CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		-- CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('header');
		-- CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('body');
		-- DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.header;
		-- DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.body;
		-- CREATE LASTCHILD OF headRef NAME ('override');
		-- CREATE LASTCHILD OF headRef NAME ('audit');
		-- CREATE LASTCHILD OF headRef.override IDENTITY(JSON.Array)overrideDetails;
		-- CREATE LASTCHILD OF headRef.override.overrideDetails.Item[1] NAME 'id' VALUE '';
		-- CREATE LASTCHILD OF headRef.override.overrideDetails.Item[1] NAME 'description' VALUE '';
		-- CREATE LASTCHILD OF headRef.override.overrideDetails.Item[1] NAME 'responseCode' VALUE '';
		-- CREATE LASTCHILD OF headRef.audit NAME 'versionNumber' VALUE '';
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)displayNames;
		-- CREATE LASTCHILD OF bodyRef.displayNames.Item[1] NAME 'displayName' VALUE '';
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)customerNames;
		-- CREATE LASTCHILD OF bodyRef.customerNames.Item[1] NAME 'customerName' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)communicationDevices;
		-- CREATE LASTCHILD OF bodyRef.communicationDevices.Item[1] NAME 'phoneNumber' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.communicationDevices.Item[1] NAME 'smsNumber' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.communicationDevices.Item[1] NAME 'email' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.communicationDevices.Item[1] NAME 'communicationType' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.communicationDevices.Item[1] NAME 'preferredChannel' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)faxIds;
		-- CREATE LASTCHILD OF bodyRef.faxIds.Item[1] NAME 'faxId' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)officePhoneNumbers;
		-- CREATE LASTCHILD OF bodyRef.officePhoneNumbers.Item[1] NAME 'officePhoneNumber' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)streets;
		-- CREATE LASTCHILD OF bodyRef.streets.Item[1] NAME 'street' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)addresses;
		-- CREATE LASTCHILD OF bodyRef.addresses.Item[1] NAME 'address' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)addressCities;
		-- CREATE LASTCHILD OF bodyRef.addressCities.Item[1] NAME 'addressCity' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)countries;
		-- CREATE LASTCHILD OF bodyRef.countries.Item[1] NAME 'country' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)legalDetails;
		-- CREATE LASTCHILD OF bodyRef.legalDetails.Item[1] NAME 'legalId' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.legalDetails.Item[1] NAME 'legalDocumentName' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.legalDetails.Item[1] NAME 'legalHolderName' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.legalDetails.Item[1] NAME 'legalIssueAuthorisedDate' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.legalDetails.Item[1] NAME 'legalIssueDate' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.legalDetails.Item[1] NAME 'legalExpiredDate' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)otherNationalityIds;
		-- CREATE LASTCHILD OF bodyRef.otherNationalityIds.Item[1] NAME 'otherNationalityId' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)employDetails;
		-- CREATE LASTCHILD OF bodyRef.employDetails.Item[1] NAME 'employStatus' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.employDetails.Item[1] NAME 'occupation' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.employDetails.Item[1] NAME 'employJobTitle' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.employDetails.Item[1] NAME 'employerName' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.employDetails.Item[1] NAME 'employStartDate' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.employDetails.Item[1] NAME 'salaryCurrency' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.employDetails.Item[1] NAME 'salaryAmount' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)residenceDetails;
		-- CREATE LASTCHILD OF bodyRef.residenceDetails.Item[1] NAME 'residenceStatus' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.residenceDetails.Item[1] NAME 'residenceSince' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.residenceDetails.Item[1] NAME 'residenceType' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.residenceDetails.Item[1] NAME 'residenceValue' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.residenceDetails.Item[1] NAME 'residenceMortgageValue' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)relationshipDetails;
		-- CREATE LASTCHILD OF bodyRef.relationshipDetails.Item[1] NAME 'jointRelationCode' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.relationshipDetails.Item[1] NAME 'jointCustomer' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.relationshipDetails.Item[1] NAME 'reverseJointRelationCode' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.relationshipDetails.Item[1] NAME 'jointRelationRoleId' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.relationshipDetails.Item[1] NAME 'jointRelationRoleNote' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)postingRestrictIds;
		-- CREATE LASTCHILD OF bodyRef.postingRestrictIds.Item[1] NAME 'postingRestrictId' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef NAME 'language' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'dateOfBirth' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'customerStatus' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'customerMnemonic' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'nationalityId' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'residenceId' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'customerLiability' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'postCode' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'contactDate' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'introducer' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'kycRelationship' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'isKycComplete' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'kycLastReviewDate' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'kycNextSystemReviewDate' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'kycNextReviewDate' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'amlCheck' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'amlResult' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'amlLastResultDate' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'isSecureMessage' VALUE '';
		-- MOVE domainDataRef TO OutputRoot.JSON;
		-- SET Environment.Variables.resMsg = getPayLoad('JSON',domainDataRef,encodeRef,ccidRef);
		-- IF EXISTS(Environment.JSON[]) THEN
		-- SET Environment.JSON = OutputRoot.JSON;
		-- ELSE
		-- CREATE LASTCHILD OF Environment DOMAIN('JSON');
		-- SET Environment.JSON = OutputRoot.JSON;
		-- END IF;
		-- SET OutputRoot.JSON = NULL;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- CustomerExists Request ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ---URL---'||url) INTO rc;
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = url;
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateReqToLogCust
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL createSTWBProspectiveCustomer();
		RETURN TRUE;
	END;

	CREATE PROCEDURE createSTWBProspectiveCustomer() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE national_ID CHARACTER inRef.request.national_Id;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE host,port,baseURL,url,customerName,phoneNumber,emailAddress,dateOfBirth,gender,street,address,townCountry,identificationDocNo,identityDoc,country CHAR;
		SET host = '192.168.1.233';
		SET port = '8080';
		SET baseURL = '/stwbc/api/v1.0.0/stwb/customer/prospect/';
		SET customerName = Environment.DWH.Data.body.fullName;
		SET street = Environment.DWH.Data.body.address;
		SET address = Environment.DWH.Data.body.address;
		SET townCountry = Environment.DWH.Data.body.city;
		SET country = Environment.DWH.Data.body.residence;
		SET phoneNumber = Environment.DWH.Data.body.mobileNumber;
		SET emailAddress = Environment.ChannelRequest.email;
		SET gender = Environment.DWH.Data.body.gender;
		SET dateOfBirth = Environment.DWH.Data.body.dateOfBirth;
		SET identityDoc = Environment.CustomerInformation.body.Item[1].legalDoc.Item[1].legalDocumentName;
		SET identificationDocNo = Environment.DWH.Data.nationalId;
		----http://192.168.1.233:8080/stwbc/api/v1.0.0/stwb/customer/prospect/{customerName}/{street}/{address}/{townCountry}/{country}/{phoneNumber}/{emailAddress}/{gender}/{dateOfBirth}/{identityDoc}/{identificationDocNo}
		SET url = 'http://'||host||':'||port||baseURL||customerName||'/'||street||'/'||address||'/'||townCountry||'/'||country||'/'||phoneNumber||'/'||emailAddress||'/'||gender||'/'||dateOfBirth||'/'||identityDoc||'/'||identificationDocNo;
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE domainName CHAR FIELDNAME(domainDataRef);
		SET Environment.Variables.reqMsg = getPayload(domainName,domainDataRef,encodeRef,ccidRef);
		-- CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		-- CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		-- CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('header');
		-- CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('body');
		-- DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.header;
		-- DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.body;
		-- CREATE LASTCHILD OF headRef NAME ('override');
		-- CREATE LASTCHILD OF headRef NAME ('audit');
		-- CREATE LASTCHILD OF headRef.override IDENTITY(JSON.Array)overrideDetails;
		-- CREATE LASTCHILD OF headRef.override.overrideDetails.Item[1] NAME 'id' VALUE '';
		-- CREATE LASTCHILD OF headRef.override.overrideDetails.Item[1] NAME 'description' VALUE '';
		-- CREATE LASTCHILD OF headRef.override.overrideDetails.Item[1] NAME 'responseCode' VALUE '';
		-- CREATE LASTCHILD OF headRef.audit NAME 'versionNumber' VALUE '';
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)customerNames;
		-- CREATE LASTCHILD OF bodyRef.customerNames.Item[1] NAME 'customerName' VALUE '';
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)streets;
		-- CREATE LASTCHILD OF bodyRef.streets.Item[1] NAME 'street' VALUE '';
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)addresses;
		-- CREATE LASTCHILD OF bodyRef.addresses.Item[1] NAME 'address' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)townCountries;
		-- CREATE LASTCHILD OF bodyRef.townCountries.Item[1] NAME 'townCountry' VALUE '';
		--
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)postCodes;
		-- CREATE LASTCHILD OF bodyRef.postCodes.Item[1] NAME 'postCode' VALUE '';
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)countries;
		-- CREATE LASTCHILD OF bodyRef.countries.Item[1] NAME 'country' VALUE '';
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)phoneNumbers;
		-- CREATE LASTCHILD OF bodyRef.phoneNumbers.Item[1] NAME 'phoneNumber' VALUE '';
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)emails;
		-- CREATE LASTCHILD OF bodyRef.emails.Item[1] NAME 'email' VALUE '';
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)socialNetworkIds;
		-- CREATE LASTCHILD OF bodyRef.socialNetworkIds.Item[1] NAME 'socialNetworkId' VALUE '';
		-- CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)prospectLegalDetails;
		-- CREATE LASTCHILD OF bodyRef.prospectLegalDetails.Item[1] NAME 'legalId' VALUE '';
		-- CREATE LASTCHILD OF bodyRef.prospectLegalDetails.Item[1] NAME 'legalDocumentName' VALUE '';
		-- CREATE LASTCHILD OF bodyRef NAME 'personEntity' VALUE '';
		-- MOVE domainDataRef TO OutputRoot.JSON;
		-- SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		-- IF EXISTS(Environment.JSON[]) THEN
		-- SET Environment.JSON = OutputRoot.JSON;
		-- ELSE
		-- CREATE LASTCHILD OF Environment DOMAIN('JSON');
		-- SET Environment.JSON = OutputRoot.JSON;
		-- END IF;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ----- LogCustomer Request ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' ---URL---'||url) INTO rc;
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = url;
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpening_MBFlow_UpdateCustomerDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL UpdateCustomerDetails();
		RETURN FALSE;
	END;

	CREATE PROCEDURE UpdateCustomerDetails() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE headRef REFERENCE TO InputRoot.JSON.Data.header;
		DECLARE bodyRef REFERENCE TO InputRoot.JSON.Data.body;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		SET Environment.Variables.reqMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET Environment.NewCustomer = InputRoot.JSON;
		------------DBLogging-------------------
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----createSTWBCustomer Response------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'createSTWBCustomer Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		---------------------------
		IF headRef.status = 'success' THEN
			DECLARE host,port,baseURL,url CHAR;
			SET host = '192.168.11.55';
			SET port = '18050';
			SET baseURL = '/v1/dwh/customer';
			SET url = 'http://'||host||':'||port||baseURL;
			CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
			CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
			DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
			CREATE LASTCHILD OF outRef NAME ('nationalId') VALUE Environment.ChannelRequest.body.nationalId;
			CREATE LASTCHILD OF outRef NAME ('msisdn') VALUE Environment.ChannelRequest.body.msisdn;
			CREATE LASTCHILD OF outRef NAME ('firstName') VALUE Environment.ChannelRequest.body.firstName;
			CREATE LASTCHILD OF outRef NAME ('lastName') VALUE Environment.ChannelRequest.body.lastName;
			CREATE LASTCHILD OF outRef NAME ('dateOfBirth') VALUE Environment.ChannelRequest.body.dateOfBirth;
			CREATE LASTCHILD OF outRef NAME ('dateCreated') VALUE Environment.ChannelRequest.body.dateCreated;
			CREATE LASTCHILD OF outRef NAME ('accountNbr') VALUE Environment.ChannelRequest.body.accountNbr;
			CREATE LASTCHILD OF outRef NAME ('mnemonic') VALUE Environment.ChannelRequest.body.mnemonic;
			CREATE LASTCHILD OF outRef NAME ('fullName') VALUE Environment.ChannelRequest.body.fullName;
			CREATE LASTCHILD OF outRef NAME ('gender') VALUE Environment.ChannelRequest.body.gender;
			CREATE LASTCHILD OF outRef NAME ('title') VALUE Environment.ChannelRequest.body.title;
			CREATE LASTCHILD OF outRef NAME ('status') VALUE Environment.ChannelRequest.body.status;
			CREATE LASTCHILD OF outRef NAME ('mobileNumber') VALUE Environment.ChannelRequest.body.mobileNumber;
			CREATE LASTCHILD OF outRef NAME ('address') VALUE Environment.ChannelRequest.body.address;
			CREATE LASTCHILD OF outRef NAME ('city') VALUE Environment.ChannelRequest.body.city;
			CREATE LASTCHILD OF outRef NAME ('sector') VALUE Environment.ChannelRequest.body.sector;
			CREATE LASTCHILD OF outRef NAME ('industry') VALUE Environment.ChannelRequest.body.industry;
			CREATE LASTCHILD OF outRef NAME ('nationality') VALUE Environment.ChannelRequest.body.nationality;
			CREATE LASTCHILD OF outRef NAME ('residence') VALUE Environment.ChannelRequest.body.residence;
			CREATE LASTCHILD OF outRef NAME ('customerName') VALUE Environment.ChannelRequest.body.customerName;
			CREATE LASTCHILD OF outRef NAME ('loanProfiles') VALUE Environment.ChannelRequest.body.loanProfiles;

			MOVE domainDataRef TO OutputRoot.JSON;
			SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
			IF EXISTS(Environment.JSON[]) THEN
				SET Environment.JSON = OutputRoot.JSON;
			ELSE
				CREATE LASTCHILD OF Environment DOMAIN('JSON');
				SET Environment.JSON = OutputRoot.JSON;
			END IF;
			SET OutputRoot.JSON = NULL;
			------------DBLogging-------------------
			IF IsLogRequired = 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----UpdateDWH Request------') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
				CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'UpdateDWH Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
				PROPAGATE TO TERMINAL 'out1';
			END IF;
			---------------------------
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.Properties.ContentType = 'application/json';
			SET OutputRoot.JSON = Environment.JSON;
			SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'POST';
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = url;
			PROPAGATE TO TERMINAL 'out';
		ELSE
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
			SET OutputRoot.JSON = InputRoot.JSON;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateFailureResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateFailureResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateFailureResponse() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE national_ID CHARACTER inRef.request.national_Id;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('body');
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body;
		SET headRef.channel = Environment.ChannelRequest.channel;
		SET headRef.processingCode = Environment.ChannelRequest.processingCode;
		SET headRef.accountOpeningCheck = Environment.ChannelRequest.accountOpeningCheck;
		SET headRef.status = 'FAILED';
		SET bodyRef.source = 'ESB';
		SET bodyRef.code = 'ESB_ACC00';
		SET bodyRef.applicationName = ApplicationLabel;
		SET bodyRef.message = 'Unable to open account';
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		IF EXISTS(Environment.JSON[]) THEN
			SET Environment.JSON = OutputRoot.JSON;
		ELSE
			CREATE LASTCHILD OF Environment DOMAIN('JSON');
			SET Environment.JSON = OutputRoot.JSON;
		END IF;
		SET OutputRoot.JSON = NULL;
		------------DBLogging-------------------
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Application Response------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		---------------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		SET OutputRoot.JSON = Environment.JSON;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateUnknownResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateUnknownResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateUnknownResponse() BEGIN
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headerRef = Environment.MQRFH2.header;
		SET headerRef.status = 'FAILED';
		SET headerRef.responseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = 'AccountOpening_001';
		SET errorRef.message = 'Unknown Request';
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		IF EXISTS(Environment.JSON[]) THEN
			SET Environment.JSON = OutputRoot.JSON;
		ELSE
			CREATE LASTCHILD OF Environment DOMAIN('JSON');
			SET Environment.JSON = OutputRoot.JSON;
		END IF;
		SET OutputRoot.JSON = NULL;
		------------DBLogging-------------------
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Application Response------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		---------------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		SET OutputRoot.JSON = Environment.JSON;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateExceptionResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateExceptionResponse() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'T24ServiceCall') THEN
			SET errMsg = 'T24 Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'FCBServiceCall') THEN
			SET errMsg = 'FCB Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'T24ClientReceiveData,Exception whilst parsing') THEN
			SET errMsg = 'No Response from T24 Server';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientReceiveData,Exception whilst parsing') THEN
			SET errMsg = 'No Response from Postilion Server';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'AccountOpening';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'AccountOpening');
		SET Environment.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headerRef = Environment.Variables.header;
		SET headerRef.status = 'FAILED';
		SET headerRef.responseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = Environment.UserDefinedErrorCodes.AccountOpening.ErrorCode;
		SET errorRef.message = errMsg;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.UserDefinedErrorCodes.AccountOpening.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
		----------------------------------
	END;
END MODULE;