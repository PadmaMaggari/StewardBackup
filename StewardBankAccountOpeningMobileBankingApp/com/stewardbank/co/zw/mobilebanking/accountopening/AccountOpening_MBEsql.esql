BROKER SCHEMA com.stewardbank.co.zw.mobilebanking.accountopening
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE ALL_SB_HTTP_RES EXTERNAL CHAR '';
DECLARE IsLogRequired EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE TABLENAME EXTERNAL CHARACTER '';
DECLARE rc BOOLEAN FALSE;
CREATE COMPUTE MODULE AccountOpening_MBFlow_VerifyRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL VerifyRequest();
		RETURN TRUE;
	END;
	CREATE PROCEDURE VerifyRequest() BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot;
		IF EXISTS(InputRoot.JSON[]) THEN
			MOVE inRef TO InputRoot.JSON.Data;
			SET Environment.JSON = InputRoot.JSON;
		ELSEIF EXISTS(InputRoot.XMLNSC[]) THEN
			MOVE inRef TO InputRoot.XMLNSC.request;
			SET Environment.Variables.InputRequest = InputRoot.XMLNSC;
			SET Environment.XMLNSC = InputRoot.XMLNSC;
		END IF;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputBody;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE accountOpeningCheck CHAR COALESCE(inRef.accountOpeningCheck,inRef.header.accountOpeningCheck,inRef.*.header.accountOpeningCheck,'');
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Environment.MQRFH2.ChannelRequest = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET Environment.Variables.reqMsg = Environment.MQRFH2.ChannelRequest;
		------------DBLogging-------------------
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Application Request------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		---------------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		IF EXISTS(InputRoot.JSON[]) THEN
			SET OutputRoot.JSON = InputRoot.JSON;
		ELSEIF EXISTS(InputRoot.XMLNSC[]) THEN
			SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		END IF;
		IF accountOpeningCheck = 'KYC_CHECK' THEN
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'KYC';
		ELSEIF accountOpeningCheck = 'FCM_CHECK' THEN
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'FCM';
		ELSEIF accountOpeningCheck = 'Zss/Postilion Update' THEN
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'UPDATE';
		ELSE
			SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = 'Unknown';
		END IF;
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateDWHResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateDWHResponse();
		RETURN TRUE;
	END;


	CREATE PROCEDURE GenerateDWHResponse() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateReqToCheckWhetherCustomerExists
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToCheckWhetherCustomerExists();
		RETURN TRUE;
	END;


	CREATE PROCEDURE GenerateReqToCheckWhetherCustomerExists() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateReqToScreenCustomer
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToScreenCustomer();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToScreenCustomer() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateReqToOpenAccount
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToOpenAccount();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToOpenAccount() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateSuccessResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateAccountOpenedResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateAccountOpenedResponse() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE FILTER MODULE AccountOpening_MBFlow_VerifyHits
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;

END MODULE; 

CREATE FILTER MODULE AccountOpening_MBFlow_IsCustomerExists
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;

END MODULE; 

CREATE COMPUTE MODULE AccountOpening_MBFlow_CreateCustomerReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateUnknownResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateUnknownResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateUnknownResponse() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE AccountOpening_MBFlow_GenerateExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateExceptionResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateExceptionResponse() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'T24ServiceCall') THEN
			SET errMsg = 'T24 Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'FCBServiceCall') THEN
			SET errMsg = 'FCB Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'T24ClientReceiveData,Exception whilst parsing') THEN
			SET errMsg = 'No Response from T24 Server';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientReceiveData,Exception whilst parsing') THEN
			SET errMsg = 'No Response from Postilion Server';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'AccountOpening';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'AccountOpening');
		SET Environment.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headerRef = Environment.Variables.header;
		SET headerRef.status = 'FAILED';
		SET headerRef.responseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = Environment.UserDefinedErrorCodes.AccountOpening.ErrorCode;
		SET errorRef.message = errMsg;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.UserDefinedErrorCodes.AccountOpening.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
		----------------------------------
	END;
END MODULE;