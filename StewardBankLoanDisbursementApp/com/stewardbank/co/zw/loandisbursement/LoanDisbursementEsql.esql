BROKER SCHEMA com.stewardbank.co.zw.loandisbursement

PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';
DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER'';
DECLARE ZSS_Q EXTERNAL CHARACTER'';
DECLARE T24_Q EXTERNAL CHARACTER'';
CREATE COMPUTE MODULE LoanDisbursementFlow_AccountAvalilabilityCheck
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL AccountAvalilabilityCheck();
		RETURN FALSE;
	END;

	
	CREATE PROCEDURE AccountAvalilabilityCheck() BEGIN
				SET Environment.MQRFH2= InputRoot.MQRFH2;
		SET Environment.Variable.data = InputRoot.JSON.Data;
		DECLARE reqMsg,procCodeData,QueueName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE Response ROW;
		DECLARE sql CHARACTER '';
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.JSON.Data,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		DECLARE outRefer REFERENCE TO OutputRoot;
		/*=================== CALLING DB RAW AUDIT LOGGING ==============*/
--		IF IsLogRequired LIKE 'Y' THEN
--			CALL DBLogging(InputRoot.MQRFH2.RequestIdentifier,reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
--			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
--			PROPAGATE TO TERMINAL 'out';
--		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END ==============*/
		/*=================== CALLING LOG4j LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
--		IF IsLogRequired LIKE 'Y' THEN
--			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','..............Start T24 or Zss logging...........') INTO rc;
--			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','Incoming Request::') INTO rc;
--			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',reqMsg) INTO rc;
--		END IF;
		/*=================== CALLING LOG4J LOGGING END ==============*/
		/* ============== CALL ISAVE DB LOOKUP ===================== */
		SET sql='SELECT * FROM ISAVE_CARD_MAPPING WHERE ACCOUNT_ID=?';
		DECLARE CreditAccount CHARACTER InputRoot.JSON.Data.creditAccountNumber; 

		SET Response.accountEnquiry[]=PASSTHRU(sql VALUES(CreditAccount));
		IF EXISTS (Response.accountEnquiry.*[]) OR STARTSWITH(CreditAccount,'2') THEN

			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','..............Start Initializing ZSS logging...........') INTO rc; 
				CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','..............Sending Data To Zss ...........') INTO rc; 
				CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','ZSS Request ::') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',reqMsg) INTO rc; 
			END IF; 
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(InputRoot.MQRFH2.RequestIdentifier,reqMsg,'Application ZSS Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
				PROPAGATE TO TERMINAL 'out';
			END IF;
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
			SET OutputRoot.JSON.Data = Environment.Variable.data;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ZSS_Q;
			PROPAGATE TO TERMINAL 'out';

		ELSE

			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','..............Start Initializing T24 logging...........') INTO rc;  
				CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','..............Sending Data To T24 ...........') INTO rc; 
				CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','T24 Request ::') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',reqMsg) INTO rc;
			END IF;
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(InputRoot.MQRFH2.RequestIdentifier,reqMsg,'Application T24 Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
				PROPAGATE TO TERMINAL 'out';
			END IF;
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
			SET OutputRoot.JSON.Data = Environment.Variable.data;
		
		     
		    

		     
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = T24_Q;
			PROPAGATE TO TERMINAL 'out';
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE LoanDisbursementFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL BuildException();
		RETURN TRUE;
	END;

	

	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'T24ClientOut,connection refused') THEN
			SET errMsg = 'T24 Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientCall,connection refused') THEN
			SET errMsg = 'Postilion Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'T24ClientReceiveData,Exception whilst parsing') THEN 
			SET errMsg = 'No Response from T24 Server';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientReceiveData,Exception whilst parsing') THEN 
			SET errMsg = 'No Response from Postilion Server';	
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'LOAN_DISBURSEMENT';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'LOAN_DISBURSEMENT');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		MOVE outRef TO OutputRoot.JSON.Data;
		SET outRef.statusCode = '000';
		SET outRef.status = 'FAILED';
		SET outRef.message = errMsg;
		SET outRef.responseBody.source = 'ESB';
		SET outRef.responseBody.applicationName = ApplicationLabel;
		SET outRef.responseBody.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.LOAN_DISBURSEMENT.ErrorCode;
 		SET OutputRoot.XMLNSC = NULL;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ALL_SB_HTTP_RES';   
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		--CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.LOAN_DISBURSEMENT.ErrorCode,outRefer);
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variable.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.LOAN_DISBURSEMENT.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;
		----------------------------------
		END;
END MODULE;
