





BROKER SCHEMA com.stewardbank.co.zw.loandisbursement

PATH com.stewardbank.co.zw.common.esql;
CREATE COMPUTE MODULE LoanDisbursementZSSFlow_RequestToZss
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
	DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';
	DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
	DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
	DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
	DECLARE IsLogRequired EXTERNAL CHARACTER'';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL RequestToZss();
		RETURN FALSE;
	END;

	CREATE PROCEDURE RequestToZss() BEGIN
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		DECLARE reqMsg,procCodeData,QueueName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE col CHARACTER ':';
		DECLARE comm CHARACTER ',';
		DECLARE channel CHARACTER 'Channel';
		DECLARE destinationPhone CHARACTER 'DestinationPhone';
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.JSON.Data,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.Variable.reqMsg = reqMsg;
		DECLARE outRefer REFERENCE TO OutputRoot;
		/*=================== CALLING DB RAW AUDIT LOGGING ==============*/
		-- IF IsLogRequired LIKE 'Y' THEN
		-- CALL DBLogging(InputRoot.MQRFH2.RequestIdentifier,Environment.Variable.reqMsg,'ZSS Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		-- SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		-- PROPAGATE TO TERMINAL 'out1';
		-- END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END ==============*/
		/*=================== CALLING LOG4j LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','..............Start LoanDisbursmentZSSCall logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','Incoming Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',reqMsg) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
		SET OutputRoot.MQRFH2.usr = Environment.Variables.usr;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		SET outRef.MTI_Version = 0;
		SET outRef.MTI_MessageClass = 2;
		SET outRef.MTI_MessageFunction = 0;
		SET outRef.MTI_MessageOrigin = 0;
		SET outRef.ProcessingCode_003 = inRef.JSON.Data.processingCode;
		SET outRef.AmountTransaction_004 = CAST(inRef.JSON.Data.debitAmount AS CHARACTER);
		SET outRef.AccountIdentification1_102 = inRef.JSON.Data.debitAccountNumber;
		SET outRef.AccountIdentification2_103 = inRef.JSON.Data.creditAccountNumber;
		SET outRef.ReservedPrivate_127 = '000000';
		SET outRef.StructuredDataPostilionPrivate_127_22 = channel||col||inRef.JSON.Data.channel||comm||destinationPhone||col||inRef.JSON.Data.mobileNumber;
		CALL UpdateMsgWithAsciiBitMap(outRef);
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;
		SET Environment.Variables.resMsg = getPayLoad(FIELDNAME(OutputRoot.DFDL),outDomainDataRef,encodeRef,ccsid);
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET OutputRoot.DFDL = NULL;
		/*=================== CALLING LOG4J LOGGING ==============*/
		DECLARE logRef REFERENCE TO Environment.dfdlData;
		DECLARE jsonRef REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot AS jsonRef DOMAIN('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON AS jsonRef NAME ('Data');
		--CALL JSONLogMessage(logRef,jsonRef);
		SET jsonRef = logRef;
		SET Environment.ZssJsonreqMsg = getPayLoad('JSON',jsonRef,encodeRef,ccsid);
		SET OutputRoot.JSON = NULL;		


		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','Generate Req in ZSS::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.ZssJsonreqMsg) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END ==============*/
		/*=================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(InputRoot.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application ZSS Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;

		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;
CREATE COMPUTE MODULE LoanDisbursementZSSFlow_GenereateResponseToChannel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenereateResponseToChannel();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenereateResponseToChannel() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.DFDL;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,inRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;

		DECLARE logRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		DECLARE jsonRef REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot AS jsonRef DOMAIN('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON AS jsonRef NAME ('Data');
		--CALL JSONLogMessage(logRef,jsonRef);
		SET jsonRef = logRef;
		SET Environment.ZssJsonresMsg = getPayLoad('JSON',jsonRef,encodeRef,ccidRef);
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired LIKE 'Y' THEN
			-- --------------DBLogging-------------------
			-- CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Postilion Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			-- SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			-- PROPAGATE TO TERMINAL 'out';
			-- -----------------------------
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','ZSS Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.ZssJsonresMsg) INTO rc;
		END IF;
		--field to field mapping
		--CALL ISOToJSONMapping(inRef,outRef);
		IF EXISTS(inRef.*.SecondaryBitmap[]) THEN
			MOVE inRef TO InputRoot.DFDL.*.SecondaryBitmap;
			MOVE inRef NEXTSIBLING;
		ELSEIF EXISTS(inRef.*.PrimaryBitmap[]) THEN
			MOVE inRef TO InputRoot.DFDL.*.PrimaryBitmap;
			MOVE inRef NEXTSIBLING;
		ELSE
			MOVE inRef TO InputRoot.DFDL.*.PrimaryAccountNumber_002;
		END IF;

		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('LoanDisbursmentZSS');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('body');
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body;
		--SET headRef = Environment.header;
		SET headRef.channel = '*236#';
		SET headRef.processingCode = '110000';
		SET headRef.status = 'SUCCESS';
		SET headRef.responseCode = '200';
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		CALL ISOToJSONMapping(inRef,bodyRef);
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.JSON;
		DECLARE OutRefer REFERENCE TO OutputRoot.JSON.Data;
		DECLARE envref REFERENCE TO Environment;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'JSON';
		CREATE LASTCHILD OF Environment.JSON AS envref NAME 'Data';
		SET envref = OutRefer;
		-- SET OutputRoot = NULL;
		SET domainName = FIELDNAME(outDomainDataRef);
		SET Environment.Variables.resMsg = getPayLoad(domainName,outDomainDataRef,encodeRef,ccidRef);
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired LIKE 'Y' THEN
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application ZSS  Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out';
			-----------------------------
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','Application Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.Variables.resMsg) INTO rc;
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON.Data = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ALL_SB_HTTP_RES';
	END;
END MODULE;
CREATE COMPUTE MODULE LoanDisbursementZSSFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildException();
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'SocketException') THEN
			SET errMsg = 'No Response from T24 Server';
		END IF;

		IF CONTAINS(excpRef.excpText,'RecoverableException') THEN
			SET errMsg = 'No Response from T24 Server';
		END IF;
		IF CONTAINS(excpRef.excpText,'connection refused') THEN
			SET errMsg = 'No Response from T24 Server';
		END IF;
		IF CONTAINS(excpRef.excpText,'Exception whilst parsing') THEN
			SET errMsg = 'No Response from T24 Server';
		END IF;
		IF CONTAINS(excpRef.excpText,'ParserException') THEN
			SET errMsg = 'No Response from T24 Server';
		END IF;
		IF CONTAINS(excpRef.excpText,'WebService Request Exception') THEN
			SET errMsg = 'WebService Request Exception errors have occurred';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'LOAN_DISBURSEMENT';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'LOAN_DISBURSEMENT');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('LOAN_DISBURSEMENT');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headerRef.channel = '*236#';
		SET headerRef.processingCode = '110000';
		SET headerRef.status = 'FAILED';
		SET headerRef.responseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.LOAN_DISBURSEMENT.ErrorCode;
		SET errorRef.message = errMsg;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ALL_SB_HTTP_RES';
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variable.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.LOAN_DISBURSEMENT.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;


	END;
END MODULE;