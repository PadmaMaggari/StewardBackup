

BROKER SCHEMA com.stewardbank.co.zw.loandisbursement

PATH com.stewardbank.co.zw.common.esql;
CREATE COMPUTE MODULE LoanDisbursementZSSFlow_RequestToZss
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
	DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';
	DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
	DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
	DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
	DECLARE IsLogRequired EXTERNAL CHARACTER'';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL RequestToZss();
		RETURN FALSE;
	END;

	CREATE PROCEDURE RequestToZss() BEGIN
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		DECLARE reqMsg,procCodeData,QueueName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE col CHARACTER ':';
		DECLARE comm CHARACTER ',';
		DECLARE channel CHARACTER 'Channel';
		DECLARE destinationPhone CHARACTER 'DestinationPhone';
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE Field11,Field37,Field7,timee,stri,Field12,Field13,randomNumber CHARACTER;
		DECLARE Field11Length CHARACTER '6';
		DECLARE Field37Length CHARACTER '12';
		SET timee = dbLoggingTime;
		SET stri = SUBSTRING(timee FROM 17 FOR 2)||SUBSTRING(timee FROM 20 FOR 2)||SUBSTRING(timee FROM 23 FOR 2)||SUBSTRING(timee FROM 26 FOR 2)||SUBSTRING(timee FROM 29 FOR 2);
		SET Field11 = GenerateRandomIntegerNumber(Field11Length);
		SET Field37 = GenerateRandomIntegerNumber(Field37Length);

		SET Field7 = CAST(stri AS CHARACTER FORMAT 'MMDDhhmmss');
		SET Field13 = CAST(stri AS CHARACTER FORMAT 'MMDD');
		DECLARE trnTime TIMESTAMP CURRENT_GMTTIMESTAMP;
		SET Field12 = CAST(trnTime AS CHARACTER FORMAT 'HHmmss');
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.JSON.Data,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.Variable.reqMsg = reqMsg;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE field4 DECIMAL;
		SET field4 = inRef.JSON.Data.debitAmount;
		SET field4 = field4 * 100 ;
		DECLARE inField4 CHARACTER;
		SET inField4 = field4;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','.............. Application ZSS Request ...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','Incoming Request ::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',reqMsg) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
		SET OutputRoot.MQRFH2.usr = Environment.Variables.usr;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		SET outRef.MTI_Version = 0;
		SET outRef.MTI_MessageClass = 2;
		SET outRef.MTI_MessageFunction = 0;
		SET outRef.MTI_MessageOrigin = 0;
		--SET outRef.ProcessingCode_003 = inRef.JSON.Data.processingCode;
		SET outRef.ProcessingCode_003 = '400000';
		IF CONTAINS(inField4,'.') THEN /* For Hanlding the cent format Amount data*/
		SET inField4 = SUBSTRING(inField4 BEFORE '.');
		SET outRef.AmountTransaction_004 = CAST(inField4 AS DECIMAL); --
	ELSE
		SET outRef.AmountTransaction_004 = field4;
	END IF;
	SET outRef.TransmissionDatetime_007 = Field7; --
	SET outRef.SystemsTraceAuditNumber_011 = Field11;
	SET outRef.TimeLocalTransaction_012 = Field12;
	SET outRef.DateLocalTransaction_013 = SUBSTRING(Field13 FROM 1 FOR 4);
	SET outRef.DateSettlement_015 = SUBSTRING(Field13 FROM 1 FOR 4);
	SET outRef.MerchantType_018 = '6011';
	SET outRef.PointOfServiceEntryMode_022 = '001';
	SET outRef.PointOfServiceConditionCode_025 = '27';
	SET outRef.PointOfServiceCaptureCode_026 = '12';
	SET outRef.AmountTransactionFee_028 = 'C00000000';
	SET outRef.AmountTransactionProcessingFee_030 = 'C00000000';
	SET outRef.AcquiringInstitutionIdentificationCode_032 = '502195';
	SET outRef.ForwardingInstitutionIdentificationCode_033 = '502195';
	SET outRef.RetrievalReferenceNumber_037 = Field37;
	SET outRef.CardAcceptorTerminalIdentification_041 = 'ISAVE263';
	SET outRef.CardAcceptorIdentificationCode_042 = '26377-SBZWISAVE';
	SET outRef.CardAcceptorNameLocation_043 = 'salary                                  ';
	SET outRef.CurrencyCodeTransaction_049 = '932';
	SET outRef.ReservedNational_059 = '0116742676';
	SET outRef.ReceivingInstitutionIdentificationCode_100 = '502195';
	SET outRef.AccountIdentification1_102 = inRef.JSON.Data.debitAccountNumber;
	SET outRef.AccountIdentification2_103 = inRef.JSON.Data.creditAccountNumber;
	SET outRef.ReservedPrivate_123 = '100450100130021';
	SET outRef.ReservedPrivate_127 = '000000';
	SET outRef.SwitchKeyPostilionPrivate_127_2 = '00000000000000000000000359448063'; --
	SET outRef.AdditionalNodeDataPostilionPrivate_127_9 = '20200911'; --
	SET outRef.OriginalKeyPostilionPrivate_127_12 = '1028934641'; --
	SET outRef.StructuredDataPostilionPrivate_127_22 = channel||col||inRef.JSON.Data.channel||comm||destinationPhone||col||inRef.JSON.Data.mobileNumber;
	SET outRef.ExtendedTransactionTypePostilionPrivate_127_33 = '9040'; --
	CALL UpdateMsgWithAsciiBitMap(outRef);
	DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;
	SET Environment.Variables.resMsg = getPayLoad(FIELDNAME(OutputRoot.DFDL),outDomainDataRef,encodeRef,ccsid);
	SET Environment.dfdlData = OutputRoot.DFDL;
	SET OutputRoot.DFDL = NULL;
	/*=================== CALLING LOG4J LOGGING ==============*/
	DECLARE logRef REFERENCE TO Environment.dfdlData;
	DECLARE jsonRef REFERENCE TO OutputRoot;
	CREATE LASTCHILD OF OutputRoot AS jsonRef DOMAIN('JSON');
	CREATE LASTCHILD OF OutputRoot.JSON AS jsonRef NAME ('Data');
	--CALL JSONLogMessage(logRef,jsonRef);
	SET jsonRef = logRef;
	SET Environment.ZssJsonreqMsg = getPayLoad('JSON',jsonRef,encodeRef,ccsid);
	SET OutputRoot.JSON = NULL;
	IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','Generate Req to ZSS::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.Variables.resMsg) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.ZssJsonreqMsg) INTO rc;
	END IF;
	/*=================== CALLING LOG4J LOGGING END ==============*/
	/*=================== CALLING DB RAW AUDIT LOGGING ==============*/
	IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(InputRoot.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'ZSS Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
	END IF;
	/*=================== CALLING DB RAW AUDIT LOGGING END ==============*/
	SET OutputRoot.Properties = InputRoot.Properties;
	SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
	SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
	SET OutputRoot.MQMD = InputRoot.MQMD;
	SET OutputRoot.MQRFH2 = Environment.MQRFH2;
	SET OutputRoot.DFDL = Environment.dfdlData;

	PROPAGATE TO TERMINAL 'out';
END;
END MODULE;
CREATE COMPUTE MODULE LoanDisbursementZSSFlow_GenereateResponseToChannel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenereateResponseToChannel();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenereateResponseToChannel() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.DFDL;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,inRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;

		DECLARE logRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		DECLARE jsonRef REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot AS jsonRef DOMAIN('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON AS jsonRef NAME ('Data');
		--CALL JSONLogMessage(logRef,jsonRef);
		SET jsonRef = logRef;
		SET Environment.ZssJsonresMsg = getPayLoad('JSON',jsonRef,encodeRef,ccidRef);
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired LIKE 'Y' THEN
			-- --------------DBLogging-------------------
			-- CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'ZSS Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			-- SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			-- PROPAGATE TO TERMINAL 'out';
			-- -- -----------------------------
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','ZSS Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.ZssJsonresMsg) INTO rc;
		END IF;
		--field to field mapping
		--CALL ISOToJSONMapping(inRef,outRef);
		IF EXISTS(inRef.*.SecondaryBitmap[]) THEN
			MOVE inRef TO InputRoot.DFDL.*.SecondaryBitmap;
			MOVE inRef NEXTSIBLING;
		ELSEIF EXISTS(inRef.*.PrimaryBitmap[]) THEN
			MOVE inRef TO InputRoot.DFDL.*.PrimaryBitmap;
			MOVE inRef NEXTSIBLING;
		ELSE
			MOVE inRef TO InputRoot.DFDL.*.PrimaryAccountNumber_002;
		END IF;

		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('LoanDisbursment');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('body');
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body;
		DECLARE responceCode CHARACTER InputRoot.DFDL.ISO8583_1987.ResponseCode_039;
		IF responceCode LIKE '00' THEN
			--SET headRef = Environment.header;
			SET headRef.channel = '*236#';
			SET headRef.processingCode = '110000';
			SET headRef.ResponseFrom = 'ZSS';
			SET headRef.status = 'SUCCESS';
			SET headRef.responseCode = responceCode;
		ELSE
			SET headRef.channel = '*236#';
			SET headRef.processingCode = '110000';
			SET headRef.ResponseFrom = 'ZSS';
			SET headRef.status = 'FAILURE';
			SET headRef.responseCode = responceCode;
		END IF;
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		CALL ISOToJSONMapping(inRef,bodyRef);
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.JSON;
		DECLARE OutRefer REFERENCE TO OutputRoot.JSON.Data;
		DECLARE envref REFERENCE TO Environment;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'JSON';
		CREATE LASTCHILD OF Environment.JSON AS envref NAME 'Data';
		SET envref = OutRefer;
		-- SET OutputRoot = NULL;
		SET domainName = FIELDNAME(outDomainDataRef);
		SET Environment.Variables.resMsg = getPayLoad(domainName,outDomainDataRef,encodeRef,ccidRef);
		SET OutputRoot.JSON = NULL;
		IF IsLogRequired LIKE 'Y' THEN
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application ZSS  Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out';
			-----------------------------
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','Application Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.Variables.resMsg) INTO rc;
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON.Data = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ALL_SB_HTTP_RES';
	END;
END MODULE;
CREATE COMPUTE MODULE LoanDisbursementZSSFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildException();
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
--		IF CONTAINS(excpRef.excpText,'SocketException') THEN
--			SET errMsg = 'No Response from ZSS Server';
--		END IF;
--
--		IF CONTAINS(excpRef.excpText,'RecoverableException') THEN
--			SET errMsg = 'No Response from ZSS Server';
--		END IF;
--		IF CONTAINS(excpRef.excpText,'connection refused') THEN
--			SET errMsg = 'No Response from ZSS Server';
--		END IF;
--		IF CONTAINS(excpRef.excpText,'Exception whilst parsing') THEN
--			SET errMsg = 'No Response from ZSS Server';
--		END IF;
--		IF CONTAINS(excpRef.excpText,'ParserException') THEN
--			SET errMsg = 'No Response from ZSS Server';
--		END IF;
--		IF CONTAINS(excpRef.excpText,'WebService Request Exception') THEN
--			SET errMsg = 'WebService Request Exception errors have occurred';
--		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'LoanDisbursment';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'LoanDisbursment');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('LoanDisbursment');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headerRef.channel = '*236#';
		SET headerRef.processingCode = '110000';
		SET headerRef.ResponseFrom = 'ZSS';
		SET headerRef.status = 'FAILED';
		SET headerRef.responseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.LoanDisbursment.ErrorCode;
		SET errorRef.errorType = Environment.Variables.UserDefinedErrorCodes.LoanDisbursment.ErrorType;
		SET errorRef.message = COALESCE(errMsg,Environment.Variables.UserDefinedErrorCodes.LoanDisbursment.ActualDesc,'');
--		SET errorRef.message = errMsg;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ALL_SB_HTTP_RES';
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variable.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.LoanDisbursment.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;


	END;
END MODULE;