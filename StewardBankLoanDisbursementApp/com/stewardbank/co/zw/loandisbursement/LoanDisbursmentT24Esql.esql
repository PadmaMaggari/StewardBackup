



BROKER SCHEMA com.stewardbank.co.zw.loandisbursement
PATH com.stewardbank.co.zw.common.esql;
CREATE COMPUTE MODULE LoanDisbursmentT24Flow_RequestToT24
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
	DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';
	DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
	DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
	DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
	DECLARE IsLogRequired EXTERNAL CHARACTER'';
	DECLARE URL,DisburseURL EXTERNAL CHARACTER'';
	DECLARE ALL_SB_HTTP_RES EXTERNAL CHARACTER'';
	DECLARE DateURL EXTERNAL CHARACTER'';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL RequestToT24();
		RETURN FALSE;
	END;
	CREATE PROCEDURE RequestToT24() BEGIN
		--SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE reqMsg CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO Environment.Variables.csvData;
		SET OutputRoot.JSON.Data = Environment.Variables.csvData;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE executionDate CHARACTER;
		DECLARE domainName CHARACTER 'JSON';
		SET reqMsg = getPayLoad(domainName,OutputRoot.JSON.Data,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.reqMsg = reqMsg;
		DECLARE y,nextWorkDate,currentWorkDate,tiime,str CHARACTER;
		DECLARE outRefer REFERENCE TO OutputRoot;
		/* =================== CALLING LOG4J LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','..............Start Lone Disbursment T24  logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','Incoming Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',reqMsg) INTO rc;
		END IF;
		/*=================================================*/
		SET y = EXTRACT (DAYOFWEEK FROM dbLoggingDate);
		IF y LIKE '1' THEN
			SET nextWorkDate = InputRoot.JSON.Data.body.Item.nextWorkingDate;
			SET tiime = nextWorkDate; ---2020-06-29---
			SET str = SUBSTRING(tiime FROM 1 FOR 4)||SUBSTRING(tiime FROM 6 FOR 2)||SUBSTRING(tiime FROM 9 FOR 2);
			SET executionDate = CAST(str AS CHARACTER FORMAT 'yyyyMMdd');
		ELSE
			SET currentWorkDate = InputRoot.JSON.Data.body.Item.currentWorkingDate;
			SET tiime = currentWorkDate; ---2020-06-29---
			SET str = SUBSTRING(tiime FROM 1 FOR 4)||SUBSTRING(tiime FROM 6 FOR 2)||SUBSTRING(tiime FROM 9 FOR 2);
			SET executionDate = CAST(str AS CHARACTER FORMAT 'yyyyMMdd');
		END IF;
		SET InputLocalEnvironment= NULL;
		SET OutputRoot = NULL;
		DECLARE T24_URL CHARACTER;
		--{debitAccount}/{debitCurrency}/{transactionAmount}/{creditAccountId}/{executionDate}/{customer}
		SET T24_URL = DisburseURL||inRef.debitAccountNumber||'/'||inRef.debitCurrency||'/'||inRef.debitAmount||'/'||inRef.creditAccountNumber||'/'||executionDate||'/'||inRef.thirdPartyReference;
		--SET T24_URL = DisburseURL||inRef.debitAccountNumber||'/'||inRef.debitCurrency||'/'||inRef.debitAmount||'/'||inRef.creditAccountNumber||'/'||'20200705'||'/'||inRef.thirdPartyReference;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG','Generate URL Req T24::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',T24_URL) INTO rc;
		END IF;
		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
		/* =================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,T24_URL,'T24  Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		-- SET OutputRoot.JSON.Data = envref;
		SET OutputRoot.HTTPRequestHeader."Content-Type" = 'application/json';
		SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'POST';
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = T24_URL;
		PROPAGATE TO TERMINAL 'out';

	END;
END MODULE;

CREATE COMPUTE MODULE LoanDisbursmentT24Flow_ResponseToChannel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL ResponseToChannel();
		RETURN TRUE;
	END;
	CREATE PROCEDURE ResponseToChannel() BEGIN
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE rc BOOLEAN FALSE;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		IF FIELDNAME(InputBody) LIKE 'JSON' THEN
			DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
			SET Environment.Variables.resMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		ELSE
			DECLARE inRef REFERENCE TO InputRoot.BLOB.BLOB;
			CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(inRef,encodeRef,ccidRef);
			SET Environment.Variables.resMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		END IF;
		SET OutputRoot = NULL;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',' ----- Response from T24 ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Disbursment T24 Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		DECLARE Inrefer REFERENCE to InputRoot.JSON.Data;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('LoanDisbursment');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('body');
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body;
		DECLARE status CHARACTER InputRoot.JSON.Data.header.status;
		IF status LIKE 'success' AND responceCode LIKE '200' THEN
			SET headRef = Inrefer.header;
			SET headRef.channel = '*236#';
			SET headRef.processingCode = '110000';
			SET headRef.responseCode = responceCode;		
			SET bodyRef = Inrefer.body; 
		ELSE
			SET headRef.status = Inrefer.header;
			SET headRef.channel = '*236#';
			SET headRef.processingCode = '110000';
			SET headRef.responseCode = responceCode;
			SET headRef.status = 'Failure'; 
			SET bodyRef = Inrefer.body;
			SET bodyRef = Environment.Variables.resMsg;
		END IF;
		DECLARE envref REFERENCE TO Environment.JSON.Data;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'JSON';
		CREATE LASTCHILD OF envref AS envref NAME 'Data';
		DECLARE OutRefer REFERENCE to OutputRoot.JSON.Data;
		SET envref = OutputRoot.JSON.Data;
		SET domainName = FIELDNAME(OutputRoot.JSON);
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot = NULL;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',' ----- Response to FrontEnd ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',' Response QueueName :  '||'ALL_SB_HTTP_RES') INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Response to FrontEnd',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON.Data = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.MQRFH2.usr.resQueueName;
	END;
END MODULE;

CREATE COMPUTE MODULE LoanDisbursmentT24Flow_FramingT24BadReq
	DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
	DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
	DECLARE IsLogRequired EXTERNAL CHARACTER'';
	DECLARE URL EXTERNAL CHARACTER'';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL FramingT24BadReq();
		RETURN FALSE;
	END;
	CREATE PROCEDURE FramingT24BadReq() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE myBlob REFERENCE TO InputRoot.BLOB.BLOB;
		CREATE LASTCHILD OF OutputRoot DOMAIN('JSON') PARSE(myBlob, InputRoot.Properties.Encoding, InputRoot.Properties.CodedCharSetId);
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		DECLARE t24Res REFERENCE TO OutputRoot.JSON.Data.override.overrideDetails.[1];
		-- SET Environment = t24Res;
		SET OutputRoot = NULL;
		DECLARE i INTEGER 1;
		SET OutputRoot.HTTPRequestHeader."Content-Type" = 'application/json';
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME 'header';
		CREATE LASTCHILD OF OutputRoot.JSON.Data.header NAME 'override';
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME 'body';
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.header.override;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.body;
		CREATE LASTCHILD OF headRef IDENTITY(JSON.Array)overrideDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;

		WHILE LASTMOVE(t24Res) DO

			CREATE LASTCHILD OF headRef.overrideDetails.Item[i] TYPE NameValue NAME 'description' VALUE t24Res.description;
			CREATE LASTCHILD OF headRef.overrideDetails.Item[i] TYPE NameValue NAME 'id' VALUE t24Res.id;
			SET i=i+1;
			MOVE t24Res NEXTSIBLING;

		END WHILE;
		CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)customerIds;
		CREATE LASTCHILD OF bodyRef.customerIds.Item[1] TYPE NameValue NAME 'customerId' VALUE '100282';
		CREATE LASTCHILD OF bodyRef IDENTITY(JSON.Array)properties;

		CREATE LASTCHILD OF bodyRef.properties.Item[1] TYPE NameValue NAME 'propertyId' VALUE 'COMMITMENT';

		CREATE LASTCHILD OF bodyRef.properties.Item[1] IDENTITY(JSON.Array)fields;

		CREATE LASTCHILD OF bodyRef.properties.Item[1].fields.Item[1] TYPE NameValue NAME 'fieldName' VALUE 'AMOUNT';
		CREATE LASTCHILD OF bodyRef.properties.Item[1].fields.Item[1] TYPE NameValue NAME 'fieldValue' VALUE '175';
		CREATE LASTCHILD OF bodyRef.properties.Item[2] TYPE NameValue NAME 'propertyId' VALUE 'SETTLEMENT';

		CREATE LASTCHILD OF bodyRef.properties.Item[2] IDENTITY(JSON.Array)fields;

		CREATE LASTCHILD OF bodyRef.properties.Item[2].fields.Item[1] TYPE NameValue NAME 'fieldName' VALUE 'PAYIN.ACCOUNT';
		CREATE LASTCHILD OF bodyRef.properties.Item[2].fields.Item[1] TYPE NameValue NAME 'fieldValue' VALUE '1000000047';
		CREATE LASTCHILD OF bodyRef.properties.Item[2].fields.Item[2] TYPE NameValue NAME 'fieldName' VALUE 'PAYIN.ACCOUNT';
		CREATE LASTCHILD OF bodyRef.properties.Item[2].fields.Item[2] TYPE NameValue NAME 'fieldValue' VALUE '1000000047';
		CREATE LASTCHILD OF bodyRef NAME 'productId' VALUE 'NANO.KASHAGI.PAYROLL';
		CREATE LASTCHILD OF bodyRef NAME 'currencyId' VALUE 'ZWL';
		CREATE LASTCHILD OF bodyRef NAME 'activityId' VALUE 'LENDING-NEW-ARRANGEMENT';
		DECLARE domainName CHARACTER FIELDNAME(OutputRoot.JSON);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE OutRefer REFERENCE TO OutputRoot.JSON.Data;
		DECLARE envref REFERENCE TO Environment;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'JSON';
		CREATE LASTCHILD OF Environment.JSON AS envref NAME 'Data';
		SET envref = OutRefer;
		SET OutputRoot = NULL;
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',' ----- T24 Bad Request ------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'LoanDisbursmentLogging', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Disbursment T24 Bad Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		SET OutputRoot.JSON.Data = envref;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = URL;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;


CREATE COMPUTE MODULE LoanDisbursmentT24Flow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildException();
		RETURN TRUE;
	END;
	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'T24ClientOut,connection refused') THEN
			SET errMsg = 'T24 Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientCall,connection refused') THEN
			SET errMsg = 'Postilion Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'T24ClientReceiveData,Exception whilst parsing') THEN
			SET errMsg = 'No Response from T24 Server';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientReceiveData,Exception whilst parsing') THEN
			SET errMsg = 'No Response from Postilion Server';
		ELSEIF CONTAINS(excpRef.excpText,'ParserException') THEN 
			SET errMsg = 'JSON parsing errors have occurred';
		ELSEIF CONTAINS(excpRef.excpText,'Socket') THEN
			SET errMsg = 'SocketException errors have occurred';
		ELSEIF CONTAINS(excpRef.excpText,'WebService Request Exception') THEN
			SET errMsg = 'WebService Request Exception errors have occurred'; 
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'LOAN_DISBURSMENT';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'LOAN_DISBURSMENT');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('LOAN_DISBURSMENT'); 
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('body');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body; 
		--SET headerRef = Environment.MQRFH2.header;
		SET headerRef.status = 'FAILED';
		SET headerRef.responseCode = '000';
		SET bodyRef.source = 'ESB';  
		SET bodyRef.applicationName = ApplicationLabel;  
		SET outRef.responseBody.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.Loan_Repayment.ErrorCode;
		SET bodyRef.message = errMsg;
		SET OutputRoot.XMLNSC = NULL;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.MQRFH2.usr.resQueueName;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		--CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.LOAN_DISBURSMENT.ErrorCode,outRefer);
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.LOAN_DISBURSMENT.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;
		----------------------------------
	END;
END MODULE;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DECLARE DateURL EXTERNAL CHARACTER'';
CREATE COMPUTE MODULE LoanDisbursmentT24Flow_ExtractDate
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE y,nextWorkDate,currentWorkDate CHARACTER;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE executionDate CHARACTER;
		SET Environment.MQRFH2.RequestIdentifier = InputRoot.MQRFH2.RequestIdentifier;
		SET Environment.Variables.csvData = InputRoot.JSON.Data;
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		SET y = EXTRACT (DAYOFWEEK FROM dbLoggingDate);
		IF y LIKE '1' THEN
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
			SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'GET';
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = DateURL;
		ELSE
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.MQRFH2 = Environment.MQRFH2;
			SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'GET';
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = DateURL;
		END IF;
	END;
END MODULE;