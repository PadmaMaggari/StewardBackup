BROKER SCHEMA com.stewardbank.co.zw.accountopening
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE ALL_SB_HTTP_RES EXTERNAL CHAR '';
DECLARE IsLogRequired EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE baseURL EXTERNAL CHARACTER '';
DECLARE IP EXTERNAL CHARACTER '';
DECLARE PORT EXTERNAL CHARACTER '';
DECLARE rc BOOLEAN FALSE;


CREATE COMPUTE MODULE UpdateCustomerRecordFlow_UpdateRecordRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL UpdateCustomerDetails();
		RETURN FALSE;
	END;

	CREATE PROCEDURE UpdateCustomerDetails() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE inHeadRef REFERENCE TO InputRoot.JSON.Data.*.header;
		DECLARE inBodyRef REFERENCE TO InputRoot.JSON.Data.*.body;
		DECLARE inLoanRef REFERENCE TO InputRoot.JSON.Data.*.body.loanProfiles;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE url CHAR;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		CREATE LASTCHILD OF outRef NAME ('nationalId') VALUE inBodyRef.nationalId;
		CREATE LASTCHILD OF outRef NAME ('msisdn') VALUE inBodyRef.msisdn;
		CREATE LASTCHILD OF outRef NAME ('firstName') VALUE inBodyRef.firstName;
		CREATE LASTCHILD OF outRef NAME ('lastName') VALUE inBodyRef.lastName;
		CREATE LASTCHILD OF outRef NAME ('dateOfBirth') VALUE inBodyRef.dateOfBirth;
		CREATE LASTCHILD OF outRef NAME ('dateCreated') VALUE inBodyRef.dateCreated;
		CREATE LASTCHILD OF outRef NAME ('accountNbr') VALUE inBodyRef.accountNbr;
		CREATE LASTCHILD OF outRef NAME ('mnemonic') VALUE inBodyRef.mnemonic;
		CREATE LASTCHILD OF outRef NAME ('fullName') VALUE inBodyRef.fullName;
		CREATE LASTCHILD OF outRef NAME ('gender') VALUE inBodyRef.gender;
		CREATE LASTCHILD OF outRef NAME ('title') VALUE inBodyRef.title;
		CREATE LASTCHILD OF outRef NAME ('status') VALUE inBodyRef.status;
		CREATE LASTCHILD OF outRef NAME ('mobileNumber') VALUE inBodyRef.mobileNumber;
		CREATE LASTCHILD OF outRef NAME ('address') VALUE inBodyRef.address;
		CREATE LASTCHILD OF outRef NAME ('city') VALUE inBodyRef.city;
		CREATE LASTCHILD OF outRef NAME ('sector') VALUE inBodyRef.sector;
		CREATE LASTCHILD OF outRef NAME ('industry') VALUE inBodyRef.industry;
		CREATE LASTCHILD OF outRef NAME ('nationality') VALUE inBodyRef.nationality;
		CREATE LASTCHILD OF outRef NAME ('residence') VALUE inBodyRef.residence;
		CREATE LASTCHILD OF outRef NAME ('customerName') VALUE inBodyRef.customerName;
		--CREATE LASTCHILD OF outRef IDENTITY(JSON.Array)loanProfiles;
		--DECLARE loanRef REFERENCE TO OutputRoot.JSON.Data.loanProfiles;
		--SET loanRef = inLoanRef;
		SET url = 'http://'||IP||':'||PORT||baseURL;
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		IF EXISTS(Environment.JSON[]) THEN
			SET Environment.JSON = OutputRoot.JSON;
		ELSE
			CREATE LASTCHILD OF Environment DOMAIN('JSON');
			SET Environment.JSON = OutputRoot.JSON;
		END IF;
		SET OutputRoot.JSON = NULL;
		------------DBLogging-------------------
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----UpdateCustomer Request------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'UpdateCustomer Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		---------------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.ContentType = 'application/json';
		SET OutputRoot.JSON = Environment.JSON;
		SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'POST';
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = url;
	END;
END MODULE;



CREATE COMPUTE MODULE UpdateCustomerRecordFlow_GenerateResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateResponse() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE inHeadRef REFERENCE TO InputRoot.JSON.Data.header;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		DECLARE HTTPStatusCode CHAR InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		SET Environment.Variables.reqMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----UpdateCustomer Response------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			--------------DBLogging-------------------
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'UpdateCustomer Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
			-----------------------------
		END IF;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('updateCustomerRecord');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		SET headRef = inHeadRef;
		SET headRef.channel = Environment.MQRFH2.header.channel;
		SET headRef.processingCode = Environment.MQRFH2.header.processingCode;
		SET headRef.serviceCall = Environment.MQRFH2.header.serviceCall;
		IF HTTPStatusCode = '200' THEN
			DECLARE inBodyRef REFERENCE TO InputRoot.JSON.Data.body;
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('body');
			DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body;
			SET bodyRef = inBodyRef;
		ELSE
			DECLARE inErrorRef REFERENCE TO InputRoot.JSON.Data.error;
			CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
			DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
			SET errorRef = inErrorRef;
		END IF;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		IF EXISTS(Environment.JSON[]) THEN
			SET Environment.JSON = OutputRoot.JSON;
		ELSE
			CREATE LASTCHILD OF Environment DOMAIN('JSON');
			SET Environment.JSON = OutputRoot.JSON;
		END IF;
		SET OutputRoot.JSON = NULL;
		------------DBLogging-------------------
		IF IsLogRequired = 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',' -----Application Response------') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'AccOpeningLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
		END IF;
		---------------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.JSON;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
	END;
END MODULE;



CREATE COMPUTE MODULE UpdateCustomerRecordFlow_GenerateExceptionResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateExceptionResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateExceptionResponse() BEGIN
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'UpdateCustomerCall') THEN
			SET errMsg = 'DWH Server Down';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'AccountOpening';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'AccountOpening');
		SET Environment.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AccountOpeningResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headerRef = Environment.Variables.header;
		SET headerRef.status = 'FAILED';
		SET headerRef.responseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = Environment.UserDefinedErrorCodes.AccountOpening.ErrorCode;
		SET errorRef.message = errMsg;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.UserDefinedErrorCodes.AccountOpening.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
		----------------------------------
	END;
END MODULE;