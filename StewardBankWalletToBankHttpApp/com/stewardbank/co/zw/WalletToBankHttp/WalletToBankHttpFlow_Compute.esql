



	/*
Author:Swathi
Version:0.0.1
Date of Creation:15-06-2020
Date of Modification:17-06-2020
Description:Business flow pick Request from WTB_SB_HTTP_REQ queue and Transform the Request to ISO8583 and send it to postilion
			then reponse from postilion is logged and send the same response  to T24 then reponse from T24 is logged again and same response is forwarded to
			postilion and again response from postilion is logged and form a request based on the response from the postilion in JSON message format 
			and send it to outgoing router queue(ALL_SB_HTTP_RES).
 			
*/

BROKER SCHEMA com.stewardbank.co.zw.WalletToBankHttp
PATH  com.stewardbank.co.zw.common.esql; 

DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';	
DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q ,ALL_SB_HTTP_RES EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER'';

CREATE COMPUTE MODULE WalletToBankHttpFlow_GenerateISOReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateIsoReq();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateIsoReq() BEGIN
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		DECLARE reqMsg,procCodeData,QueueName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE DBDetails ROW;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data.*;
		DECLARE col CHARACTER ':';
		DECLARE comm CHARACTER ',';
		DECLARE channel CHARACTER 'Channel';
		DECLARE destinationPhone CHARACTER 'DestinationPhone';
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_DATE;
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.JSON.Data,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.MQRFH2.inputRequest = reqMsg;
		-- SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG','..............Start WalletToBankHTTPApp logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG','Incoming Request::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG',reqMsg) INTO rc;
		END IF;
		--***************JSON TO ISO*****************
		  
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
		SET OutputRoot.MQRFH2.usr = Environment.Variables.usr;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		SET outRef.MTI_Version = 0;
		SET outRef.MTI_MessageClass = 2;
		SET outRef.MTI_MessageFunction = 0;
		SET outRef.MTI_MessageOrigin = 0;
		SET outRef.ProcessingCode_003 = inRef.header.processingCode ;
		--SET outRef.ProcessingCode_003 = '012020';
		SET outRef.AmountTransaction_004 = CAST(inRef.body.amount AS INTEGER);
		SET outRef.AccountIdentification1_102 = inRef.body.debitAccountNumber;
		SET outRef.AccountIdentification2_103 = inRef.body.accountIdentification2 ;
		--procedures for Channel and Destination number
		DECLARE keyChannelValue CHARACTER'';
		CALL keyValueGenerator(inRef.header.channel) INTO keyChannelValue;  ----  19Soshaloza   
		DECLARE keyChannel CHARACTER '';
		CALL keyValueGenerator(channel) INTO keyChannel; --17channel	
		DECLARE keydestinationPhoneValue CHARACTER'';
		CALL keyValueGenerator(inRef.body.destinationPhone) INTO keydestinationPhoneValue;   
		DECLARE keydestinationPhone CHARACTER '';
		CALL keyValueGenerator(destinationPhone) INTO keydestinationPhone;  
		SET outRef.ReservedPrivate_127 = '000000';
		SET outRef.StructuredDataPostilionPrivate_127_22 = keyChannel||keyChannelValue||keydestinationPhone||keydestinationPhoneValue;
		SET OutputRoot.JSON= NULL;
		CALL UpdateMsgWithAsciiBitMap(outRef);
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;
		DECLARE T24ReqMsg CHARACTER getPayLoad(FIELDNAME(OutputRoot.DFDL),outDomainDataRef,encodeRef,ccsid);	
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET OutputRoot.DFDL = NULL;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG','Generate Req in ISO 8583::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG',T24ReqMsg) INTO rc;
		END IF;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,T24ReqMsg,'Application Request with ISO',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),'',outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;	
		END;	
END MODULE;
CREATE COMPUTE MODULE WalletToBankHttpFlow_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		RETURN FALSE;
	END;

	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
		SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'T24ClientOut,connection refused') THEN
		SET errMsg = 'T24 Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientCall,connection refused') THEN
		SET errMsg = 'Postilion Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'T24ClientReceiveData,Exception whilst parsing') THEN
		SET errMsg = 'No Response from T24 Server';
		ELSEIF CONTAINS(excpRef.excpText,'PostilionClientReceiveData,Exception whilst parsing') THEN
		SET errMsg = 'No Response from Postilion Server';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'WTB_HTTP';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'WTB_HTTP');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('WTB_HTTP');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE headerRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET headerRef = Environment.MQRFH2.header;
		SET headerRef.status = 'FAILED';
		SET headerRef.responseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.WTB_HTTP.ErrorCode;
		SET errorRef.message = errMsg;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES ;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.MQRFH2.inputRequest,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.WTB_HTTP.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out';
		----------------------------------
		END;
END MODULE;

CREATE COMPUTE MODULE WalletToBankHttpFlow_GenerateReqToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToT24();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateReqToT24() BEGIN
		DECLARE rc BOOLEAN FALSE;		
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583WithHeader;	
		DECLARE envUsrRef REFERENCE TO Environment.MQRFH2.usr;
		DECLARE outRefer REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		SET Environment.Variables.reqISOMsg = getPayLoad(FIELDNAME(InputRoot.DFDL),inDomainDataRef,encodeRef,ccsid);
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		
		DECLARE reqMsgJson CHARACTER'';
		DECLARE logRef REFERENCE TO InputRoot.DFDL.ISO8583WithHeader;
		DECLARE jsonRef REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot AS jsonRef DOMAIN('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON AS jsonRef NAME ('Data');
		--CALL JSONLogMessage(logRef,jsonRef);
		SET jsonRef = logRef;
		SET reqMsgJson = getPayLoad('JSON',jsonRef,encodeRef,ccsid);
		
		SET OutputRoot.JSON=NULL;
		DECLARE posRef REFERENCE TO Environment.DFDL.ISO8583_1987;
		CALL FieldToFieldMapping(inRef,outRef,'',envUsrRef,posRef);
		SET Environment.DFDL = OutputRoot.DFDL;
		
		DECLARE removeRefPointer REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		CALL remove127(removeRefPointer);
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET OutputRoot.DFDL = NULL;
		/*=================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqISOMsg,'T24 Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/*=================== CALLING DB RAW AUDIT LOGGING END ==============*/
		/*=================== CALLING LOG4J LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN

			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG','Request to T24::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG','========= ISO TO JSON T24 REQUEST ==========') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG',reqMsgJson) INTO rc;
		END IF;
		/*=================== CALLING LOG4J LOGGING END ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;
		END;
	END MODULE;
CREATE COMPUTE MODULE WalletToBankHttpFlow_reqToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL reqToPostilion();
		RETURN TRUE;
	END;
	CREATE PROCEDURE reqToPostilion() BEGIN
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_DATE;
	DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot.DFDL;
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE reqMsg CHARACTER ;
		SET reqMsg = getPayLoad(FIELDNAME(InputRoot.DFDL),inRef,encodeRef,ccsid);
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,reqMsg,'Request To Postilion',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),'',outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG','-**********Generate Req T24**********') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG','***Postilion Request Message Without Headers:'||reqMsg) INTO rc;
		END IF;
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = InputRoot.DFDL;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;
CREATE COMPUTE MODULE WalletToBankHttpFlow_resToFrondEnd
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateResToPortalBackend();
		RETURN FALSE;
	END;
	CREATE PROCEDURE GenerateResToPortalBackend() BEGIN 
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_DATE;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot.DFDL;
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG','Response from Postilion::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG',getPayLoad(FIELDNAME(InputBody),inDomainDataRef,encodeRef,ccsid)) INTO rc;
		END IF;
		--******************ISO to JSON mapping
		IF EXISTS(inRef.*.SecondaryBitmap[]) THEN
			MOVE inRef TO InputRoot.DFDL.*.SecondaryBitmap;
			MOVE inRef NEXTSIBLING;
		ELSEIF EXISTS(inRef.*.PrimaryBitmap[]) THEN
			MOVE inRef TO InputRoot.DFDL.*.PrimaryBitmap;
			MOVE inRef NEXTSIBLING;
		ELSE
		MOVE inRef TO InputRoot.DFDL.*.PrimaryAccountNumber_002;
		END IF;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('AnyWalletToBankResponse');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('header');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('body');
		DECLARE headRef REFERENCE TO OutputRoot.JSON.Data.*.header;
		DECLARE bodyRef REFERENCE TO OutputRoot.JSON.Data.*.body;
		SET headRef = Environment.MQRFH2.header;
		SET headRef.status = 'SUCCESS';
		SET headRef.responseCode = '200';
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		CALL ISOToJSONMapping(inRef,bodyRef);
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.JSON;
		DECLARE reqMsg CHARACTER ;
		SET reqMsg = getPayLoad(FIELDNAME(OutputRoot.JSON),outDomainDataRef,encodeRef,ccsid);
		CREATE LASTCHILD OF Environment DOMAIN ('JSON');
		SET Environment.JSON = OutputRoot.JSON;
		SET OutputRoot.JSON = NULL;
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,reqMsg,'Response To Frontend',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),'',outRefer); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out';
		
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG','Response To Outgoing Router::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'WTBHTTPLogger', 'DEBUG','Response to Frontend :'||reqMsg) INTO rc;
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.JSON;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.MQRFH2.usr.resQueueName;
		PROPAGATE TO TERMINAL 'out'; 
	END;
END MODULE;
	