BROKER SCHEMA com.stewardbank.co.zw.salarycorporatepayments
PATH com.stewardbank.co.zw.common.esql;
CREATE COMPUTE MODULE SalaryCorporatePaymentsZssFlow_RequestToZss
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL RequestToZss();
		RETURN FALSE;
	END;
	CREATE PROCEDURE RequestToZss() BEGIN
		DECLARE rc BOOLEAN FALSE;
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		SET Environment.Variables.UID = InputRoot.MQRFH2.UID;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.stewardBank_CSV.record;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME; --2020-07-15 19:45:40.694
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE tiime,str,csvDate CHARACTER;
		SET tiime = inRef.Date; ---29/06/2020---
		SET str = SUBSTRING(tiime FROM 7 FOR 4)||SUBSTRING(tiime FROM 4 FOR 2)||SUBSTRING(tiime FROM 1 FOR 2);
		DECLARE pattern CHARACTER 'yyyyMMdd';
		SET csvDate = CAST(str AS CHARACTER FORMAT pattern);
		DECLARE indomainDataRef REFERENCE TO InputRoot.DFDL.stewardBank_CSV;
		DECLARE domainName CHARACTER 'stewardBank_CSV';
		SET Environment.Variables.csvReqMsg = getPayLoad(domainName,indomainDataRef,encodeRef,ccidRef);
		-- SET DBLogging Properties ==============
		SET Environment.Variables.FileName = SUBSTRING(InputRoot.MQRFH2.FileName BEFORE '.csv' );
		SET Environment.Variables.Amount = inRef.Amount;
		SET Environment.Variables.Dbt_Acc = inRef.Remitter_Account_Number;
		SET Environment.Variables.Crt_Acc = inRef.Beneficiary_Account_Number;
		SET Environment.Variables.CsvDate = csvDate;
		SET Environment.Variables.CreationDate = CAST(CURRENT_TIMESTAMP AS TIMESTAMP);
		SET Environment.Variables.RRN = inRef.Purpose;
		DECLARE Env REFERENCE TO Environment.Variables;
		SET Env.TaxableCheck = inRef.Purpose;
		/*=================== CALLING LOG4j LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		---------------------------------------------------------------------------------
		DECLARE timee,stri,Field7,Field12,Field13 CHARACTER;
		SET timee = dbLoggingTime;
		SET stri = SUBSTRING(timee FROM 17 FOR 2)||SUBSTRING(timee FROM 20 FOR 2)||SUBSTRING(timee FROM 23 FOR 2)||SUBSTRING(timee FROM 26 FOR 2)||SUBSTRING(timee FROM 29 FOR 2);
		SET Field7 = CAST(stri AS CHARACTER FORMAT 'MMDDhhmmss');
		SET Field13 = CAST(stri AS CHARACTER FORMAT 'MMDD');
		DECLARE trnTime TIMESTAMP CURRENT_GMTTIMESTAMP;
		SET Field12 = CAST(trnTime AS CHARACTER FORMAT 'HHmmss');
		----------------------------------------------------------------------------------
		DECLARE purpose CHARACTER inRef.Purpose;
		DECLARE PurposeLength INTEGER LENGTH(inRef.Purpose);
		IF PurposeLength < 6 THEN
			WHILE PurposeLength < 6 DO
				SET purpose = purpose||' ';
				SET PurposeLength = PurposeLength+1;
			END WHILE;
		ELSE
			SET purpose = SUBSTRING(inRef.Purpose FROM 1 FOR 6);
		END IF;
		--CSV to ISO8583 field to field mapping--
		SET OutputRoot.Properties.MessageSet= '{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType= '{}:ISO8583_1987';
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		SET outRef.MTI_Version='0';
		SET outRef.MTI_MessageClass='2';
		SET outRef.MTI_MessageFunction='0';
		SET outRef.MTI_MessageOrigin='0';
		-- IF Env.FileNameCheck LIKE 'PM' THEN
		-- SET outRef.ProcessingCode_003 = '410000';
		-- ELSE
		-- SET outRef.ProcessingCode_003 = '420000';
		-- END IF;
		SET outRef.ProcessingCode_003 = '210020';
		SET outRef.AmountTransaction_004 = inRef.Amount; --
		SET outRef.TransmissionDatetime_007 = Field7; --
		SET outRef.SystemsTraceAuditNumber_011 = '654321';
		SET outRef.TimeLocalTransaction_012 = Field12;
		SET outRef.DateLocalTransaction_013 = SUBSTRING(Field13 FROM 1 FOR 4);
		SET outRef.DateSettlement_015 = SUBSTRING(Field13 FROM 1 FOR 4);
		SET outRef.MerchantType_018 = '6011';
		SET outRef.PointOfServiceEntryMode_022 = '001';
		SET outRef.PointOfServiceConditionCode_025 = '27';
		SET outRef.PointOfServiceCaptureCode_026 = '12';
		SET outRef.AmountTransactionFee_028 = 'C00000000';
		SET outRef.AmountTransactionProcessingFee_030 = 'C00000000';
		SET outRef.AcquiringInstitutionIdentificationCode_032 = '502195';
		SET outRef.ForwardingInstitutionIdentificationCode_033 = '502195';
		SET outRef.RetrievalReferenceNumber_037 = 'IPP201980008';
		SET outRef.CardAcceptorTerminalIdentification_041 = 'ISAVE263';
		SET outRef.CardAcceptorIdentificationCode_042 = '26377-SBZWISAVE';
		SET outRef.CardAcceptorNameLocation_043 = '12486425402013EYE TRACK SATELL          ';
		SET outRef.CurrencyCodeTransaction_049 = '932';
		SET outRef.ReservedNational_059 = '0116742676';
		SET outRef.ReceivingInstitutionIdentificationCode_100 = '502195';
		--SET outRef.AccountIdentification1_102 = inRef.Remitter_Account_Number; --
		SET outRef.AccountIdentification2_103 = inRef.Beneficiary_Account_Number; --
		--SET outRef.TransactionDescription_104 = inRef.Tran_ID; --
		SET outRef.ReservedPrivate_123 = '100450100130021';
		SET outRef.ReservedPrivate_127 = '000000';
		SET outRef.SwitchKeyPostilionPrivate_127_2 = inRef.Purpose||','||inRef.Beneficiary_Bank_Name||','||inRef.Beneficiary_Bank_Code||','||inRef.Beneficiary_Account_Number||','||inRef.Beneficiary_Name||','||inRef.Remitter_Name; --
		SET outRef.AdditionalNodeDataPostilionPrivate_127_9 = '20200717'; --
		SET outRef.OriginalKeyPostilionPrivate_127_12 = 'SSB1001199788'; --
		SET outRef.ExtendedTransactionTypePostilionPrivate_127_33 = '9040'; --
		CALL UpdateMsgWithAsciiBitMap(outRef);
		DECLARE domainDataRef REFERENCE TO OutputRoot.DFDL;
		SET Environment.Variables.reqMsg = getPayLoad(FIELDNAME(OutputRoot.DFDL),domainDataRef,encodeRef,ccidRef);
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET OutputRoot.DFDL = NULL;
		/*=================== Audit Logging ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.Variables.UID,Environment.Variables.reqMsg,'ZSS Request Call',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),Env.RRN,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','Generating Request to ZSS::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','Message ID :: '||Environment.Variables.UID) INTO rc;
		END IF;
		/*===================End of Audit Logging==============*/
		/*================DB Update=======================*/
		IF Env.TaxableCheck LIKE 'SALARY%' THEN
			CALL INSERT_SB_SCP_TRACKING(Env.UID,'PENDING','PENDING','PENDING',Environment.Variables.reqMsg,'PENDING',Env.FileName,Environment.Variables.csvReqMsg,Env.Amount,Env.Dbt_Acc,Env.Crt_Acc,Env.CsvDate,
			'NOT APPLICABLE','PENDING','PENDING','NOT APPLICABLE','NOT APPLICABLE','SUCCESS',CAST(Env.CreationDate AS TIMESTAMP),CAST(Env.CreationDate AS TIMESTAMP),'FALSE');
		ELSE
			CALL INSERT_SB_SCP_TRACKING(Env.UID,'PENDING','PENDING','PENDING',Environment.Variables.reqMsg,'PENDING',Env.FileName,Environment.Variables.csvReqMsg,Env.Amount,Env.Dbt_Acc,Env.Crt_Acc,Env.CsvDate,
			'NOT APPLICABLE','PENDING','PENDING','NOT APPLICABLE','NOT APPLICABLE','SUCCESS',CAST(Env.CreationDate AS TIMESTAMP),CAST(Env.CreationDate AS TIMESTAMP),'TRUE');
		END IF;
		/*=============End===============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
		SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE SalaryCorporatePaymentsZssFlow_GenereateResponseToChannel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenereateResponseToChannel();
		RETURN FALSE;
	END;
	CREATE PROCEDURE GenereateResponseToChannel() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET OutputRoot.Properties=InputRoot.Properties;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		DECLARE Env REFERENCE TO Environment.Variables;
		SET Env.reqMsg = getPayLoad(FIELDNAME(InputRoot.DFDL),inRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Env.data = InputRoot.DFDL;
		CASE
		WHEN InputRoot.DFDL.ISO8583_1987.ResponseCode_039 LIKE '00' THEN
			---Success Case DB Update---
			CALL UPDATE_SB_SCP_STATUS(Env.UID,inRef.SystemsTraceAuditNumber_011,CAST(Env.CreationDate AS CHARACTER),inRef.RetrievalReferenceNumber_037,inRef.ResponseCode_039,Env.reqMsg,'SUCCESS','NOT APPLICABLE','NOT APPLICABLE',CAST(Env.CreationDate AS TIMESTAMP));
			---------------------------
			---DB Logging---
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Env.UID,Env.reqMsg,'ZSS Success Response',ApplicationLabel,BrokerName,inRef.TimeLocalTransaction_012,inRef.DateLocalTransaction_013,Env.RRN,outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','..........Logging Success Response...............') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','ZSS Status :: Success') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG',Env.reqMsg) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','Message ID :: '||Environment.Variables.UID) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','..............End of Logging...........*') INTO rc;
			END IF;
			----------------------
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.Properties.MessageSet='{ISO8583_Lib}';
			SET OutputRoot.Properties.MessageType='{}:ISO8583_1987';
			SET OutputRoot.DFDL = Env.data;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
			PROPAGATE TO TERMINAL 'out';
		ELSE
			---Failure Case DB Update---
			CALL UPDATE_SB_SCP_STATUS(Env.UID,'PENDING','PENDING','PENDING',inRef.ResponseCode_039,Env.reqMsg,'FAILURE','NOT APPLICABLE','NOT APPLICABLE',CAST(Env.CreationDate AS TIMESTAMP));
			---------------
			SET Env.data = InputRoot.DFDL;
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','..........Logging Failure Response...............') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','ZSS Status:: FAILURE'||'/'||'ResponseCode::'||inRef.ResponseCode_039) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG',Env.reqMsg) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','Message ID :: '||Environment.Variables.UID) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsZssLogger', 'DEBUG','..............End of Logging...........*') INTO rc;
			END IF;
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.DFDL = Env.data;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
			PROPAGATE TO TERMINAL 'out';
		END CASE;
	END;
END MODULE;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE SalaryCorporatePaymentsZssFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE inRefer REFERENCE TO Environment.Variables.DFDL.ISO8583WithHeader;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		-- IF CONTAINS(excpRef.excpText,'Database') OR CONTAINS(excpRef.excpText,'ZssClientOut,connection refused,') OR CONTAINS(excpRef.excpText,'SocketException') THEN
		-- SET OutputLocalEnvironment.Destination.File.Directory = SCP_DBFailure;
		-- SET OutputLocalEnvironment.Destination.File.Name = Environment.Variables.FileName||'_'||inRefer.AccountIdentification2_103||'_'||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMdd-HHmmss')||'.csv';
		-- ELSE
		-- SET OutputLocalEnvironment.Destination.File.Directory = SCP_FormatFailure;
		-- SET OutputLocalEnvironment.Destination.File.Name = Environment.Variables.FileName||'_'||inRefer.AccountIdentification2_103||'_'||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMdd-HHmmss')||'.csv';
		-- END IF;
		-- SET OutputRoot.Properties.MessageSet = '{SB_CSV_Lib}';
		-- SET OutputRoot.Properties.MessageType = '{}:stewardBank_CSV';
		-- CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL')
		-- PARSE(Environment.MQRFH2.reqMsg ENCODING encodeRef CCSID ccidRef SET '{SB_CSV_Lib}' TYPE '{}:stewardBank_CSV');
		-- PROPAGATE TO TERMINAL 'out1';
		--DECLARE Id CHARACTER CAST(Environment.MQRFH2.usr.Id AS CHARACTER);
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SalaryCorporatePaymentsZss';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SalaryCorporatePaymentsZss');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		DECLARE Env REFERENCE TO Environment.Variables;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.DFDL = NULL; 
		---Failure DB Status Update---
		CALL UPDATE_SB_SCP_STATUS(Env.UID,'PENDING','PENDING','PENDING','PENDING',exe_Desc,'FAILURE','NOT APPLICABLE','NOT APPLICABLE',CAST(Env.CreationDate AS TIMESTAMP));
		------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','#..............Start of Logging Exception ...........#') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		END IF;
		------------Error Logging in DB----------
		SET Environment.Variables.Date_Time = CAST(CURRENT_TIMESTAMP AS TIMESTAMP);
		IF IsLogRequired LIKE 'Y' THEN
			CALL Error_DBLogging(Environment.Variables.UID,Environment.MQRFH2.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),Environment.Variables.RRN,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SalaryCorporatePaymentsZss.ErrorCode,outRefer);
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','# ---End of Logging Application Related Exception---#') INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		----------------------------------
		RETURN FALSE;
	END;
END MODULE;


CREATE PROCEDURE INSERT_SB_SCP_TRACKING (IN PAYNET_GUID CHARACTER,IN PAYNET_STAN_NUM CHARACTER, IN PAYNET_STANDATE CHARACTER,IN PAYNET_RRN_REF CHARACTER,
IN PAYNET_ISO_ZSS_REQUEST_MSG CHARACTER,IN PAYNET_RESPONSE_CODE CHARACTER,IN PAYNET_CSV_FILENAME CHARACTER,IN PAYNET_CSV_FIELDS CHARACTER,IN PAYNET_CSV_AMOUNT CHARACTER,
IN PAYNET_CSV_DTACCOUNT CHARACTER,IN PAYNET_CSV_CRACCOUNT CHARACTER,IN PAYNET_CSV_DTDATE CHARACTER,IN PAYNET_T24_REQUEST_URL CHARACTER,IN PAYNET_ZSS_RESPONSE CHARACTER,
IN PAYNET_ZSS_STATUS CHARACTER,IN PAYNET_T24_RESPONSE CHARACTER,IN PAYNET_T24_STATUS CHARACTER,IN PAYNET_CSV_STATUS CHARACTER,IN PAYNET_DATECREATED TIMESTAMP,IN PAYNET_DATEUPDATED TIMESTAMP,IN PAYNET_TAXABLE CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "INSERT_SB_SCP_TRACKING";


CREATE PROCEDURE UPDATE_SB_SCP_STATUS(IN PAYNET_ID CHARACTER,IN PAYNET_STAN_NUM CHARACTER,IN PAYNET_STANDATE CHARACTER,IN PAYNET_RRN_REF CHARACTER,
IN PAYNET_RESPONSE_CODE CHARACTER,IN PAYNET_ZSS_RESPONSE CHARACTER,IN PAYNET_ZSS_STATUS CHARACTER,IN PAYNET_T24_RESPONSE CHARACTER,IN PAYNET_T24_STATUS CHARACTER,IN PAYNET_DATEUPDATED TIMESTAMP)
LANGUAGE DATABASE
EXTERNAL NAME "UPDATE_SB_SCP_STATUS";