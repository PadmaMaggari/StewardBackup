BROKER SCHEMA com.stewardbank.co.zw.cashin
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE ALL_SB_HTTP_RES EXTERNAL CHARACTER ''; 
DECLARE IsLogRequired EXTERNAL CHARACTER'';
DECLARE URL EXTERNAL CHARACTER '';

CREATE COMPUTE MODULE CashInFlow_GenReqToMobiquity
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToMobiquity();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToMobiquity() BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		SET Environment.MQRFH2.RequestIdentifier = InputRoot.MQRFH2.RequestIdentifier;
		/* =================== CALLING DB LOGGING   ==============*/
	    IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,
			Environment.MQRFH2.usr.retrievalReferenceNumber,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		/* ==================== Database Logging End ==================== */
		/* =================== CALLING  LOG4J LOGGING   ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'CashInLogger', 'DEBUG','..............Initializing CASHOUT logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'CashInLogger', 'DEBUG','Application Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'CashInLogger', 'DEBUG',getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		END IF;
		/* =================== CALLING  LOG4J LOGGING ENDING  ==============*/
		/*===========Framing request to Mobiquity============*/
		DECLARE reqData CHARACTER '';	
		DECLARE env REFERENCE TO Environment.Variables;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		DECLARE outRef REFERENCE TO OutputRoot.JSON;
		CREATE LASTCHILD OF OutputRoot.JSON AS outRef NAME 'Data';
		DECLARE resQ CHARACTER Environment.MQRFH2.usr.resQueueName;
		SET Environment.Variables.ResponseQ = resQ;
		
		SET outRef.serviceCode=inRef.serviceCode;
		SET outRef.bearerCode=inRef.bearerCode;
		SET outRef.transactionAmount=inRef.transactionAmount;
		SET outRef.currency=inRef.currency;
		SET outRef.externalReferenceId=inRef.externalReferenceId;
		SET outRef.remarks=inRef.remarks;
		SET outRef.transactionMode=inRef.transactionMode;
		SET outRef.initiator=inRef.initiator;
		SET outRef.language=inRef.language;
		SET outRef.transactor.idType=inRef.transactor.idType;
		SET outRef.transactor.idValue=inRef.transactor.idValue;
		SET outRef.transactor.productId=inRef.transactor.productId;
		SET outRef.transactor.mpin=inRef.transactor.mpin;
		SET outRef.transactor.tpin=inRef.transactor.tpin;
		SET outRef.receiver.idType=inRef.receiver.idType;
		SET outRef.receiver.idValue=inRef.receiver.idValue;
		SET outRef.receiver.productId=inRef.receiver.productId;
		SET reqData=getPayLoad(FIELDNAME(InputBody),outRef,encodeRef,ccidRef);
		SET Environment.Variables.jsonData=outRef;
		SET OutputRoot = NULL;
		
		/* =================== CALLING DB LOGGING   ==============*/
	  IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.RequestIdentifier,reqData,'Mobiquity Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,
			Environment.MQRFH2.usr.retrievalReferenceNumber,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		/* ==================== Database Logging End ==================== */
	
		
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON.Data = Environment.Variables.jsonData;
			/* =================== CALLING  LOG4J LOGGING   ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			
			CALL writeToLogFile(MessageFlowLabel, 'CashInLogger', 'DEBUG','Request to Mobiquity::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'CashInLogger', 'DEBUG',reqData) INTO rc;
		END IF;
		/* =================== CALLING  LOG4J LOGGING ENDING  ==============*/
		
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = URL;
		
		END;
END MODULE;

CREATE COMPUTE MODULE CashInFlow_GenResToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateResToT24();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateResToT24() BEGIN
		SET Environment.MQMD = InputRoot.MQMD;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
	 	DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
	 	DECLARE inDomain CHARACTER FIELDNAME(InputBody);
	 	DECLARE outRef REFERENCE TO OutputRoot;
	 	DECLARE DomainDataRef REFERENCE TO InputRoot.JSON.Data;
	 	SET Environment.Variables.resData = getPayLoad(FIELDNAME(InputBody),DomainDataRef,encodeRef,ccsid);
	 	DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
	 	SET OutputRoot = NULL;
	 	DECLARE rc BOOLEAN FALSE;
	 	
	 	/* =================== CALLING  LOG4J LOGGING   ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			
			CALL writeToLogFile(MessageFlowLabel, 'CashInLogger', 'DEBUG','Response from Mobiquity::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'CashInLogger', 'DEBUG',getPayLoad(FIELDNAME(InputBody),DomainDataRef,encodeRef,ccsid)) INTO rc;
		END IF;
		/* =================== CALLING  LOG4J LOGGING ENDING  ==============*/
		/* =================== CALLING DB LOGGING   ==============*/
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resData,'Mobiquity Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		END IF; 
		/* =================== CALLING DB LOGGING ENDING  ==============*/
		
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		DECLARE OutRefer REFERENCE TO OutputRoot.JSON.Data;
		CREATE LASTCHILD OF OutputRoot.JSON AS OutRefer NAME 'Data';
		IF responceCode LIKE '200' THEN
			SET OutRefer=inRef;
		ELSE
			SET OutRefer.statusCode = '000';
			SET OutRefer.message = 'FAILURE';
			SET OutRefer.responseBody.source = 'ESB';
			SET OutRefer.responseBody.ServiveFlow = 'CASHOUT';
		END IF;
	--------------	
		DECLARE envref REFERENCE TO Environment.JSON.Data;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'JSON';
		CREATE LASTCHILD OF envref AS envref NAME 'Data';
		SET envref = OutRefer;
		SET OutputRoot = NULL;
		
		/* =================== CALLING DB LOGGING  ==============*/
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resData,'Application Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRef);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		END IF; 
		/* =================== CALLING DB LOGGING ENDING  ==============*/
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON.Data = envref;
		
		/* =================== CALLING LOG4J LOGGING  ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			DECLARE outDomainDataRef REFERENCE TO OutputRoot.JSON.Data;
			CALL writeToLogFile(MessageFlowLabel, 'CashInLogger', 'DEBUG','Application Response ::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'CashInLogger', 'DEBUG',getPayLoad(FIELDNAME(InputBody),outDomainDataRef,encodeRef,ccsid)) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.Variables.ResponseQ;
	END;
END MODULE;




	CREATE COMPUTE MODULE CashOutFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL BuildErrorMsg();
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildErrorMsg() BEGIN
	DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'MobiquityClientOut,connection refused') THEN
			SET errMsg = 'T24 Server Down';
		ELSEIF CONTAINS(excpRef.excpText,'MobiquityReceiveData,Exception whilst parsing') THEN
			SET errMsg = 'No Response from T24 Server';

		ELSEIF CONTAINS(excpRef.excpText,'SocketException') THEN
			SET errMsg = 'No Response from Mobiquity Server';
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'CashIn';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'CashIn');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('CashIn');
		CREATE LASTCHILD OF OutputRoot.JSON.Data.* NAME ('error');
		DECLARE errorRef REFERENCE TO OutputRoot.JSON.Data.*.error;
		SET errorRef.status = 'FAILED';
		SET errorRef.responseCode = '000';
		SET errorRef.source = 'ESB';
		SET errorRef.applicationName = ApplicationLabel;
		SET errorRef.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.CashIn.ErrorCode;
		SET errorRef.message = errMsg;
		MOVE domainDataRef TO OutputRoot.JSON;
		SET Environment.Variables.resMsg = getPayload('JSON',domainDataRef,encodeRef,ccidRef); 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES;  
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc; 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.CashIn.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;  

        END;
END MODULE;