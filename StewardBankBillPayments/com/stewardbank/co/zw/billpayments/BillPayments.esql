BROKER SCHEMA com.stewardbank.co.zw.billpayments

PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH,RAW_AUDIT_LOGGING,ERROR_AUDIT_LOGGING,EXCEPTION_QUEUE EXTERNAL CHARACTER'';
CREATE COMPUTE MODULE BillPayments_GenerateReqToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateReqToT24();
		RETURN FALSE;
	END;

	

	CREATE PROCEDURE GenerateReqToT24() BEGIN
		
		
	
	/* ==================== SETTING MQRFH2 DETAILS IN ENVIRANMENT ==================== */
		SET Environment.usr= InputRoot.MQRFH2.usr;
		/* ==================== DATA BASE LOGGING START ==================== */
		DECLARE outRefer REFERENCE TO OutputRoot;
		CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER),'Application Request',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;  
		PROPAGATE TO TERMINAL 'out1';
		SET OutputRoot=NULL;
		/* ==================== DATA BASE LOGGING ENDING ==================== */
		/* ==================== FRAMMING REQUEST TO T24 ==================== */
DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;  
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'billPaymentsDebug', 'DEBUG','..............Start Bill Payments logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'billPaymentsDebug', 'DEBUG','Request to Bill Payments::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'billPaymentsDebug', 'DEBUG',CAST(ASBITSTREAM(InputRoot.DFDL ENCODING 546 CCSID 1208 SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER)) INTO rc;
		CALL FieldToFieldMapping(inRef,outRef,'');
		
		SET Environment.dfdlData=OutputRoot.DFDL;
		SET OutputRoot=NULL;
		/* ==================== DATA BASE LOGGING ==================== */
		CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER),'T24 Request',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out1';
		/* ==================== DATA BASE LOGGING ENDING ==================== */
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.DFDL= Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'billPaymentsDebug', 'DEBUG','Request To T24::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'billPaymentsDebug', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER )) INTO rc;

PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;


CREATE COMPUTE MODULE BankBillPayments_GenerateResToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL BillPaymentsGenerateResToPostilion();
		RETURN FALSE;
	END;

	

	CREATE PROCEDURE BillPaymentsGenerateResToPostilion() BEGIN

	/* ==================== DATA BASE LOGGING ==================== */
		DECLARE outRefer REFERENCE TO OutputRoot;
		CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER),'T24 Response',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot=NULL;
		/* ==================== DATA BASE LOGGING ENDING ==================== */
		/* ==================== FRAMMING RESPONSE TO TCPIP ROUTER ==================== */
		DECLARE env REFERENCE TO Environment.Variables;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'billPaymentsDebug', 'DEBUG','.........................') INTO rc;
		--field to field mapping
		CALL FieldToFieldMapping(inRef,outRef,'');
		
		SET Environment.dfdlData=InputRoot.DFDL;
		SET OutputRoot=NULL;
		/* ==================== DATA BASE LOGGING ==================== */
		CALL DBLogging(Environment.usr.Id,CAST(ASBITSTREAM(InputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER),'Application Response',ApplicationLabel,BrokerName,Environment.usr.timeLocalTransaction,Environment.usr.dateLocalTransaction,Environment.usr.retrievalReferenceNumber,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
		/* ==================== DATA BASE LOGGING ENDING ==================== */
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQRFH2.usr=Environment.usr;
		SET OutputRoot.DFDL=Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'billPaymentsDebug', 'DEBUG','Request To Postilion::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'billPaymentsDebug', 'DEBUG',CAST(ASBITSTREAM(OutputRoot.DFDL ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER )) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.usr.resQueueName;
		PROPAGATE TO TERMINAL 'out';            
	END;
END MODULE;

CREATE COMPUTE MODULE BankBillPayments_CaptureException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
--		 CALL CopyMessageHeaders();
CALL BuildErrorMsg();
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;			
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'billPaymentsDebug', 'DEBUG','..............star Exception logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'billPaymentsDebug', 'DEBUG',CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING 546 CCSID 1208 SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER)) INTO rc;
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';
		END IF;
DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;


DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Id CHARACTER '';
		SET Id= CAST(Environment.usr.Id AS CHARACTER);
		
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'BillPayments';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		
		CALL BuildExceptionDetails(excpRef,outRef,'BillPayments');
		SET Environment.billPaymentsErrorCode=OutputRoot.XMLNSC;
		
		
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;	
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_QUEUE;
		PROPAGATE TO TERMINAL 'out';
		
		/* ==================== DATA BASE LOGGING ==================== */
		DECLARE exe_Desc CHARACTER'';  
		SET exe_Desc = CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		
		CALL Error_DBLogging(InputRoot.MQRFH2.usr.Id,InputRoot.MQRFH2.usr.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,InputRoot.MQRFH2.usr.timeLocalTransaction,InputRoot.MQRFH2.usr.dateLocalTransaction,InputRoot.MQRFH2.usr.retrievalReferenceNumber,CAST(InputRoot.XMLNSC.ExceptionDetails.excpNumber AS CHARACTER),Environment.billPaymentsErrorCode.BillPayments.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId ) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_LOGGING;
		PROPAGATE TO TERMINAL 'out';
			
	END;
END MODULE;

