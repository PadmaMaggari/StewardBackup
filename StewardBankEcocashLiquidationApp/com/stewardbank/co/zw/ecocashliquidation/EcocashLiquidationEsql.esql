BROKER SCHEMA com.stewardbank.co.zw.ecocashliquidation
PATH com.stewardbank.co.zw.common.esql;
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERROR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE resQueueName EXTERNAL CHARACTER '';
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER'';
DECLARE MobiquityURL EXTERNAL CHARACTER'';
DECLARE STB_T24URL,Eco_FormatFailure,Eco_DBFailure EXTERNAL CHARACTER''; 
DECLARE OTB_T24URL EXTERNAL CHARACTER'';
DECLARE UUID SHARED CHARACTER '';
CREATE COMPUTE MODULE EcocashLiquidationFlow_GenerateRequesttoMobiquity
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE DomainName CHARACTER FIELDNAME(InputBody);
		DECLARE MrchName CHARACTER InputRoot.DFDL.StewardBank_EcoCSV.record.MERCHANT_NAME;
		CASE
		WHEN DomainName LIKE 'DFDL' AND MrchName NOT LIKE 'MERCHANT_NAME' THEN
			SET UUID = UUIDASCHAR;
			SET Environment.Variables.UID = UUID;
			DECLARE rc BOOLEAN FALSE;
			CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
			IF ( rc = FALSE ) THEN
				SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
			END IF;
			DECLARE outRefer REFERENCE TO OutputRoot;
			DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
			DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
			DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
			DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
			DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
			DECLARE domainName CHARACTER 'StewardBank_EcoCSV';
			DECLARE FileName CHARACTER InputLocalEnvironment.File.Name;
			SET Environment.Variables.FileName	= SUBSTRING(FileName BEFORE '.csv'); 
			DECLARE reqMsg,CSV_Fields CHARACTER;
			SET reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
			SET Environment.Variables.reqMsg = reqMsg;
			SET CSV_Fields = 'MERCHANT_NAME,MSISDN,CODE,BANK_ACC_NAME,BRANCH_CODE,BANK_ACC_NUMBER,BANK,BRANCH_NAME,BALANCE_USD,TRANSFER_CHARGE_USD,BANK_CHARGE_USD,BATCH_DENTIFIER';
			DECLARE inRef REFERENCE TO InputRoot.DFDL.StewardBank_EcoCSV.record;
--			SET Environment.Variables.CSVData = InputRoot.DFDL; 
			SET Environment.Variables.csvData = inRef; 
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Environment.Variables.UID,reqMsg,'Incomming Message',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),'',outRefer);
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
				PROPAGATE TO TERMINAL 'out1';
			END IF;
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','..............Start Ecocash Liquidation Mobiquity Logging ...........') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','Message::'||Environment.Variables.reqMsg) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','ID::'||Environment.Variables.UID) INTO rc;
			END IF;
			DECLARE Bank CHARACTER inRef.BANK;
			CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
			DECLARE outRef REFERENCE TO OutputRoot.JSON;
			CREATE LASTCHILD OF OutputRoot.JSON AS outRef NAME 'Data';
			 DECLARE fxtid ROW;
			 DECLARE value INTEGER;
			 DECLARE value1 CHARACTER;
			-- set fxtid.values[] = PASSTHRU('select ECHOCASH_SEQ.NEXTVAL AS SEQ from DUAL');
			-- set value = fxtid.values.SEQ;
			-- set value1 = CAST(value as CHARACTER);
			 set fxtid.values[] = PASSTHRU('select ECHOCASH_SEQ.NEXTVAL AS SEQ from DUAL');
			 set value = fxtid.values.SEQ;
			 set value1 = CAST(value as CHARACTER);
			 DECLARE value2 CHARACTER;
			 DECLARE value3 CHARACTER;
			 set value3 = LENGTH(value1);
			 if (value3 = 1 or value3 = 2 or value3 = 3 or value3 = 4) then
			 set value2 = REPLACE(REPLACE(REPLACE(REPLACE(value3,'1','0000'),'2','000'),'3','00'),'4','0')||value1; 
			 else
			 set value2 = value1;
			 end IF;		
			---Field to Field Mapping of CSV to JSON---
			SET outRef.COMMAND.TYPE = 'DRSVA';
			SET outRef.COMMAND.MSISDN = InputRoot.DFDL.StewardBank_EcoCSV.record.MSISDN;
			SET outRef.COMMAND.IS_P2P_TRANSFER = 'Y';
			SET outRef.COMMAND.PROVIDER= '101';
			SET outRef.COMMAND.PAYID='12';
			SET outRef.COMMAND.BANKID= 'IND0410171'; 
			SET outRef.COMMAND.AMOUNT=InputRoot.DFDL.StewardBank_EcoCSV.record.BALANCE_USD;
			SET outRef.COMMAND.LANGUAGE1= '1';
			SET outRef.COMMAND.FTXNID= 'FTxnId'||value2;  
			SET outRef.COMMAND.USERTYPE= 'CHANNEL';
			set outRef.COMMAND.REMARKS='Remarks';
			SET outRef.COMMAND.BLOCKSMS='BOTH';
			SET outRef.COMMAND.PRIORITY_REQUEST_TYPE='';
			SET outRef.COMMAND.THRESHOLD_SERVICE_TYPE='';
			SET Environment.jsonData = OutputRoot.JSON.Data;
			SET Environment.Variables.outMsg = getPayLoad(FIELDNAME(OutputRoot.JSON),OutputRoot.JSON.Data,encodeRef,ccidRef);
			SET OutputRoot = NULL;
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Environment.Variables.UID,Environment.Variables.outMsg,'Mobiquity Request',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),'',outRefer);
				SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
				PROPAGATE TO TERMINAL 'out1';
			END IF;
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','..............Ecocash Liquidation Mobiquity API CALL ...........') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','Message::'||Environment.Variables.outMsg) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','MobiquityURL URL Request(POST)::'||MobiquityURL) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','ID::'||Environment.Variables.UID) INTO rc;
			END IF;
			----db insert------
			CALL INSERT_SB_ECOCASHLIQ(Environment.Variables.UID,Environment.Variables.outMsg,'','','','','','','EcocashLiquidation',CSV_Fields,'',reqMsg,'',FileName,'',CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss. SSSSSS'),'');
			-------------------------------------------			
			SET OutputRoot.Properties = InputRoot.Properties;
			SET OutputRoot.HTTPRequestHeader."Content-Type" = 'application/json'; 
			SET OutputRoot.JSON.Data = Environment.jsonData;
			SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'POST';
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = MobiquityURL;
			PROPAGATE TO TERMINAL 'out';
			RETURN FALSE;
		ELSE
			RETURN FALSE;
		END CASE;
	END;
END MODULE;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE EcocashLiquidationFlow_MobiquityStatus_GenerateToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL CopyEntireMessage();
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE EnvRefer REFERENCE TO Environment.Variables.csvData;
		DECLARE InRef REFERENCE TO InputRoot.JSON.Data.COMMAND;
		DECLARE TxnStatus CHARACTER InputRoot.JSON.Data.COMMAND.TXNSTATUS;
		DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE Env REFERENCE TO Environment.Variables;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Env.resMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		CASE
		WHEN responceCode LIKE '200' AND TxnStatus LIKE '200' THEN
			/* ===================AUDIT LOGGING ==============*/
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Env.UID,Env.resMsg,'Mobiquity Success Response',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),'',outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','Mobiquity Success Response') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','Response Message::'||Env.resMsg) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','ID::'||Environment.Variables.UID) INTO rc;
			END IF;
			/* =================== END OF AUDIT LOGGING ==============*/
			SET Environment.Variables.MobiquityRes = InputRoot.JSON.Data.COMMAND;
			------db Update--------------
			CALL UPDATE_SB_ECOCASH_STATUS(Env.UID,InRef.DATE,InRef.TIME,InRef.TYPE,InRef.TXNID,InRef.TXNSTATUS,InRef.TRID,'Success','','',CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss. SSSSSS'));
			-------------------------------------------------------
			IF EnvRefer.BANK LIKE 'STEWARD BANK' THEN
				DECLARE STBUrlParameters,SB_T24URL,STB_Msg CHARACTER;
				CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
				DECLARE outRef REFERENCE TO OutputRoot.JSON;
				CREATE LASTCHILD OF OutputRoot.JSON AS outRef NAME 'Data';
				SET OutputRoot.HTTPRequestHeader."Content-Type" = 'application/json';
				SET outRef.debitAccountId = '1000000163'; 
				SET outRef.debitCurrency = 'ZWL';
				SET outRef.creditAccountId = EnvRefer.BANK_ACC_NUMBER;
				SET outRef.orderingCustomerName = EnvRefer.MERCHANT_NAME; 
				SET outRef.paymentCurrency = 'ZWL'; 
				SET outRef.transactionAmount = EnvRefer.BALANCE_USD;
				SET outRef.executionDate = CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd');
				SET outRef.narrative = EnvRefer.BATCH_IDENTIFIER;
				SET outRef.invoiceReference = EnvRefer.CODE;
				SET Environment.Variables.SB_jsonData = OutputRoot.JSON.Data;
				--{debitAccountId}/{debitCurrency}/{creditAccountId}/{orderingCustomerName}/{paymentCurrency}/{transactionAmount}/{executionDate}/{narrative}/{invoiceReference}
				--{debitAccountId}/{debitCurrency}/{creditAccountId}/{orderingCustomerName}/{paymentCurrency}/{transactionAmount}/{executionDate}/{narrative}/{invoiceReference}
				SET STBUrlParameters ='1000000163'||'/'||'ZWL'||'/'||EnvRefer.BANK_ACC_NUMBER||'/'|| EnvRefer.MERCHANT_NAME||'/'||'ZWL'||'/'||EnvRefer.BALANCE_USD||'/'||CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd')||'/'||EnvRefer.BATCH_IDENTIFIER||'/'||EnvRefer.CODE;
				SET SB_T24URL = STB_T24URL||STBUrlParameters;
				SET STB_Msg = getPayLoad(FIELDNAME(OutputRoot.JSON),OutputRoot.JSON.Data,encodeRef,ccidRef); 
				SET OutputRoot = NULL;
				IF IsLogRequired LIKE 'Y' THEN
					CALL DBLogging(Environment.Variables.UID,STB_Msg,'STB T24 Request',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),'',outRefer);
					SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
					PROPAGATE TO TERMINAL 'out1';
				END IF;
				IF IsLogRequired LIKE 'Y' THEN
					CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','..............Ecocash Liquidation STB T24 API CALL ...........') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','STB Message::'||STB_Msg) INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','T24 URL Request(POST)::'||SB_T24URL) INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','ID::'||Environment.Variables.UID) INTO rc;
				END IF;
				SET OutputRoot.Properties = InputRoot.Properties;
				--SET OutputRoot.JSON.Data = Environment.Variables.SB_jsonData;
				SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'POST';
				SET OutputLocalEnvironment.Destination.HTTP.RequestURL = SB_T24URL;
				PROPAGATE TO TERMINAL 'out';
			ELSE
				DECLARE OTBUrlParameters,OB_T24URL,OTB_Msg CHARACTER;
				CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
				DECLARE outRef REFERENCE TO OutputRoot.JSON;
				CREATE LASTCHILD OF OutputRoot.JSON AS outRef NAME 'Data';
				SET OutputRoot.HTTPRequestHeader."Content-Type" = 'application/json';
				SET outRef.beneficiaryAccountId = EnvRefer.MSISDN;
				SET outRef.beneficiaryBIC = EnvRefer.BANK;
				SET outRef.beneficiaryName = EnvRefer.MERCHANT_NAME;
				SET outRef.endToEndReference = EnvRefer.BRANCH_NAME;
				SET outRef.paymentCurrency = 'ZWL';
				SET outRef.transactionAmount = EnvRefer.BALANCE_USD;
				SET outRef.executionDate = CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd');
				SET outRef.orderingReference = EnvRefer.BATCH_IDENTIFIER;
				SET outRef.orderingCustomerName = EnvRefer.BANK_ACC_NAME;
				SET Environment.Variables.OTB_Msg = OutputRoot.JSON.Data;
				--{merchantName}/{paymentCurrency}/{liquidationAmount}/{executionDate}/{batchIdentifier}/{branchName}/{ecocashlAcctId}/{currency}/{bankAccName}/{bank}/{bankAccNumber}				
				--{beneficiaryAccountId}/{beneficiaryBIC}/{beneficiaryName}/{endToEndReference}/{paymentCurrency}/{transactionAmount}/{executionDate}/{orderingReference}/{orderingCustomerName}
				SET OTBUrlParameters = EnvRefer.MSISDN||'/'||EnvRefer.BANK||'/'||EnvRefer.MERCHANT_NAME||'/'||EnvRefer.BRANCH_NAME||'/'||'ZWL'||'/'||EnvRefer.BALANCE_USD||'/'||CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd')||'/'||EnvRefer.BATCH_IDENTIFIER||'/'||EnvRefer.BANK_ACC_NAME;
				SET OB_T24URL = STB_T24URL||OTBUrlParameters;
				SET OTB_Msg = getPayLoad(FIELDNAME(OutputRoot.JSON),OutputRoot.JSON.Data,encodeRef,ccidRef);
				SET OutputRoot = NULL;
				IF IsLogRequired LIKE 'Y' THEN
					CALL DBLogging(Environment.Variables.UID,OTB_Msg,'OTB T24 Request',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),'',outRefer);
					SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
					PROPAGATE TO TERMINAL 'out1';
				END IF;
				IF IsLogRequired LIKE 'Y' THEN
					CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','..............Ecocash Liquidation OTB T24 API CALL ...........') INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','OTB Message::'||OTB_Msg) INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','T24 URL Request(POST)::'||OB_T24URL) INTO rc;
					CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','ID::'||Environment.Variables.UID) INTO rc;
				END IF;
				SET OutputRoot.Properties = InputRoot.Properties;
				--SET OutputRoot.JSON.Data = Environment.Variables.OTB_Msg;
				SET OutputLocalEnvironment.Destination.HTTP.RequestLine.Method = 'POST';
				SET OutputLocalEnvironment.Destination.HTTP.RequestURL = OTB_T24URL||OTBUrlParameters;
				PROPAGATE TO TERMINAL 'out';
			END IF;
		ELSE
			/* ===================Mobiquity AUDIT LOGGING ==============*/
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Env.UID,Env.resMsg,'Mobiquity Failure Response',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),'',outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','Mobiquity Failure Response') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','Failure Message::'||Env.resMsg) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','TXNSTATUS::'||TxnStatus) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationMobiquityLogger', 'DEBUG','ID::'||Environment.Variables.UID) INTO rc;
			END IF;
			/* =================== END OF AUDIT LOGGING ==============*/
			CALL UPDATE_SB_ECOCASH_STATUS(Env.UID,InRef.DATE,InRef.TIME,InRef.TYPE,InRef.TXNID,InRef.TXNSTATUS,InRef.TRID,'Failure','Failure',InRef.TXNSTATUS,CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss. SSSSSS'));
			/* ===================T24 AUDIT LOGGING ==============*/
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Env.UID,Env.resMsg,'T24 Failure Response',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),'',outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out1';
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','T24 Failure Response') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','Failure Message::'||Env.resMsg) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','ID::'||Environment.Variables.UID) INTO rc;
			END IF;
			/* =================== END OF AUDIT LOGGING ==============*/
		END CASE;
	END;
END MODULE;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE EcocashLiquidationFlow_T24StatusUpdate
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET OutputRoot.Properties=InputRoot.Properties;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE Env REFERENCE TO Environment.Variables;
		SET Env.resMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		SET Env.data = inRef;
		DECLARE envRef REFERENCE TO Environment.Variables.MobiquityRes;
		DECLARE responceCode CHARACTER InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		CASE
		WHEN responceCode LIKE '200' OR inRef.header.status LIKE 'success' THEN
			---DB Logging---
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Env.UID,Env.resMsg,'T24 Success Response',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),'',outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','..........Logging T24 Generated Response...............') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','T24 Response:: SUCCESS') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG',Env.resMsg) INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','ID::'||Environment.Variables.UID) INTO rc;
			END IF;

			CALL UPDATE_SB_ECOCASH_STATUS(Env.UID,envRef.DATE,envRef.TIME,envRef.TYPE,envRef.TXNID,envRef.TXNSTATUS,envRef.TRID,'Success','Success',responceCode,CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss. SSSSSS'));
			SET outRef = Env.data;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
			PROPAGATE TO TERMINAL 'out';
		ELSE
			---Failure Case---
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Env.UID,Env.resMsg,'T24 Failure Response',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),'',outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'EcocashLiquidationT24Logger', 'DEBUG','T24 Response:: FAILURE'||'/'||'ResponseCode::'||responceCode) INTO rc;
			END IF;
			CALL UPDATE_SB_ECOCASH_STATUS(Env.UID,envRef.DATE,envRef.TIME,envRef.TYPE,envRef.TXNID,envRef.TXNSTATUS,envRef.TRID,'Success','Failure',responceCode,CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyy-MM-dd HH:mm:ss. SSSSSS'));
			SET OutputRoot.JSON.Data = Env.data;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
			PROPAGATE TO TERMINAL 'out';
		END CASE;
	END;
END MODULE;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE COMPUTE MODULE EcocashLiquidationFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		RETURN FALSE;
	END;
	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE inRefer REFERENCE TO  Environment.Variables.csvData;   
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		IF CONTAINS(excpRef.excpText,'Database') OR CONTAINS(excpRef.excpText,'T24ClientOut,connection refused') OR CONTAINS(excpRef.excpText,'SocketException') THEN  
			SET OutputLocalEnvironment.Destination.File.Directory = Eco_DBFailure||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMdd');
			SET OutputLocalEnvironment.Destination.File.Name = Environment.Variables.FileName||'_'||inRefer.BANK_ACC_NUMBER||'_'||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'HHmmss')||'.csv';   
		ELSE
			SET OutputLocalEnvironment.Destination.File.Directory = Eco_FormatFailure||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMdd'); 
			SET OutputLocalEnvironment.Destination.File.Name = Environment.Variables.FileName||'_'||inRefer.BANK_ACC_NUMBER||'_'||CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'HHmmss')||'.csv';   
		END IF;
		SET OutputRoot.Properties.MessageSet = InputRoot.Properties.MessageSet;
		SET OutputRoot.Properties.MessageType = InputRoot.Properties.MessageType;    
		CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL')PARSE(Environment.Variables.reqMsg ENCODING encodeRef CCSID ccidRef SET '{SB_EcoCSV_Lib}' TYPE '{}:StewardBank_EcoCSV');   
		PROPAGATE TO TERMINAL 'out1'; 
		--DECLARE Id CHARACTER CAST(Environment.MQRFH2.usr.Id AS CHARACTER);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'EcocashLiquidation';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'EcocashLiquidation');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		DECLARE Env REFERENCE TO Environment.Variables;
		---Failure Case Status Tracking---
		/* =================== CALLING LOG4J LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Start Logging Application Related Exception ...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
		/* =================== CALLING DB LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL Error_DBLogging(Environment.Variables.UID,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'ddMM'),'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.EcocashLiquidation.ErrorCode,outRefer);
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		/* =================== CALLING DB LOGGING ENDING ==============*/
		----------------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		DECLARE outJsonRef REFERENCE TO OutputRoot.JSON.Data;
		SET outJsonRef.statusCode = '000';
		SET outJsonRef.message = 'FAILURE';
		SET outJsonRef.responseBody.source = 'ESB';
		SET outJsonRef.responseBody.applicationName = FIELDNAME(Environment.Variables.UserDefinedErrorCodes.EcocashLiquidation);
		SET outJsonRef.responseBody.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.EcocashLiquidation.ErrorCode;
		SET outJsonRef.responseBody.applicationErrorType = Environment.Variables.UserDefinedErrorCodes.EcocashLiquidation.ErrorType;
		/* =================== CALLING LOG4J LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Response To Frond End System in case of Failure:'||getPayLoad(FIELDNAME(OutputRoot.JSON),outJsonRef,encodeRef,ccidRef)) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','End of Logging Application Related Exception') INTO rc;
		END IF;
		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE INSERT_SB_ECOCASHLIQ(IN GUID CHARACTER,IN MOBIQUITY_MESSAGE CHARACTER, IN ECOCASH_DATE CHARACTER
,IN ECOCASH_TIME CHARACTER,IN MOBIQUITY_TYPE CHARACTER,IN TXNID CHARACTER,IN TXNSTATUS CHARACTER,IN TRID CHARACTER,IN APPLICATION_NAME CHARACTER,
IN CSV_FIELDS CHARACTER,IN MOBIQUITY_STATUS CHARACTER,IN T24_MESSAGE CHARACTER,IN T24_STATUS CHARACTER,IN CSV_FILENAME CHARACTER,
IN RESPONSE_CODE CHARACTER,IN DATE_CREATED CHARACTER,IN DATE_UPDATED CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "INSERT_SB_ECOCASHLIQ_TRACKING";


CREATE PROCEDURE UPDATE_SB_ECOCASH_STATUS(IN GUID CHARACTER,IN ECOCASH_DATE CHARACTER,IN ECOCASH_TIME CHARACTER,IN MOBIQUITY_TYPE CHARACTER,
IN TXNID CHARACTER,IN TXNSTATUS CHARACTER,IN TRID CHARACTER,IN MOBIQUITY_STATUS CHARACTER,IN T24_STATUS CHARACTER,IN RESPONSE_CODE CHARACTER,IN DATE_UPDATED CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "UPDATE_SB_ECOCASH_STATUS";