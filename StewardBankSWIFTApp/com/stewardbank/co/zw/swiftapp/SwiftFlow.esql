BROKER SCHEMA com.stewardbank.co.zw.swiftapp
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH,LOG4J_INIT_ERROR,SB_EXCQ,ERROR_AUDIT_Q,SWIFT_SB_Q,OUTQ,IsLogRequired,Url EXTERNAL CHARACTER '';
DECLARE UUID SHARED CHARACTER '';
CREATE COMPUTE MODULE SwiftFlow_GenerateMt103Req
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildMT103FromRaw();
		RETURN TRUE;
	END;
		/*
	build MT103 from raw data recevied from remote location
	*/
	CREATE PROCEDURE BuildMT103FromRaw() BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.BLOB;
		SET Environment.File.Name = InputLocalEnvironment.File.Name;
		IF (InputLocalEnvironment.File.Name NOT LIKE ' ') THEN
			SET Environment.File.Status = 'SUCCESS';
		ELSE
			SET Environment.File.Status = 'FAILURE'; 	
		END IF;
		SET Environment.reqMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG','..............Start Swift Application logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG','Swift Request in RAW data in BLOB start') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG',Environment.reqMsg) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG','Swift Request in RAW data end') INTO rc;
		END IF;
		SET OutputRoot.Properties.MessageSet = '{MT103}';
		SET OutputRoot.Properties.MessageType = '{}:MT103';
		CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL')
		parse(InputRoot.BLOB.BLOB ENCODING encodeRef CCSID ccidRef SET '{MT103}' TYPE '{}:MT103');
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;
		IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG','Swift Request in MT103:') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG',getPayLoad(FIELDNAME(OutputRoot.DFDL.MT103),outDomainDataRef,encodeRef,ccidRef)) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG','Swift Request MT103 end') INTO rc;
		END IF;
	END;
END MODULE;
CREATE COMPUTE MODULE SwiftFlow_GenetateReqToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		CALL GenetateReqToT24();
		RETURN TRUE;
	END;
	/*
	Log Incoming Request i.e MT103 in RTGS_INCOMING_DETAILS Table and form ISO8583 if account is in T24 or
	else form MT103 
	*/
	CREATE PROCEDURE GenetateReqToT24() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE reqMsg CHARACTER ;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR;
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG','..............Start SWIFT  Req To T24 logging...........') INTO rc;
		DECLARE Response ROW;
		SET UUID = UUIDASCHAR;
		SET Environment.Guid = UUID;
		DECLARE SettlementAmt CHARACTER SUBSTRING(inDomainDataRef.MT103.body.MT32A FROM 10); 
		DECLARE Amt CHARACTER LTRIM(SettlementAmt); 
		DECLARE CR CHARACTER CAST(CAST('X''0A''' AS BLOB) AS CHARACTER CCSID ccidRef);
		DECLARE LF CHARACTER CAST(CAST('X''0D''' AS BLOB) AS CHARACTER CCSID ccidRef);
		DECLARE MT50Data CHARACTER SUBSTRING(SUBSTRING(SUBSTRING(inDomainDataRef.MT103.body.MT50Data.MT50DataField BEFORE CR) BEFORE LF) FROM 2);
		DECLARE MT59Data CHARACTER SUBSTRING(SUBSTRING(SUBSTRING(inDomainDataRef.MT103.body.MT59Data.MT59DataField BEFORE CR) BEFORE LF) FROM 2);
		SET reqMsg = getPayLoad(FIELDNAME(OutputRoot.DFDL.MT103),inDomainDataRef,encodeRef,ccidRef);
		IF IsLogRequired LIKE 'Y' THEN
		 CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG','***************Account Exixts in T24 **********') INTO rc;
		 CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG','**************T24 Request Message **********') INTO rc;
		 CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG',reqMsg) INTO rc;
		 CALL writeToLogFile(MessageFlowLabel, 'SwiftLog', 'DEBUG','..............End of SWIFT  ReqToT24 logging...........') INTO rc;
		END IF;
		--***************Inserting values in  ISAVE table ***************************
		CALL insertIntoSbIsaveTable(UUID,CAST(inDomainDataRef.MT103.header.Block1.SessionNumber AS CHARACTER),CAST(CURRENT_TIMESTAMP AS CHARACTER),CAST(inDomainDataRef.MT103.header.Block1.SequenceNum AS CHARACTER),'','',Environment.File.Name,'',Amt,MT50Data,MT59Data,'','',reqMsg,'',Environment.File.Status,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
		CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{MT103}' TYPE '{}:MT103')  ENCODING encodeRef CCSID ccidRef SET '{MT103}' TYPE '{}:MT103');
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = Url;
		END;
		END MODULE;
		--*************Updating Database Status ******************
		CREATE COMPUTE MODULE rtgsIncomingFlow_UpdateDatabaseStatus
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL UpdateDatabaseStatus();
		RETURN TRUE;
	END;
	CREATE PROCEDURE UpdateDatabaseStatus() BEGIN
		--Need to update the Db status---
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = SWIFT_SB_Q;
	END;
END MODULE;
		--************Build Exception Details*******************
		CREATE COMPUTE MODULE rtgsIncomingFlow_GenerateExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		CALL BuildErrorMsg();
		RETURN FALSE;
	END;
	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE dbLoggingDate TIMESTAMP CURRENT_DATE;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.XMLNSC;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR;
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','..............Start RTGSIncoming Exception logging...........') INTO rc;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE exe_Desc CHARACTER'';  
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'Swift';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;    
		CALL BuildExceptionDetails(excpRef,outRef,'Swift');
		SET Environment.userDefineError = OutputRoot.XMLNSC;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = SB_EXCQ ;
		PROPAGATE TO TERMINAL 'out';
				-- DB Logging===================
		SET exe_Desc = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		CALL writeToLogFile(MessageFlowLabel,'ErrorLogger','ERROR','Exception Details: '||exe_Desc) INTO rc ;
		CALL Error_DBLogging(Environment.Guid,Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),' ',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.Swift.ErrorCode,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','..............End RTGSIncoming Exception logging...........') INTO rc;
	END;
END MODULE;
--*************Procedure to insert Values into SB_ISAVE_TABLE**********************************
	CREATE PROCEDURE insertIntoSbIsaveTable(IN PAYNET_GUID CHARACTER,IN PAYNET_STAN_NUM CHARACTER, IN PAYNET_STANDATE CHARACTER
,IN PAYNET_RRN_REF CHARACTER,IN PAYNET_ISO_REQUEST_MSG CHARACTER,IN PAYNET_ISO_RESPONSE_CODE CHARACTER,IN PAYNET_MT103_FILENAME CHARACTER,IN PAYNET_MT103_FIELDS CHARACTER,IN PAYNET_MT103_AMOUNT CHARACTER,
IN PAYNET_MT103_DTACCOUNT CHARACTER,IN PAYNET_MT103_CRACCOUNT CHARACTER,IN PAYNET_MT103_DTDATE CHARACTER,IN PAYNET_MT103_T24_MSG CHARACTER,
IN PAYNET_ZSS_STATUS CHARACTER,IN PAYNET_T24_STATUS CHARACTER,IN PAYNET_MT103_STATUS CHARACTER,IN PAYNET_DATECREATED TIMESTAMP,IN PAYNET_DATEUPDATED TIMESTAMP)
	LANGUAGE DATABASE
	EXTERNAL NAME "INSERT_SB_ISAVE_TABLE";

