/*
Author:Swathi
Version:0.0.1
Date of Creation:16-05-2020
Date of Modification:6-06-2020
Description:Pick file from remote location and based on the account send request to t24 or zss.
			If it is t24 account then send MT103 else send ISO8583 to ZSS.
 			
*/
BROKER SCHEMA com.stewardbank.co.zw.rtgsincoming
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH,LOG4J_INIT_ERROR,SB_EXCQ,ERROR_AUDIT_Q,RTGS_INCOMING_SB_Q,IsLogRequired,Url EXTERNAL CHARACTER '';
DECLARE UUID SHARED CHARACTER '';


CREATE COMPUTE MODULE rtgsIncomingFlow_GenerateReqToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL BuildMT103FromRaw();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	/*
	build MT103 from raw data recevied from remote location
	*/
	CREATE PROCEDURE BuildMT103FromRaw() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.BLOB;
		SET Environment.File.Name = InputLocalEnvironment.File.Name;
		IF (InputLocalEnvironment.File.Name NOT LIKE ' ') THEN
			SET Environment.File.Status = 'SUCCESS';
		ELSE
			SET Environment.File.Status = 'FAILURE'; 	
		END IF;
		SET Environment.reqMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','..............Start RTGSIncoming logging...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','RTGSIncoming Request in RAW data start') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG',Environment.reqMsg) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','RTGSIncoming Request in RAW data end') INTO rc;
		END IF;
		SET OutputRoot.Properties.MessageSet = '{MT103}';
		SET OutputRoot.Properties.MessageType = '{}:MT103';
		CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL')
		parse(InputRoot.BLOB.BLOB ENCODING encodeRef CCSID ccidRef SET '{MT103}' TYPE '{}:MT103');
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;
		IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','RTGSIncoming Request Original start') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG',getPayLoad(FIELDNAME(OutputRoot.DFDL.MT103),outDomainDataRef,encodeRef,ccidRef)) INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','RTGSIncoming Request Original end') INTO rc;
		END IF;
	END;
END MODULE;


CREATE COMPUTE MODULE rtgsIncomingFlow_ReqToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		CALL GeneratingReqToT24orZSS();
		RETURN FALSE;
	END;
	/*
	Log Incoming Request i.e MT103 in RTGS_INCOMING_DETAILS Table and form ISO8583 if account is in T24 or
	else form MT103 
	*/
	CREATE PROCEDURE GeneratingReqToT24orZSS() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE reqMsg,Str CHARACTER ;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inDomainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE sql,invoiceReference CHARACTER;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','..............Start RTGSIncoming  ReqToPostilion logging...........') INTO rc;
		END IF;
		DECLARE Response ROW;
		DECLARE CRLF CHARACTER CAST(X'0D0A' AS CHARACTER CCSID 1208);
		SET UUID = UUIDASCHAR;
		SET Environment.Variables.Guid = UUID;
		DECLARE Mt50DataAdd CHARACTER SUBSTRING(inDomainDataRef.MT103.body.MT50Data.MT50DataField AFTER CRLF);
		DECLARE exeDate CHARACTER SUBSTRING(inDomainDataRef.MT103.body.MT32A FROM 1 FOR 6);
		DECLARE transactionAmount CHARACTER LTRIM(SUBSTRING(inDomainDataRef.MT103.body.MT32A FROM 10)) ; 
		DECLARE debitCurrency CHARACTER SUBSTRING(inDomainDataRef.MT103.body.MT32A FROM 7 FOR 3); 
		DECLARE ordCustomerName CHARACTER SUBSTRING(Mt50DataAdd BEFORE CRLF);
		DECLARE narrative CHARACTER LTRIM(inDomainDataRef.MT103.body.MT20);
		DECLARE mtField70 CHARACTER inDomainDataRef.MT103.body.MT70 ;
		IF ( mtField70 NOT LIKE ' ' ) THEN
			SET invoiceReference = SUBSTRING(mtField70 BEFORE CRLF);
		ELSE
			SET invoiceReference ='NOTPROVIDED';
		END IF;
		DECLARE drAcctId CHARACTER SUBSTRING(SUBSTRING(inDomainDataRef.MT103.body.MT50Data.MT50DataField AFTER '/')BEFORE CRLF);
		DECLARE crAcctId CHARACTER SUBSTRING(SUBSTRING(inDomainDataRef.MT103.body.MT59Data.MT59DataField AFTER '/')BEFORE CRLF);
		--get account details from db to check weather Account belongs to Zss or T24
		SET sql='SELECT * FROM ISAVE_CARD_MAPPING WHERE ACCOUNT_ID=?';
		SET Response.accountEnquiry[]=PASSTHRU(sql VALUES(crAcctId));
		--*************If Account Exist in Isave table or it starts with 2 then it is ZSS Account**********
		IF EXISTS(Response.accountEnquiry.*[]) OR STARTSWITH(crAcctId,'2') THEN
			--mapping mt103 to iso8583
			SET OutputRoot.Properties.MessageSet = '{ISO8583_Lib}';
			SET OutputRoot.Properties.MessageType = '{}: ISO8583_1987';
			CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
			CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
			DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
			SET outRef.MTI_Version = 0;
			SET outRef.MTI_MessageClass = 2;
			SET outRef.MTI_MessageFunction = 0;
			SET outRef.MTI_MessageOrigin = 0;
			SET outRef.AmountTransaction_004 = CAST(SUBSTRING(SUBSTRING(inDomainDataRef.MT103.body.MT32A  BEFORE ',') FROM 10) AS DECIMAL);
			SET outRef.CurrencyCodeTransaction_049 = SUBSTRING(SUBSTRING(inDomainDataRef.MT103.body.MT32A  BEFORE ',') FROM 1 FOR 3);
			SET outRef.AccountIdentification1_102 = drAcctId;
			SET outRef.AccountIdentification2_103 = crAcctId;
			CALL UpdateMsgWithAsciiBitMap(outRef);
			SET reqMsg = getPayLoad(FIELDNAME(OutputRoot.DFDL),outRef,encodeRef,ccidRef);
			CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','***************Account Exixts in ZSS **********') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','**************Zss Request Message **********') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG',reqMsg) INTO rc;
			 --******************Inserting ISAVE table with ZSS Request Message ************
				CALL insertIntoSbIsaveTable(UUID,CAST(inDomainDataRef.MT103.header.Block1.SessionNumber AS CHARACTER),CAST(CURRENT_TIMESTAMP AS CHARACTER),CAST(inDomainDataRef.MT103.header.Block1.SequenceNum AS CHARACTER),reqMsg,'',Environment.File.Name,'',transactionAmount,drAcctId,crAcctId,exeDate,'','','','',Environment.File.Status,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,'');
			  PROPAGATE TO TERMINAL 'out';
		ELSE
--			CREATE LASTCHILD OF OutputRoot DOMAIN('DFDL') PARSE(ASBITSTREAM(InputRoot.DFDL CCSID ccidRef SET '{MT103}' TYPE '{}:MT103')  ENCODING encodeRef CCSID ccidRef SET '{MT103}' TYPE '{}:MT103');
--			SET reqMsg = getPayLoad(FIELDNAME(OutputRoot.DFDL.MT103),inDomainDataRef,encodeRef,ccidRef);
			 --Framing Rest Request To T24 Url--------
			 CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
		 DECLARE outRef REFERENCE TO OutputRoot.JSON;
		 CREATE LASTCHILD OF OutputRoot.JSON AS outRef NAME 'Data';
		  SET outRef.debitAccountId = drAcctId;
		  SET outRef.debitCurrency = debitCurrency;
		  SET outRef.orderingCustomerName = ordCustomerName;
		  SET outRef.paymentCurrency = debitCurrency ;
		  SET outRef.transactionAmount = transactionAmount ;
		  SET outRef.executionDate = exeDate;
		  SET outRef.narrative = narrative;
		  SET outRef.invoiceReference = invoiceReference;
		 -- Appending path parameters to stiring--
		  SET Str = drAcctId||'/'||debitCurrency||'/'||ordCustomerName||'/'||debitCurrency||'/'||transactionAmount||'/'||exeDate||'/'||narrative||'/'||invoiceReference;
		  SET reqMsg = getPayLoad(FIELDNAME(outRef),outRef,encodeRef,ccidRef);
		 --******************Insertingvalues into ISAVE table with T24 Request Message ************
			CALL insertIntoSbIsaveTable(UUID,CAST(inDomainDataRef.MT103.header.Block1.SessionNumber AS CHARACTER),CAST(CURRENT_TIMESTAMP AS CHARACTER),CAST(inDomainDataRef.MT103.header.Block1.SequenceNum AS CHARACTER),'','',Environment.File.Name,'',transactionAmount,drAcctId,crAcctId,exeDate,reqMsg,'','','',Environment.File.Status,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,'');
			 SET OutputLocalEnvironment.Destination.HTTP.RequestURL = Url||Str ;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','..............End RTGSIncoming  ReqToPostilion logging...........') INTO rc;
		END;
		END MODULE;
CREATE COMPUTE MODULE rtgsIncomingFlow_UpdateDatabaseStatus
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL UpdateDatabaseStatus();
		RETURN TRUE;
	END;
	CREATE PROCEDURE UpdateDatabaseStatus() BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		--DECLARE inDomain REFERENCE TO InputRoot.DFDL;
		DECLARE rc BOOLEAN FALSE;
--		DECLARE status CHARACTER 'SUCCESS';
		DECLARE id CHARACTER Environment.Guid;
		
		--***************Updating Database with Zss/T24 Status and Response codes***********************
		CASE
		WHEN FIELDNAME(InputRoot.JSON) IS NOT NULL THEN
			 CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','***************Updating T24 Status in Database**********') INTO rc;
--			 IF (InputRoot.HTTPResponseHeader.X-Original-HTTP-Status-Code = 200) THEN
--			 	CALL UpdateDBStatus(id,'SUCCESS',' ',' ','T24');
--			 ELSE
--			 	CALL UpdateDBStatus(id,'FALUIRE',' ',' ','T24');
--			 END IF;
			CALL UpdateDBStatus(id,'SUCCESS',' ',' ','T24');
		WHEN FIELDNAME(InputRoot.DFDL.ISO8583_1987) IS NOT NULL THEN
			CALL writeToLogFile(MessageFlowLabel, 'RTGSIncoming', 'DEBUG','***************Updating ZSS Status in Database**********') INTO rc;
			IF(InputRoot.ISO8583_1987.ResponseCode_039 LIKE '00')  THEN
				CALL UpdateDBStatus(id,'SUCCESS',CAST(InputRoot.DFDL.ISO8583_1987.ResponseCode_039 AS CHARACTER),CAST(InputRoot.DFDL.ISO8583_1987.RetrievalReferenceNumber_037 AS CHARACTER),'ISO');
			ELSE
				CALL UpdateDBStatus(id,'FAILURE',CAST(InputRoot.DFDL.ISO8583_1987.ResponseCode_039 AS CHARACTER),CAST(InputRoot.DFDL.ISO8583_1987.RetrievalReferenceNumber_037 AS CHARACTER),'ISO');
			END IF;
		END CASE;
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RTGS_INCOMING_SB_Q;
	END;
END MODULE;
CREATE COMPUTE MODULE rtgsIncomingFlow_GenerateExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		CALL BuildErrorMsg();
		RETURN FALSE;
	END;
	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE dbLoggingDate TIMESTAMP CURRENT_DATE;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.XMLNSC;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF (rc = FALSE) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','..............Start RTGSIncoming Exception logging...........') INTO rc;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE exe_Desc CHARACTER'';  
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'RTGSIncoming';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;    
		CALL BuildExceptionDetails(excpRef,outRef,'RTGSIncoming');
		SET Environment.userDefineError = OutputRoot.XMLNSC;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = SB_EXCQ ;
		PROPAGATE TO TERMINAL 'out';
				-- DB Logging===================
		SET exe_Desc = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		CALL writeToLogFile(MessageFlowLabel,'ErrorLogger','ERROR','Exception Details: '||exe_Desc) INTO rc ;
		CALL Error_DBLogging(Environment.Variables.Guid,Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),' ',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.RTGSIncoming.ErrorCode,outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','..............End RTGSIncoming Exception logging...........') INTO rc;
	END;
END MODULE;
--*************Procedure to insert Values into SB_ISAVE_TABLE**********************************
	CREATE PROCEDURE insertIntoSbIsaveTable(IN PAYNET_GUID CHARACTER,IN PAYNET_STAN_NUM CHARACTER, IN PAYNET_STANDATE CHARACTER
,IN PAYNET_RRN_REF CHARACTER,IN PAYNET_ISO_REQUEST_MSG CHARACTER,IN PAYNET_ISO_RESPONSE_CODE CHARACTER,IN PAYNET_MT103_FILENAME CHARACTER,IN PAYNET_MT103_FIELDS CHARACTER,IN PAYNET_MT103_AMOUNT CHARACTER,
IN PAYNET_MT103_DTACCOUNT CHARACTER,IN PAYNET_MT103_CRACCOUNT CHARACTER,IN PAYNET_MT103_DTDATE CHARACTER,IN PAYNET_MT103_T24_MSG CHARACTER,IN PAYNET_ISO_FT CHARACTER,
IN PAYNET_ZSS_STATUS CHARACTER,IN PAYNET_T24_STATUS CHARACTER,IN PAYNET_MT103_STATUS CHARACTER,IN PAYNET_DATECREATED TIMESTAMP,IN PAYNET_DATEUPDATED TIMESTAMP,IN TAXABLE CHARACTER)
	LANGUAGE DATABASE
	EXTERNAL NAME "INSERT_SB_ISAVE_PAYNET";
		--*********************Procedure to Update Database Status***************
	CREATE PROCEDURE UpdateDBStatus (IN PAYNET_ID CHARACTER,IN PAYNET_STATUS CHARACTER,IN PAYNET_RESPONSE_CODE CHARACTER,IN PAYNET_REFNUM CHARACTER,IN STR CHARACTER)
	LANGUAGE DATABASE
	EXTERNAL NAME "UPDATE_STASUS_SB_ISAVE";
	
	