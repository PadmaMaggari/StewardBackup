BROKER SCHEMA com.stewardbank.co.zw.smallworldremit
PATH  com.stewardbank.co.zw.common.esql; 

DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';	
DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';     
DECLARE IsLogRequired EXTERNAL CHARACTER'';
DECLARE ALL_SB_SOAP_RES_Q EXTERNAL CHARACTER'';
DECLARE soapenv EXTERNAL NAMESPACE '';
DECLARE URL EXTERNAL CHARACTER;
DECLARE ns NAMESPACE 'http://www.example.org/SmallWorldRemitWSDL/';
DECLARE ns1 EXTERNAL NAMESPACE '';

CREATE COMPUTE MODULE SmallWorldRemit_GenReqToSmallWorld
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL GenerateReqToSmallWorld();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateReqToSmallWorld() BEGIN
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		SET Environment.Variables.RequestIdentifier = InputRoot.MQRFH2.usr.SoapReplyIdentifier;
		DECLARE reqMsg,bindingOperatingName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE DBDetails ROW;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE serviseName REFERENCE TO InputRoot.SOAP.Body.[1];
		SET bindingOperatingName = FIELDNAME(serviseName);
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.SOAP.Body,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.reqMsg = reqMsg;
		 SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(InputRoot.MQRFH2.usr.Destination.SOAP.Reply.ReplyIdentifier,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
			/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
			/* =================== CALLING LOG4J LOGGING  ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldLogger', 'DEBUG','..............Start Application Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldLogger', 'DEBUG','Incoming Request::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldLogger', 'DEBUG',reqMsg) INTO rc;
		END IF;
		
		CASE
			
		WHEN bindingOperatingName LIKE 'acknowledgeTransactionExport' THEN
			
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outRefSoap REFERENCE TO OutputRoot.SOAP;
		SET outRefSoap.Context[] = InputRoot.SOAP.Context[];
		SET outRefSoap.Header[] = InputRoot.SOAP.Header[];
		SET outRefSoap.Body.ns:acknowledgeTransactionExport.arg0=InputRoot.SOAP.Body.ns:acknowledgeTransactionExport.arg0;
		SET outRefSoap.Body.ns:acknowledgeTransactionExport.arg1=InputRoot.SOAP.Body.ns:acknowledgeTransactionExport.arg1;
		SET outRefSoap.Body.ns:acknowledgeTransactionExport.arg2=InputRoot.SOAP.Body.ns:acknowledgeTransactionExport.arg2;
		
		WHEN bindingOperatingName LIKE 'getMTNByFolio' THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outRefSoap REFERENCE TO OutputRoot.SOAP;
		SET outRefSoap.Context[] = InputRoot.SOAP.Context[];
		SET outRefSoap.Header[] = InputRoot.SOAP.Header[];
		SET outRefSoap.Body.ns:getMTNByFolio.arg0=InputRoot.SOAP.Body.ns:getMTNByFolio.arg0;
		SET outRefSoap.Body.ns:getMTNByFolio.arg1=InputRoot.SOAP.Body.ns:getMTNByFolio.arg1;
		SET outRefSoap.Body.ns:getMTNByFolio.arg2=InputRoot.SOAP.Body.ns:getMTNByFolio.arg2;
		END CASE;
		
		DECLARE OutRefer REFERENCE TO OutputRoot.SOAP;
		DECLARE envref REFERENCE TO Environment.SOAP;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'SOAP';
		SET envref = OutRefer;
		DECLARE reqData CHARACTER'';
		SET Environment.reqData = getPayLoad(FIELDNAME(InputBody),OutputRoot.SOAP.Body,encodeRef,ccsid);
		
		
		SET OutputRoot = NULL;
		
		
		/* =================== CALLING LOG4J LOGGING ENDING  ==============*/
		/* =================== CALLING DB RAW AUDIT LOGGING  ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldLogger', 'DEBUG','..............Start T24 Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldLogger', 'DEBUG','T24 Request::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldLogger', 'DEBUG',Environment.reqMsg) INTO rc;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(InputRoot.MQRFH2.usr.Destination.SOAP.Reply.ReplyIdentifier,Environment.reqMsg,'T24  Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.SOAP = envref;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Operation  = bindingOperatingName;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = URL;
		PROPAGATE TO TERMINAL 'out';
		
		END;
END MODULE;
   
CREATE COMPUTE MODULE SmallWorldRemit_ResToFrontEnd
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL GenerateResToT24();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateResToT24() BEGIN
			DECLARE rc BOOLEAN FALSE;
			/* =================== CALLING LOG4J LOGGING  ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc; 			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		SET Environment.resMsg = getPayLoad(FIELDNAME(InputBody),inRef.SOAP.Body,encodeRef,ccsid);
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		IF IsLogRequired LIKE 'Y' THEN
		CALL DBLogging(Environment.MQRFH2.usr.Destination.SOAP.Reply.ReplyIdentifier,Environment.resMsg,'Small World Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out1';
		END IF; 
			/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldLogger', 'DEBUG','..............Start T24 Response  logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldLogger', 'DEBUG','SmallWorld Response::') INTO rc; 
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldLogger', 'DEBUG',Environment.resMsg) INTO rc;
		END IF;
		
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.SOAP = InputRoot.SOAP;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'ALL_SB_SOAP_RES_Q';
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;
 
CREATE COMPUTE MODULE SmallWorldRemit_BuildExceptionDetails
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL BuildException();
		RETURN FALSE;
	END;

	

	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE mqrfRef REFERENCE TO InputRoot.MQRFH2;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;  
		IF CONTAINS(excpRef.excpText,'SocketException') THEN
			
			SET errMsg = 'T24 Server Down';
			CALL errorResponse(mqrfRef,'T24 Server Down','ESB_001',ApplicationLabel);
		END IF;
		
		
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
--		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SmallWorld';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SmallWorld');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
--		
		
		
		
		
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SmallWorld.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;  
		PROPAGATE TO TERMINAL 'out';  
		----------------------------------	
	END;
	
	CREATE PROCEDURE errorResponse(IN mqrfRef REFERENCE, IN msg CHAR,IN errorCode CHAR,IN applicationLabel CHAR)
	BEGIN
              SET OutputRoot.MQRFH2 = mqrfRef;
			SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:ns1 = ns1;
			SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:Message=msg;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ErrorCode=errorCode;
			SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ServiceName=applicationLabel;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'SOAP_RES_Q';
			
			PROPAGATE TO TERMINAL 'out';
--		END IF;
	END;
END MODULE;






