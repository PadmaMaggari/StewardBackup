

BROKER SCHEMA com.stewardbank.co.zw.salarycorporatepaymentst24call

PATH com.stewardbank.co.zw.common.esql;
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERROR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE resQueueName EXTERNAL CHARACTER '';
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER'';
DECLARE URL EXTERNAL CHARACTER'';

CREATE COMPUTE MODULE SalaryCorporatePaymentsT24CallFlow_RequestToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL RequestToT24();
		RETURN TRUE;
	END;
	CREATE PROCEDURE RequestToT24() BEGIN
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		DECLARE reqMsg,T24URL CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE inRefer REFERENCE TO InputRoot.DFDL.stewardBank_CSV.record;
		DECLARE batchId CHARACTER inRefer.Tran_ID;
		--DECLARE batchId CHARACTER;
		-- DECLARE LF CHARACTER CAST(X'0A' AS CHARACTER CCSID 1208);
		-- SET batchId = SUBSTRING(batchID AFTER LF);
		DECLARE debitCurrency CHARACTER inRefer.Currency;
		DECLARE orderingCustomerName CHARACTER inRefer.Remitter_Name;
		DECLARE paymentCurrency CHARACTER inRefer.Currency;
		DECLARE transactionAmount CHARACTER inRefer.Amount;
		DECLARE tiime CHARACTER;
		DECLARE str CHARACTER;
		DECLARE executionDate CHARACTER;
		SET tiime = inRefer.Date; ---29/06/2020---
		SET str = SUBSTRING(tiime FROM 7 FOR 4)||SUBSTRING(tiime FROM 4 FOR 2)||SUBSTRING(tiime FROM 1 FOR 2); --'YYYYMMDD');--20200629
		SET executionDate = CAST(str AS CHARACTER FORMAT 'YYYYMMDD');
		DECLARE invoiceReference CHARACTER inRefer.Purpose;
		DECLARE creditAccountId CHARACTER inRefer.Beneficiary_Account_Number;
		DECLARE customer CHARACTER inRefer.Beneficiary_Name;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_TIMESTAMP;
		-- --DECLARE csvDate DATE CAST(inRefer.Date AS DATE FORMAT 'yyyyMMdd');
		-- DECLARE source CHARACTER ;---29/06/2020---
		DECLARE csvDate CHARACTER;
		SET str = SUBSTRING(tiime FROM 7 FOR 4)||SUBSTRING(tiime FROM 4 FOR 2)||SUBSTRING(tiime FROM 1 FOR 2);
		DECLARE pattern CHARACTER 'yyyyMMdd';
		SET csvDate = CAST(str AS CHARACTER FORMAT pattern);
		--DECLARE csvDate DATE CAST(inRefer.Date AS DATE FORMAT 'DD/MM/YYYY');
		SET Environment.Variables.FileName = InputRoot.MQRFH2.FileName;
		SET Environment.Variables.Fields = 'tran id,date, remitter account number, beneficiary bank name, beneficiary bank code, beneficiary account number, beneficiary name, amount, currency, purpose, remitter name';
		SET Environment.Variables.Amount = inRefer.Amount;
		SET Environment.Variables.Dbt_Acc = inRefer.Remitter_Account_Number;
		SET Environment.Variables.Crt_Acc = inRefer.Beneficiary_Account_Number;
		SET Environment.Variables.CsvDate = CAST(csvDate AS CHARACTER);
		SET Environment.Variables.CreationDate = CAST(CURRENT_TIMESTAMP AS TIMESTAMP);
		SET Environment.Variables.RRN = inRefer.Purpose;
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.Variables.reqMsg = reqMsg;
		SET Environment.Variables.UID = InputRoot.MQRFH2.UID;
		DECLARE Env REFERENCE TO Environment.Variables;
		SET Env.FileNameCheck = SUBSTRING(Environment.Variables.FileName FROM 1 FOR 2);
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET T24URL = URL||batchId||'/'||debitCurrency||'/'||orderingCustomerName||'/'||paymentCurrency||'/'||transactionAmount||'/'||executionDate||'/'||invoiceReference||'/'||creditAccountId||'/'||customer;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		-- IF IsLogRequired LIKE 'Y' THEN
		--
		-- CALL DBLogging(Environment.Variables.UID,Environment.Variables.reqMsg,'T24 Application Request',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),inRefer.Purpose,outRefer);
		-- SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		-- PROPAGATE TO TERMINAL 'out1';
		-- END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		/* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET Environment.Variables.data = InputRoot.DFDL;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','..............Start Salary & Corporate Payments T24 logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','Incoming Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG',reqMsg) INTO rc;
		END IF;
		SET Environment.Variables.data = InputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		SET OutputRoot.JSON.Data = InputRoot.DFDL;
		SET Environment.Variables.jsonData = OutputRoot.JSON.Data;
		SET OutputRoot = NULL;
		/* =================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Env.UID,T24URL,'T24  Request',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),inRefer.Purpose,outRefer);
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','Generate T24 URL POST Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG',T24URL) INTO rc;
		END IF;
		/*=============Log4j End===============*/
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		/*================DB Update=======================*/
		IF Env.FileNameCheck LIKE 'PO' THEN
			CALL INSERT_SB_ISAVE_PAYNET_TRX_TRACKING(Env.UID,'','','',Environment.Variables.reqMsg,'',Env.FileName,Env.Fields,Env.Amount,Env.Dbt_Acc,Env.Crt_Acc,Env.CsvDate,
			'','','','','SUCCESS',Env.CreationDate,CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'TRUE');
		ELSE
			CALL INSERT_SB_ISAVE_PAYNET_TRX_TRACKING(Env.UID,'','','',Environment.Variables.reqMsg,'',Env.FileName,Env.Fields,Env.Amount,Env.Dbt_Acc,Env.Crt_Acc,Env.CsvDate,
			'','','','','SUCCESS',Env.CreationDate,CAST(CURRENT_TIMESTAMP AS TIMESTAMP),'FALSE');
		END IF;
		/*=============End===============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON.Data = Environment.Variables.jsonData;
		MOVE outRefer TO OutputRoot.JSON;    
		--http://192.168.1.233:8080/stwbc/api/v1.0.0/stwb/payments/salaries/{batchId}/{debitCurrency}/{orderingCustomerName}/{paymentCurrency}/{transactionAmount}/{executionDate}/{invoiceReference}/{creditAccountId}/{customer}
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = URL||'/'||batchId||'/'||debitCurrency||'/'||orderingCustomerName||'/'||paymentCurrency||'/'||transactionAmount||'/'||executionDate||'/'||invoiceReference||'/'||creditAccountId||'/'||customer;
	END;
END MODULE;


CREATE COMPUTE MODULE SalaryCorporatePaymentsT24CallFlow_GenereateResponseToChannel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenereateResponseToChannel();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenereateResponseToChannel() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET OutputRoot.Properties=InputRoot.Properties;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE Env REFERENCE TO Environment.Variables;
		SET Env.resMsg = getPayLoad(FIELDNAME(InputRoot.JSON),domainDataRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		SET Env.data = inRef;
		SET Environment.Variables.Statuscode = InputRoot.HTTPResponseHeader.{'X-Original-HTTP-Status-Code'}; 
		CASE
		WHEN  Env.Statuscode LIKE  '200' OR inRef.header.status LIKE 'success' THEN 
			---Success Case---
			IF Env.FileNameCheck LIKE 'PO' THEN
				CALL UPDATE_STATUS_SB_ISAVE(Env.UID,inRef.header.id,CAST(Env.CreationDate AS CHARACTER),inRef.body.endToEndReference,'00','SUCCESS','','TRUE');
			ELSE
				CALL UPDATE_STATUS_SB_ISAVE(Env.UID,inRef.header.id,CAST(Env.CreationDate AS CHARACTER),inRef.body.endToEndReference,'00','SUCCESS','','FALSE');
			END IF;
			---DB Logging---
			IF IsLogRequired LIKE 'Y' THEN
				CALL DBLogging(Env.UID,Env.resMsg,'T24 Success Response',ApplicationLabel,BrokerName,inRef.body.executionDate,inRef.body.executionDate,inRef.body.endToEndReference,outRefer);
			END IF;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
			PROPAGATE TO TERMINAL 'out';
			----------------------
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','..........Logging generated Response...............') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','T24 Response::') INTO rc;
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG',Env.resMsg) INTO rc;
			END IF;
			SET outRef = Env.data;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
			PROPAGATE TO TERMINAL 'out';
		ELSE
			---Failure Case---
			IF Env.FileNameCheck LIKE 'PO' THEN
				CALL UPDATE_STATUS_SB_ISAVE(Env.UID,'','','','','FAILURE','','TRUE');
			ELSE
				CALL UPDATE_STATUS_SB_ISAVE(Env.UID,'','','','','FAILURE','','FALSE');
			END IF;
			IF IsLogRequired LIKE 'Y' THEN
				CALL writeToLogFile(MessageFlowLabel, 'SalaryCorporatePaymentsT24Logger', 'DEBUG','T24 Response:: FAILURE') INTO rc;
			END IF;
			SET OutputRoot.JSON.Data = Env.data;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = resQueueName;
			PROPAGATE TO TERMINAL 'out';
		END CASE;
	END;
END MODULE;


CREATE COMPUTE MODULE SalaryCorporatePaymentsT24CallFlow_BuildException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		RETURN TRUE;
	END;
	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		--DECLARE Id CHARACTER CAST(Environment.MQRFH2.usr.Id AS CHARACTER);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SalaryCorporatePaymentsT24';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SalaryCorporatePaymentsT24');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE inRefer REFERENCE TO InputRoot.DFDL.stewardBank_CSV.record;
		SET Environment.Variables.RRN = inRef.Purpose;
		SET Environment.Variables.UID = InputRoot.MQRFH2.UID;
		DECLARE Env REFERENCE TO Environment.Variables;
		/* =================== CALLING LOG4J LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Start Logging Application Related Exception ...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
		/* =================== CALLING DB LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL Error_DBLogging(Env.UID,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(Env.Date_Time AS CHARACTER),CAST(Env.Date_Time AS CHARACTER),Env.RRN,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SalaryCorporatePaymentsT24.ErrorCode,outRefer);
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		/* =================== CALLING DB LOGGING ENDING ==============*/
		----------------------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		DECLARE outJsonRef REFERENCE TO OutputRoot.JSON.Data;
		SET outJsonRef.statusCode = '000';
		SET outJsonRef.message = 'FAILURE';
		SET outJsonRef.responseBody.source = 'ESB';
		SET outJsonRef.responseBody.applicationName = FIELDNAME(Environment.Variables.UserDefinedErrorCodes.SalaryCorporatePaymentsT24);
		SET outJsonRef.responseBody.applicationErrorCode = Environment.Variables.UserDefinedErrorCodes.SalaryCorporatePaymentsT24.ErrorCode;
		SET outJsonRef.responseBody.applicationErrorType = Environment.Variables.UserDefinedErrorCodes.SalaryCorporatePaymentsT24.ErrorType;
		SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = CAST(Environment.MQRFH2.RequestIdentifier AS BLOB);
		/* =================== CALLING LOG4J LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Response To Frond End System in case of Failure:'||getPayLoad(FIELDNAME(OutputRoot.JSON),outJsonRef,encodeRef,ccidRef)) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','End of Logging Application Related Exception') INTO rc;
		END IF;
		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
		PROPAGATE TO TERMINAL 'out1';
		----------------------------------
	END;
END MODULE;




CREATE PROCEDURE INSERT_SB_ISAVE_PAYNET_TRX_TRACKING (IN PAYNET_GUID CHARACTER,IN PAYNET_STAN_NUM CHARACTER, IN PAYNET_STANDATE CHARACTER
,IN PAYNET_RRN_REF CHARACTER,IN PAYNET_ISO_REQUEST_MSG CHARACTER,IN PAYNET_ISO_RESPONSE_CODE CHARACTER,IN PAYNET_CSV_FILENAME CHARACTER,IN PAYNET_CSV_FIELDS CHARACTER,IN PAYNET_CSV_AMOUNT CHARACTER,
IN PAYNET_CSV_DTACCOUNT CHARACTER,IN PAYNET_CSV_CRACCOUNT CHARACTER,IN PAYNET_CSV_DTDATE CHARACTER,IN PAYNET_ISO_MSG CHARACTER,
IN PAYNET_ISO_FT CHARACTER,IN PAYNET_ZSS_STATUS CHARACTER,IN PAYNET_T24_STATUS CHARACTER,IN PAYNET_CSV_STATUS CHARACTER,IN PAYNET_DATECREATED TIMESTAMP,IN PAYNET_DATEUPDATED TIMESTAMP,IN PAYNET_TAXABLE CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "INSERT_SB_ISAVE_PAYNET_TRX_TRACKING";



CREATE PROCEDURE UPDATE_STATUS_SB_ISAVE(IN PAYNET_ID CHARACTER,IN PAYNET_STAN_NUM CHARACTER,IN PAYNET_STANDATE CHARACTER,IN PAYNET_RRN_REF CHARACTER,
IN PAYNET_ISO_RESPONSE_CODE CHARACTER,IN PAYNET_ZSS_STATUS CHARACTER,IN PAYNET_T24_STATUS CHARACTER,IN PAYNET_TAXABLE CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "UPDATE_SB_ISAVE_STATUS";