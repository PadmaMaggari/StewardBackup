BROKER SCHEMA com.stewardbank.co.zw.nanoloaneligibilitycheck
path com.stewardbank.co.zw.common.esql;
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERROR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ExceptionQ EXTERNAL CHARACTER '';
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE LoanEligibilityUrl,ALL_SB_HTTP_RES,IsLogRequired EXTERNAL CHARACTER '';
CREATE COMPUTE MODULE nanoLoanEligibityConsumerFlow_GeneratingRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		 CALL GenerateRequest();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateRequest() BEGIN
		DECLARE mobileNumber CHARACTER;
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE dbLoggingDate TIMESTAMP CURRENT_DATE;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		SET Environment.Variables.reqMsg = getPayLoad(FIELDNAME(InputBody),domainDataRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		--***************************DBLogging************************
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),' ',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		SET Environment.dbLog = OutputRoot.XMLNSC;
		PROPAGATE TO TERMINAL 'out1';
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;	
		
		-- ********************Log4j ********************************
		IF ( rc = FALSE ) THEN  
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN	
			CALL writeToLogFile (MessageFlowLabel,'NanoLoanEligibility','DEBUG','=================== Request Received from HttpRouter To NanoLoan Eligibility App ================') INTO rc;
--			SET req = CAST(ASBITSTREAM(InputRoot.XMLNSC CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
			CALL writeToLogFile (MessageFlowLabel,'NanoLoanEligibility','DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL writeToLogFile (MessageFlowLabel,'NanoLoanEligibility','DEBUG','=================== Request End ================') INTO rc;
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties; 
		--SET OutputRoot = InputRoot;
		SET mobileNumber = domainDataRef.mobileNumber ;
		SET  OutputLocalEnvironment.Destination.HTTP.RequestURL = LoanEligibilityUrl||mobileNumber ;
		IF IsLogRequired LIKE 'Y' THEN	
		CALL writeToLogFile (MessageFlowLabel,'NanoLoanEligibility','DEBUG','=================== Request to DWH Provider================') INTO rc;
		CALL writeToLogFile (MessageFlowLabel,'NanoLoanEligibility','DEBUG','DWH Provider Url:'||LoanEligibilityUrl||mobileNumber) INTO rc;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE nanoLoanEligibityConsumerFlow_GeneratingReponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GeneratingResponse();
		RETURN FALSE;
	END;
	CREATE PROCEDURE GeneratingResponse() BEGIN
		DECLARE dbLoggingDate TIMESTAMP CURRENT_DATE;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		SET Environment.Variables.Statuscode = InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code";
		DECLARE resMsg CHARACTER;
		IF FIELDNAME(InputBody) LIKE 'JSON' THEN
			DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
			SET resMsg = getPayLoad(FIELDNAME(InputBody),inRef,encodeRef,ccidRef);
		ELSE
			DECLARE inRef REFERENCE TO InputRoot.BLOB.BLOB;
			SET resMsg = getPayLoad(FIELDNAME(InputBody),inRef,encodeRef,ccidRef);
		END IF;
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;	
		-- ********************Log4j ********************************
		IF ( rc = FALSE ) THEN  
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		IF IsLogRequired LIKE 'Y' THEN	
		CALL writeToLogFile (MessageFlowLabel,'NanoLoanEligibility','DEBUG','=================== Response  Received  From DWH Provider================') INTO rc;
		CALL writeToLogFile (MessageFlowLabel,'NanoLoanEligibility','DEBUG','Response Message:'|| resMsg) INTO rc;
		END IF;
		DECLARE outRefer REFERENCE TO OutputRoot;
		--*****************DB logging ***********************
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,resMsg,'Application Response',ApplicationLabel,BrokerName,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),' ',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		SET Environment.dbLog = OutputRoot.XMLNSC;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot = NULL ;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		IF CONTAINS(CAST(Environment.Variables.Statuscode AS CHARACTER),'200') THEN
			SET OutputRoot.JSON.Data = InputRoot.JSON.Data;
		ELSE
			SET OutputRoot.JSON.Data.error = resMsg;
		END IF;
		
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.MQRFH2.usr.resQueueName;
		IF IsLogRequired LIKE 'Y' THEN	
		CALL writeToLogFile (MessageFlowLabel,'NanoLoanEligibility','DEBUG','=================== Response  to HTTPResponseRouter================') INTO rc;
		PROPAGATE TO TERMINAL 'out';
		END IF;
	END;
END MODULE;
CREATE COMPUTE MODULE nanoLoanEligibityConsumerFlow_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildExceptionResponse();
		RETURN TRUE;
	END;
	CREATE PROCEDURE BuildExceptionResponse() BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		DECLARE dbLoggingDate TIMESTAMP CURRENT_DATE;
		DECLARE dbLoggingTime TIMESTAMP CURRENT_TIME;
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'T24ClientOut,connection refused') OR CONTAINS(excpRef.excpText,'SocketException') OR CONTAINS(excpRef.excpText,'A connection attempt failed') THEN
		SET errMsg = 'T24 Server Down or No connection to T24';
		END IF;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'NanoLoanCheck';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'NanoLoanCheck');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);  
		SET OutputRoot.XMLNSC = NULL;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		SET OutputRoot.JSON.Data.error = COALESCE(errMsg,Environment.Variables.UserDefinedErrorCodes.NanoLoanCheck.ErrorType,'');
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ALL_SB_HTTP_RES ;
		PROPAGATE TO TERMINAL 'out';
		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ExceptionQ;
		PROPAGATE TO TERMINAL 'out';
		------------Error  Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,CAST(dbLoggingTime AS CHARACTER FORMAT 'HHmmss'),CAST(dbLoggingDate AS CHARACTER FORMAT 'yyyyMMdd'),' ',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.NanoLoanCheck.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_Q;
		
	END;
	END MODULE;
	

