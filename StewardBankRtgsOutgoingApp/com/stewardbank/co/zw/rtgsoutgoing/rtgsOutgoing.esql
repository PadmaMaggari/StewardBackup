
/*
Author:Rathod Veerender
Version:0.0.1
Date of Creation:02-04-2020
Date of Modification:15-04-2020,16-04-2020,24-04-2020,04-05-2020,05-05-2020,06-05-2020
Description:Business flow pick Request from RTGS_OUT_SB_TCP_REQ queue and Generate request in esb and send to t24
and validate the response
and send it to outgoing router queue(ALL_SB_TCP_RES).
*/
BROKER SCHEMA com.stewardbank.co.zw.rtgsoutgoing
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE BAcct EXTERNAL CHARACTER'';
DECLARE BBCode EXTERNAL CHARACTER'';
DECLARE BName EXTERNAL CHARACTER'';
DECLARE BRef EXTERNAL CHARACTER'';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER'';
CREATE COMPUTE MODULE rtgsOutgoing_GenerateReqTo24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToT24();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateReqToT24() BEGIN

		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			DECLARE msg CHARACTER ;
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		--------------DBLogging-------------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.Id,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.timeLocalTransaction,Environment.MQRFH2.usr.dateLocalTransaction,
			Environment.MQRFH2.usr.retrievalReferenceNumber,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-----------------------------
		DECLARE env REFERENCE TO Environment.Variables;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		--set response queue and tcpip connection id in environment
		DECLARE resQ CHARACTER Environment.MQRFH2.usr.resQueueName;
		DECLARE connId CHARACTER Environment.MQRFH2.usr.Id;
		SET Environment.Variables.ResponseQ = resQ;
		SET Environment.Variables.TcpIp.ConnectionId = connId;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','..............Initializing RTGS Outgoinglogging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','..............ISO Message parsed successfully...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','Request from Postilion::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','TCPIP ID::'|| InputRoot.MQRFH2.usr.Id) INTO rc;
		END IF;
		--field to field mapping
		DECLARE envUsrRef REFERENCE TO Environment.MQRFH2.usr;
		DECLARE posRef REFERENCE TO Environment.DFDL.ISO8583_1987;
		IF FIELDNAME(inRef.StructuredDataPostilionPrivate_127_22) is NOT NULL AND LENGTH(inRef.StructuredDataPostilionPrivate_127_22) > 5 THEN
			CALL keyValuePair127_22(envUsrRef,inRef);
			IF EXISTS(envUsrRef.structuredData127_22.value[]) THEN
				 CALL getValueByKey(envUsrRef,BAcct);
				 CALL getValueByKey(envUsrRef,BBCode) ;
				 CALL getValueByKey(envUsrRef,BName);
				 CALL getValueByKey(envUsrRef,BRef);
			END IF;
		END IF;
		CALL FieldToFieldMapping(inRef,outRef,'',envUsrRef,posRef);
		SET Environment.DFDL = OutputRoot.DFDL;
		DECLARE removeRefPointer REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		CALL remove127(removeRefPointer);
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET Environment.Variables.resMsg = getPayLoad(domainName,outRef,encodeRef,ccidRef);
		----- Database Logging ------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.Id,Environment.Variables.resMsg,'T24 Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.timeLocalTransaction,Environment.MQRFH2.usr.dateLocalTransaction,Environment.MQRFH2.usr.retrievalReferenceNumber,outRefer);
		END IF;
		
		IF IsLogRequired LIKE 'Y' THEN    
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','Request To T24::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','TCPIP ID::'|| InputRoot.MQRFH2.usr.Id) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		SET OutputRoot.DFDL = NULL;
		PROPAGATE TO TERMINAL 'out1';
		----------------------
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;
		
	END;


END MODULE;


CREATE COMPUTE MODULE rtgsOutgoingCaptureException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		RETURN FALSE;
	END;

	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		SET Environment.Variables.Id = COALESCE(InputRoot.MQRFH2.usr.Id,Environment.MQRFH2.usr.Id,'');
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET Environment.Variables.Id = COALESCE(InputRoot.MQRFH2.usr.Id,Environment.MQRFH2.usr.Id,'');
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		--DECLARE Id CHARACTER CAST(Environment.MQRFH2.usr.Id AS CHARACTER);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'RTGS';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'RTGS');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		IF IsLogRequired LIKE 'Y' THEN
			CALL Error_DBLogging(Environment.Variables.Id,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.timeLocalTransaction,Environment.MQRFH2.usr.dateLocalTransaction,Environment.MQRFH2.usr.retrievalReferenceNumber,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.RTGS.ErrorCode,outRefer);
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		----------------------------------
	END;
END MODULE;

CREATE COMPUTE MODULE rtgsOutgoingT24Req_GenerateReqToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateResToPostilion();
		RETURN FALSE;
	END;

	CREATE PROCEDURE GenerateResToPostilion() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		SET Environment.Properties = InputRoot.Properties;
		SET Environment.MQMD = InputRoot.MQMD;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE domainDataRef REFERENCE TO InputRoot.DFDL;
		DECLARE inRef REFERENCE TO InputRoot.DFDL.ISO8583_1987;
		DECLARE outRefer REFERENCE TO OutputRoot;
		SET Environment.Variables.resData = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		-----------DBLogging------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.Id,Environment.Variables.resData,'T24 Response',ApplicationLabel,BrokerName,inRef.SystemsTraceAuditNumber_011,inRef.DateLocalTransaction_013,inRef.RetrievalReferenceNumber_037,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		SET Environment.resData = OutputRoot.JSON.Data;
		PROPAGATE TO TERMINAL 'out';
		--------------------
		CREATE LASTCHILD OF OutputRoot DOMAIN ('DFDL');
		DECLARE outRef REFERENCE TO OutputRoot.DFDL;
		CREATE LASTCHILD OF OutputRoot.DFDL AS outRef NAME 'ISO8583_1987';
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','..........Logging generated Response...............') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','T24 Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG',Environment.Variables.resData) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','TCPIP ID::'|| Environment.MQRFH2.usr.Id) INTO rc;
		END IF;
		--field to field mapping
		DECLARE posRef REFERENCE TO Environment.DFDL.ISO8583_1987;
		CALL FieldToFieldMapping(inRef,outRef,'',posRef,posRef);
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET Environment.Variables.resMsg = getPayLoad(domainName,outRef,encodeRef,ccidRef);
		----- Database Logging ------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.Id,Environment.Variables.resMsg,'Application Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.timeLocalTransaction,Environment.MQRFH2.usr.dateLocalTransaction,Environment.MQRFH2.usr.retrievalReferenceNumber,outRefer);
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		SET OutputRoot.DFDL = NULL;
		PROPAGATE TO TERMINAL 'out';
		----------------------
		SET OutputRoot.Properties = Environment.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.DFDL = Environment.dfdlData;
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','RTGS Outgoing Response To Postilion::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'RTGSLogger', 'DEBUG','TCPIP ID::'|| Environment.MQRFH2.usr.Id) INTO rc;
		END IF;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.MQRFH2.usr.resQueueName;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;