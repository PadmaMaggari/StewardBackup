





BROKER SCHEMA com.stewardbank.co.zw.smallworldremitpickups
PATH com.stewardbank.co.zw.common.esql;

DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_QNAME EXTERNAL CHARACTER '';
DECLARE ERROR_AUDIT_QNAME EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER'';
DECLARE SOAP_RES_Q EXTERNAL CHARACTER'';
DECLARE request_Time_Out EXTERNAL CHARACTER'';
DECLARE Protocal EXTERNAL CHARACTER'';
DECLARE URL EXTERNAL CHARACTER'';

DECLARE soapenv EXTERNAL NAMESPACE '';
DECLARE ns NAMESPACE 'http://webservice.ie.smallworldfs.com/';
DECLARE ns1 EXTERNAL NAMESPACE '';

CREATE COMPUTE MODULE SmallWorldRemitAcknowledgeTransactionExport_GenReqToSWAcknowledgeTransaction
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL GenerateReqToSmallWorldAcknowledgeTransactionExport();
		RETURN FALSE;
	END;

	CREATE PROCEDURE GenerateReqToSmallWorldAcknowledgeTransactionExport() BEGIN
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		SET Environment.Variables.RequestIdentifier = InputRoot.MQRFH2.usr.SoapReplyIdentifier;
		DECLARE reqMsg,bindingOperatingName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE DBDetails ROW;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE serviceName REFERENCE TO InputRoot.SOAP.Body.[<];
		SET bindingOperatingName = FIELDNAME(serviceName);
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.SOAP,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.reqMsg = reqMsg;
		SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CREATE LASTCHILD OF InputRoot DOMAIN 'SOAP';
		DECLARE inRefSoap REFERENCE TO InputRoot.SOAP;
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		/* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;

		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','..............Start Application Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','Incoming Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG',reqMsg) INTO rc;
		END IF;
		/* ========================== FIELD TO FIELD MAPPING =============================================== */
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outRefSoap REFERENCE TO OutputRoot.SOAP;
		SET outRefSoap.Context.operation=inRefSoap.Context.operation;
		SET outRefSoap.Context.operationType = inRefSoap.Context.operationType;
		SET outRefSoap.Context.portType = inRefSoap.Context.portType;
		SET outRefSoap.Context.portTypeNamespace = inRefSoap.Context.portTypeNamespace;
		SET outRefSoap.Context.port = inRefSoap.Context.port;
		SET outRefSoap.Context.service = inRefSoap.Context.service;
		SET outRefSoap.Context.fileName = inRefSoap.Context.fileName;
		SET outRefSoap.Context.SOAP_Version = inRefSoap.Context.SOAP_Version;
		SET outRefSoap.Context.Namespace.soapenv = soapenv;
		SET outRefSoap.Context.Namespace.web = ns;     
		SET outRefSoap.Context.XmlRoot.Envelope.Header = inRefSoap.Context.XmlRoot.Envelope.Header;
		SET outRefSoap.Context.XmlRoot.Envelope.Body = inRefSoap.Context.XmlRoot.Envelope.Body;
		SET outRefSoap.Header[] = inRefSoap.Header[];
		SET outRefSoap.Body.ns:acknowledgeTransactionExport.arg0=inRefSoap.Body.ns:acknowledgeTransactionExport.arg0;
		SET outRefSoap.Body.ns:acknowledgeTransactionExport.arg1=inRefSoap.Body.ns:acknowledgeTransactionExport.arg1;
		SET outRefSoap.Body.ns:acknowledgeTransactionExport.arg2=inRefSoap.Body.ns:acknowledgeTransactionExport.arg2;
		DECLARE OutRefer REFERENCE TO OutputRoot.SOAP;
		DECLARE envref REFERENCE TO Environment.SOAP;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'SOAP';
		SET envref = OutRefer;
		DECLARE reqData CHARACTER'';
		SET Environment.reqData = getPayLoad(FIELDNAME(InputBody),OutputRoot.SOAP.Body,encodeRef,ccsid);
		SET OutputRoot = NULL;
		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
		/* =================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','..............Start SmallWorld Remittance Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','SmallWorld Remittance acknowledgeTransactionExport Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG',Environment.reqData) INTO rc;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.reqData,'SmallWorld Remittance acknowledgeTransactionExport  Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.SOAP = envref;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Operation = bindingOperatingName;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.Timeout = request_Time_Out;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.SSLProtocol = Protocal;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = URL;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;

CREATE COMPUTE MODULE SmallWorldRemitAcknowledgeTransactionExport_GenResToT24AcknowledgeTransaction
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL GenerateResToT24AcknowledgeTransactionExport();
		RETURN FALSE;
	END;



	CREATE PROCEDURE GenerateResToT24AcknowledgeTransactionExport() BEGIN
		DECLARE rc BOOLEAN FALSE;
		/* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE bindingOperatingName CHARACTER'';
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE serviceName REFERENCE TO InputRoot.SOAP.Body.[1];
		SET bindingOperatingName = FIELDNAME(serviceName);
		SET Environment.resMsg = getPayLoad(FIELDNAME(InputBody),inRef.SOAP,encodeRef,ccsid);
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.resMsg,'SmallWorld Remittance acknowledgeTransactionExport Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','..............Start SmallWorld Remittance  Response  logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','SmallWorld Remittance acknowledgeTransactionExport Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG',Environment.resMsg) INTO rc;
		END IF;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE outRefSoap REFERENCE TO OutputRoot.XMLNSC;
		SET outRefSoap=InputRoot.SOAP;
		DECLARE OutRefer REFERENCE TO OutputRoot.XMLNSC;
		DECLARE envref REFERENCE TO Environment.XMLNSC;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'XMLNSC';
		SET envref = OutRefer;
		DECLARE reqMsgT24 CHARACTER'';
		SET Environment.reqMsgT24 = getPayLoad(FIELDNAME(InputBody),inRef.SOAP,encodeRef,ccsid);
		SET OutputRoot = NULL;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.MQRFH2.smallworld.operation='acknowledgeTransactionExport';
		SET OutputRoot.XMLNSC.smallworld = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = SOAP_RES_Q;
		PROPAGATE TO TERMINAL 'out';
	END;

END MODULE;
CREATE COMPUTE MODULE SmallWorldRemitAcknowledgeTransactionExport_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildException();
		RETURN FALSE;
	END;



	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE mqrfRef REFERENCE TO InputRoot.MQRFH2;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;

		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'SocketException') THEN

			SET errMsg = 'SmallWorld Remittance Server Down';
			CALL errorResponse(mqrfRef,'SmallWorld Remittance Server Down','ESB_001',ApplicationLabel);
		ELSEIF CONTAINS(excpRef.excpText,'WebService Request Exception') THEN
		SET errMsg = 'WebService Request Exception errors have occurred';	
				CALL errorResponse(mqrfRef,'WebService Request Exception','ESB_002',ApplicationLabel);
		END IF;


		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		-- DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SmallWorldRemittanceAcknowledgeTransactionResponse';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SmallWorldRemittanceAcknowledgeTransactionResponse');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;
		--




		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SmallWorldRemittanceAcknowledgeTransactionResponse.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out';
		----------------------------------
	END;
	CREATE PROCEDURE errorResponse(IN mqrfRef REFERENCE, IN msg CHAR,IN errorCode CHAR,IN applicationLabel CHAR)
	BEGIN
		SET OutputRoot.MQRFH2 = mqrfRef;
		SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:ns1 = ns1;
		SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
		SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:Message=msg;
		SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ErrorCode=errorCode;
		SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ServiceName=applicationLabel;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = SOAP_RES_Q;

		PROPAGATE TO TERMINAL 'out';
		-- END IF;
	END;


END MODULE;
CREATE COMPUTE MODULE SmallWorldRemitGetTransactionExport_GenReqToSWGetTransaction
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL GenReqToSmallWorldGetTransactionExport();
		RETURN FALSE;
	END;
	CREATE PROCEDURE GenReqToSmallWorldGetTransactionExport() BEGIN
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		SET Environment.Variables.RequestIdentifier = InputRoot.MQRFH2.usr.SoapReplyIdentifier;
		DECLARE reqMsg,bindingOperatingName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE DBDetails ROW;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE serviceName REFERENCE TO InputRoot.SOAP.Body.[<];
		SET bindingOperatingName = FIELDNAME(serviceName);
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.SOAP,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.reqMsg = reqMsg;     
		SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		--CREATE LASTCHILD OF InputRoot DOMAIN 'SOAP';
		DECLARE inRefSoap REFERENCE TO InputRoot.SOAP;
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		/* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;

		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','..............Start Application Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','Incoming Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG',reqMsg) INTO rc;
		END IF;
		/* ========================== FIELD TO FIELD MAPPING =============================================== */
			CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outRefSoap REFERENCE TO OutputRoot.SOAP;
		SET outRefSoap.Context.operation=inRefSoap.Context.operation;
		SET outRefSoap.Context.operationType = inRefSoap.Context.operationType;
		SET outRefSoap.Context.portType = inRefSoap.Context.portType;
		SET outRefSoap.Context.portTypeNamespace = inRefSoap.Context.portTypeNamespace;
		SET outRefSoap.Context.port = inRefSoap.Context.port;
		SET outRefSoap.Context.service = inRefSoap.Context.service;
		SET outRefSoap.Context.fileName = inRefSoap.Context.fileName;
		SET outRefSoap.Context.SOAP_Version = inRefSoap.Context.SOAP_Version;
		SET outRefSoap.Context.Namespace.soapenv = soapenv;
		SET outRefSoap.Context.Namespace.web = ns;     
		SET outRefSoap.Context.XmlRoot.Envelope.Header = inRefSoap.Context.XmlRoot.Envelope.Header;
		SET outRefSoap.Context.XmlRoot.Envelope.Body = inRefSoap.Context.XmlRoot.Envelope.Body;
		SET outRefSoap.Header[] = inRefSoap.Header[];
		SET outRefSoap.Body.ns:getTransactionExportTransactions.arg0=inRefSoap.Body.ns:getTransactionExportTransactions.arg0;
		SET outRefSoap.Body.ns:getTransactionExportTransactions.arg1=inRefSoap.Body.ns:getTransactionExportTransactions.arg1;
		SET outRefSoap.Body.ns:getTransactionExportTransactions.arg2=inRefSoap.Body.ns:getTransactionExportTransactions.arg2;
		DECLARE OutRefer REFERENCE TO OutputRoot.SOAP;
		DECLARE envref REFERENCE TO Environment.SOAP;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'SOAP';
		SET envref = OutRefer;
		DECLARE reqData CHARACTER'';
		SET Environment.reqData = getPayLoad(FIELDNAME(InputBody),OutputRoot.SOAP.Body,encodeRef,ccsid);
		SET OutputRoot = NULL;
		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
		/* =================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','..............Start SmallWorld Remittance Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','SmallWorld Remittance getTransactionExportTransactions Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG',Environment.reqData) INTO rc;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.reqData,'SmallWorld Remittance getTransactionExportTransactions Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.SOAP = envref;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Operation = bindingOperatingName;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.Timeout = request_Time_Out;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.SSLProtocol = Protocal;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = URL;
		PROPAGATE TO TERMINAL 'out';

	END;
END MODULE;
CREATE COMPUTE MODULE SmallWorldRemitGetTransactionExport_GenResToT24GetTransaction
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReSToT24GetTransaction();
		RETURN FALSE;
	END;

	CREATE PROCEDURE GenerateReSToT24GetTransaction() BEGIN
		DECLARE rc BOOLEAN FALSE;
		/* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE bindingOperatingName CHARACTER'';
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE serviceName REFERENCE TO InputRoot.SOAP.Body.[1];
		SET bindingOperatingName = FIELDNAME(serviceName);
		SET Environment.resMsg = getPayLoad(FIELDNAME(InputBody),inRef.SOAP,encodeRef,ccsid);
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.resMsg,'SmallWorld Remittance getTransactionExportTransactions Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','..............Start SmallWorld Remittance  Response  logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','SmallWorld Remittance getTransactionExportTransactions Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG',Environment.resMsg) INTO rc;
		END IF;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE outRefSoap REFERENCE TO OutputRoot.XMLNSC;
		SET outRefSoap=InputRoot.SOAP;
		DECLARE OutRefer REFERENCE TO OutputRoot.XMLNSC;
		DECLARE envref REFERENCE TO Environment.XMLNSC;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'XMLNSC';
		SET envref = OutRefer;
		DECLARE reqMsgT24 CHARACTER'';
		SET Environment.reqMsgT24 = getPayLoad(FIELDNAME(InputBody),inRef.SOAP,encodeRef,ccsid);
		SET OutputRoot = NULL;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.MQRFH2.smallworld.operation='getTransactionExportTransactions';
		SET OutputRoot.XMLNSC.smallworld = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = SOAP_RES_Q;
		PROPAGATE TO TERMINAL 'out';
	END;


END MODULE;

CREATE COMPUTE MODULE SmallWorldRemitGetTransactionExport_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildException();
		RETURN FALSE;
	END;
	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE mqrfRef REFERENCE TO InputRoot.MQRFH2;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;

		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'SocketException') THEN
		SET errMsg = 'SmallWorld Remittance Server Down';
		CALL errorResponse(mqrfRef,'SmallWorld Remittance Server Down','ESB_001',ApplicationLabel);
		ELSEIF CONTAINS(excpRef.excpText,'WebService Request Exception') THEN
		SET errMsg = 'WebService Request Exception errors have occurred';	
				CALL errorResponse(mqrfRef,'WebService Request Exception','ESB_002',ApplicationLabel);
				
		END IF;


		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		-- DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SmallWorldRemittanceGetTransactionResponse';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SmallWorldRemittanceGetTransactionResponse');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;

		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SmallWorldRemittanceGetTransactionResponse.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out';
		----------------------------------
	END;
	CREATE PROCEDURE errorResponse(IN mqrfRef REFERENCE,IN msg CHAR,IN errorCode CHAR,IN applicationLabel CHAR)
	BEGIN
		SET OutputRoot.MQRFH2 = mqrfRef;
		SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:ns1 = ns1;
		SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
		SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:Message=msg;
		SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ErrorCode=errorCode;
		SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ServiceName=applicationLabel;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = SOAP_RES_Q;

		PROPAGATE TO TERMINAL 'out';
		-- END IF;
	END;


END MODULE;


CREATE COMPUTE MODULE SmallWorldRemitUpdateTransactionExport_GenReqToSWUpdateTransaction
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL GenerateReqToSmallWorldUpdateTransaction();
		RETURN FALSE;
	END;


	CREATE PROCEDURE GenerateReqToSmallWorldUpdateTransaction() BEGIN
		SET Environment.MQRFH2= InputRoot.MQRFH2;
		SET Environment.Variables.RequestIdentifier = InputRoot.MQRFH2.usr.SoapReplyIdentifier;
		DECLARE reqMsg,bindingOperatingName CHARACTER '';
		DECLARE rc BOOLEAN FALSE;
		DECLARE DBDetails ROW;
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE serviceName REFERENCE TO InputRoot.SOAP.Body.[<];
		SET bindingOperatingName = FIELDNAME(serviceName);
		SET reqMsg = getPayLoad(FIELDNAME(InputBody),inRef.SOAP,encodeRef,ccsid);
		-- SET DBLogging Properties ==============
		SET Environment.reqMsg = reqMsg;
		SET Environment.msgID= CAST(InputRoot.MQRFH2.usr.Id AS CHARACTER );
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		CREATE LASTCHILD OF InputRoot DOMAIN 'SOAP';
		DECLARE inRefSoap REFERENCE TO InputRoot.SOAP;
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		/* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;

		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','..............Start Application Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','Incoming Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG',reqMsg) INTO rc;
		END IF;
		/* ========================== FIELD TO FIELD MAPPING =============================================== */
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		DECLARE outRefSoap REFERENCE TO OutputRoot.SOAP;
		SET outRefSoap.Context.operation=inRefSoap.Context.operation;
		SET outRefSoap.Context.operationType = inRefSoap.Context.operationType;
		SET outRefSoap.Context.portType = inRefSoap.Context.portType;
		SET outRefSoap.Context.portTypeNamespace = inRefSoap.Context.portTypeNamespace;
		SET outRefSoap.Context.port = inRefSoap.Context.port;
		SET outRefSoap.Context.service = inRefSoap.Context.service;
		SET outRefSoap.Context.fileName = inRefSoap.Context.fileName;
		SET outRefSoap.Context.SOAP_Version = inRefSoap.Context.SOAP_Version;
		SET outRefSoap.Context.Namespace.soapenv = soapenv;
		SET outRefSoap.Context.Namespace.web = ns;
		SET outRefSoap.Context.XmlRoot.Envelope.Header = inRefSoap.Context.XmlRoot.Envelope.Header;
		SET outRefSoap.Context.XmlRoot.Envelope.Body = inRefSoap.Context.XmlRoot.Envelope.Body;
		SET outRefSoap.Header[] = inRefSoap.Header[];
		SET outRefSoap.Body.ns:updateTransactionExport.arg0=inRefSoap.Body.ns:updateTransactionExport.arg0;
		SET outRefSoap.Body.ns:updateTransactionExport.arg1=inRefSoap.Body.ns:updateTransactionExport.arg1;
		SET outRefSoap.Body.ns:updateTransactionExport.arg2=inRefSoap.Body.ns:updateTransactionExport.arg2;
		DECLARE OutRefer REFERENCE TO OutputRoot.SOAP;
		DECLARE envref REFERENCE TO Environment.SOAP;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'SOAP';
		SET envref = OutRefer;
		DECLARE reqData CHARACTER'';
		SET Environment.reqData = getPayLoad(FIELDNAME(InputBody),OutputRoot.SOAP.Body,encodeRef,ccsid);
		SET OutputRoot = NULL;
		/* =================== CALLING LOG4J LOGGING ENDING ==============*/
		/* =================== CALLING DB RAW AUDIT LOGGING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','..............Start SmallWorld Remittance Request logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','SmallWorld Remittance updateTransactionExport Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG',Environment.reqData) INTO rc;
		END IF;
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.reqData,'SmallWorld Remittance updateTransactionExport Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.SOAP = envref;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Operation = bindingOperatingName;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.Timeout = request_Time_Out;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.SSLProtocol = Protocal;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL = URL;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;



CREATE COMPUTE MODULE SmallWorldRemitUpdateTransactionExport_GenResToT24UpdateTransaction
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL GenerateResToT24UpdateTransaction();
		RETURN FALSE;
	END;


	CREATE PROCEDURE GenerateResToT24UpdateTransaction() BEGIN
		DECLARE rc BOOLEAN FALSE;
		/* =================== CALLING LOG4J LOGGING ==============*/
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE bindingOperatingName CHARACTER'';
		DECLARE ccsid INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE inRef REFERENCE TO InputRoot;
		DECLARE serviceName REFERENCE TO InputRoot.SOAP.Body.[1];
		SET bindingOperatingName = FIELDNAME(serviceName);
		SET Environment.resMsg = getPayLoad(FIELDNAME(InputBody),inRef.SOAP.Body,encodeRef,ccsid);
		DECLARE outRefer REFERENCE TO OutputRoot;
		-- =================== CALLING DB RAW AUDIT LOGGING ==============
		IF IsLogRequired LIKE 'Y' THEN
			CALL DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.resMsg,'SmallWorld Remittance updateTransactionExport Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',outRefer);
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_QNAME;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		/* =================== CALLING DB RAW AUDIT LOGGING ENDING ==============*/
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','..............Start SmallWorld Remittance  Response  logging...........') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG','SmallWorld Remittance updateTransactionExport Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'SmallWorldRemittance', 'DEBUG',Environment.resMsg) INTO rc;
		END IF;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE outRefSoap REFERENCE TO OutputRoot.XMLNSC;
		SET outRefSoap=InputRoot.SOAP;
		DECLARE OutRefer REFERENCE TO OutputRoot.XMLNSC;
		DECLARE envref REFERENCE TO Environment.XMLNSC;
		CREATE LASTCHILD OF Environment AS envref DOMAIN 'XMLNSC';
		SET envref = OutRefer;
		DECLARE reqMsgT24 CHARACTER'';
		SET Environment.reqMsgT24 = getPayLoad(FIELDNAME(InputBody),inRef.SOAP,encodeRef,ccsid);
		SET OutputRoot = NULL;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.MQRFH2.smallworld.operation='updateTransactionExport';
		SET OutputRoot.XMLNSC.smallworld = envref;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = SOAP_RES_Q;
		PROPAGATE TO TERMINAL 'out';
	END;
END MODULE;

CREATE COMPUTE MODULE SmallWorldRemitUpdateTransactionExport_BuildExceptionDetails
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL BuildException();
		RETURN FALSE;
	END;


	CREATE PROCEDURE BuildException() BEGIN
		DECLARE rc BOOLEAN FALSE;
		DECLARE mqrfRef REFERENCE TO InputRoot.MQRFH2;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;

		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE errMsg CHARACTER;
		IF CONTAINS(excpRef.excpText,'SocketException') THEN

			SET errMsg = 'SmallWorld Remittance Server Down';
			CALL errorResponse(mqrfRef,'SmallWorld Remittance Server Down','ESB_001',ApplicationLabel);
		ELSEIF CONTAINS(excpRef.excpText,'WebService Request Exception') THEN
		SET errMsg = 'WebService Request Exception errors have occurred';	
				CALL errorResponse(mqrfRef,'WebService Request Exception','ESB_002',ApplicationLabel);	
		END IF;
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		-- DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'SmallWorldRemittanceUpdateTransactionResponse';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'SmallWorldRemittanceUpdateTransactionResponse');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		SET OutputRoot.XMLNSC = NULL;

		SET OutputRoot.XMLNSC = Environment.Variables.UserDefinedErrorCodes;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.usr.SoapReplyIdentifier,Environment.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.dbLog.dbLogTime,Environment.MQRFH2.usr.dbLog.dbLogDate,'',CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.SmallWorldRemittanceUpdateTransactionResponse.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||exe_Desc) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERROR_AUDIT_QNAME;
		PROPAGATE TO TERMINAL 'out';
		----------------------------------
	END;
	CREATE PROCEDURE errorResponse(IN mqrfRef REFERENCE, IN msg CHAR,IN errorCode CHAR,IN applicationLabel CHAR)
	BEGIN
		SET OutputRoot.MQRFH2 = mqrfRef;
		SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:ns1 = ns1;
		SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
		SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:Message=msg;
		SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ErrorCode=errorCode;
		SET OutputRoot.XMLNSC.soapenv:Envelope.ns1:ErrorResponse.ns1:ServiceName=applicationLabel;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = SOAP_RES_Q;

		PROPAGATE TO TERMINAL 'out';
		-- END IF;
	END;
END MODULE;