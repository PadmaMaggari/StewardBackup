BROKER SCHEMA com.stewardbank.co.zw.common.t24call
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE MAX_RETRY_COUNT EXTERNAL INTEGER 0;
DECLARE INIT_LOG4J_ERROR EXTERNAL CHARACTER '';
DECLARE RETRY_INTERVAL EXTERNAL INTEGER 0;

CREATE COMPUTE MODULE StewardBankT24SubFlow
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = INIT_LOG4J_ERROR;
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR',INIT_LOG4J_ERROR) INTO rc;
		END IF;
		IF Environment.Variables.Counter IS NULL THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Environment.Variables.Counter is null maybe didnt capture tcp exceptionMsg') INTO rc;
			SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
			SET OutputRoot.Properties = InputRoot.Properties;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;
		CALL CopyEntireMessage();
		IF Environment.Variables.Retry.Counter IS NULL THEN
			SET Environment.Variables.Retry.Counter = 1;
		END IF;
		IF Environment.Variables.Retry.Counter <= MAX_RETRY_COUNT THEN
			CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','retry count for connection:'||CAST(Environment.Variables.Retry.Counter AS CHARACTER)) INTO rc;
			DECLARE envRef REFERENCE TO Environment.Variables.Retry;
			IF envRef.Counter = 1 THEN
				SET envRef.Counter = envRef.Counter + 1;
			ELSE
				SET envRef.Counter = envRef.Counter + 1;
				CALL retryWithDelay(envRef.Counter);
				CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','retry the request after '||CAST(RETRY_INTERVAL AS CHARACTER)||' sec delay for current count:'||CAST(envRef.Counter AS CHARACTER)||'is Complete') INTO rc;
				RETURN TRUE;
			END IF;
		ELSE
			SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
			SET OutputRoot.Properties = InputRoot.Properties;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		END IF;

	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	CREATE PROCEDURE retryWithDelay(IN count INTEGER) BEGIN
		IF count <= MAX_RETRY_COUNT AND count > 1 THEN
			DECLARE varDelay BOOLEAN SLEEP(RETRY_INTERVAL);
		END IF;
	END;
END MODULE;
