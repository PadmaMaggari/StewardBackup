BROKER SCHEMA com.stewardbank.co.zw.balanceenquiry
PATH com.stewardbank.co.zw.common.esql;
DECLARE LOG_CONFIG_PATH EXTERNAL CHARACTER '';
DECLARE IsLogRequired EXTERNAL CHARACTER '';
DECLARE RAW_AUDIT_Q EXTERNAL CHARACTER '';
DECLARE ERR_AUDIT_Q EXTERNAL CHARACTER;
DECLARE EXCEPTION_Q EXTERNAL CHARACTER '';
DECLARE LOG4J_INIT_ERROR_MSG EXTERNAL CHARACTER '';

CREATE COMPUTE MODULE BalanceEnquiryHTTPFlow_GenerateReqToPostilion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToPostilion();
		RETURN TRUE;
	END;
	CREATE PROCEDURE GenerateReqToPostilion() BEGIN
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		--------------DBLogging-------------------
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Application Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-----------------------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG','Application Request::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;   
		END IF;
		--field to field mapping
		--SET OutputRoot = null;
		--CALL JSONToISOMapping(inRef,outRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
		SET outRef.MTI_Version = 0;
		SET outRef.MTI_MessageClass = 2;
		SET outRef.MTI_MessageFunction = 0;
		SET outRef.MTI_MessageOrigin = 0;
		SET outRef.ProcessingCode_003 = CAST(inRef.processingCode AS INTEGER);
		SET outRef.AccountIdentification2_103 = CAST(inRef.fromAccount AS INTEGER);
		CALL UpdateMsgWithAsciiBitMap(outRef);
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;
		SET domainName = FIELDNAME(outDomainDataRef);
		SET Environment.Variables.resMsg = getPayLoad(domainName,outDomainDataRef,encodeRef,ccidRef);
		SET Environment.dfdlData = OutputRoot.DFDL;
		
		--------------DBLogging-------------------
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Postilion Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		SET OutputRoot.DFDL = NULL;
		PROPAGATE TO TERMINAL 'out1';
		-----------------------------
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG','Request To Postilion::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
	END;	
END MODULE;

CREATE COMPUTE MODULE BalanceEnquiryHTTPFlow_GenerateReqToPostilion1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL GenerateReqToPostilion();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToPostilion() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		--------------DBLogging-------------------
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'T24 Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-----------------------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG','T24 Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;   
		END IF;
		--field to field mapping
		--CALL JSONToISOMapping(inRef,outRef);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		CREATE LASTCHILD OF OutputRoot.DFDL NAME 'ISO8583_1987';
		DECLARE outRef REFERENCE TO OutputRoot.DFDL.ISO8583_1987;
--		SET outRef.MTI_Version = 0;
--		SET outRef.MTI_MessageClass = 2;
--		SET outRef.MTI_MessageFunction = 0;
--		SET outRef.MTI_MessageOrigin = 0;
--		SET outRef.ProcessingCode_003 = CAST(inRef.Data.proccessingCode AS INTEGER);
--		CALL UpdateMsgWithAsciiBitMap(outRef);
		SET OutputRoot.DFDL = InputRoot.DFDL;
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET domainName = FIELDNAME(outDomainDataRef);
		SET Environment.Variables.resMsg = getPayLoad(domainName,outDomainDataRef,encodeRef,ccidRef);
		--------------DBLogging-------------------
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Postilion Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		SET OutputRoot.DFDL = NULL;
		PROPAGATE TO TERMINAL 'out1';
		-----------------------------
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG','Request To Postilion::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
	END;	
END MODULE;

CREATE COMPUTE MODULE BalanceEnquiryHTTPFlow_GenerateReqToT24
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateReqToT24();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateReqToT24() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainDataRef REFERENCE TO InputRoot.JSON;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		--------------DBLogging-------------------
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Postilion Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-----------------------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG','Postilion Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;   
		END IF;
		--field to field mapping
		--SET OutputRoot = null;
		--CALL JSONToISOMapping(inRef,outRef);
		SET OutputRoot.DFDL = InputRoot.DFDL; 
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.DFDL;
		SET Environment.dfdlData = OutputRoot.DFDL;
		SET domainName = FIELDNAME(outDomainDataRef);
		SET Environment.Variables.resMsg = getPayLoad(domainName,outDomainDataRef,encodeRef,ccidRef);
		SET OutputRoot.DFDL = NULL;
		--------------DBLogging-------------------
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'T24 Request',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-----------------------------
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.DFDL = Environment.dfdlData;
		CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG','Request To Postilion::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
	END;
END MODULE;

CREATE COMPUTE MODULE BalanceEnquiryHTTPFlow_GenerateResToBackend
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL GenerateResToBackend();
		RETURN TRUE;
	END;

	CREATE PROCEDURE GenerateResToBackend() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.DFDL;
		DECLARE ccidRef INTEGER InputRoot.Properties.CodedCharSetId;
		DECLARE encodeRef INTEGER InputRoot.Properties.Encoding;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		SET Environment.Variables.reqMsg = getPayLoad(domainName,inRef,encodeRef,ccidRef);
		DECLARE outRefer REFERENCE TO OutputRoot;
		
		--------------DBLogging-------------------
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.reqMsg,'Postilion Response',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		-----------------------------
		IF IsLogRequired LIKE 'Y' THEN
			CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG','Postilion Response::') INTO rc;
			CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG',Environment.Variables.reqMsg) INTO rc;   
		END IF;
		--field to field mapping
		--CALL ISOToJSONMapping(inRef,outRef);
		MOVE inRef TO InputRoot.DFDL.*.PrimaryAccountNumber_002;
		CREATE LASTCHILD OF OutputRoot DOMAIN ('JSON');
		CREATE LASTCHILD OF OutputRoot.JSON NAME ('Data');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('statusCode');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('message');
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME ('responseBody');
		DECLARE domainDataRef REFERENCE TO OutputRoot.JSON;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		DECLARE isoRef REFERENCE TO OutputRoot.JSON.Data.responseBody;
		SET outRef.statusCode = '200'; 
        SET outRef.message = 'SUCCESS'; 
		CALL JSONLogMessage(inRef,isoRef);
		DECLARE outDomainDataRef REFERENCE TO OutputRoot.JSON;
		SET Environment.jsonData = OutputRoot.JSON;
		SET domainName = FIELDNAME(outDomainDataRef);
		SET Environment.Variables.resMsg = getPayLoad(domainName,outDomainDataRef,encodeRef,ccidRef);
		SET OutputRoot.JSON = NULL;
		--------------DBLogging-------------------
		CALL DBLogging(Environment.MQRFH2.RequestIdentifier,Environment.Variables.resMsg,'Response to Backend',ApplicationLabel,BrokerName,Environment.MQRFH2.usr.dbLogTime,Environment.MQRFH2.usr.dbLogDate,'',outRefer);
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = RAW_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out1';
		-----------------------------
		SET OutputRoot.Properties=InputRoot.Properties;
		SET OutputRoot.MQRFH2 = Environment.MQRFH2;
		SET OutputRoot.JSON = Environment.jsonData;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = Environment.MQRFH2.usr.resQueueName;
		CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG','Response to Backend::') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG',Environment.Variables.resMsg) INTO rc;
	END;
END MODULE;



CREATE COMPUTE MODULE BalanceEnquiryHTTPFlowCaptureException
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL BuildErrorMsg();
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;			
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = 'Initializing the log4j path error';		
		END IF;
		CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'BalEnqLogger', 'DEBUG',CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING 546 CCSID 1208 SET '{ISO8583_Lib}' TYPE '{}:ISO8583_1987') AS CHARACTER)) INTO rc;
		RETURN TRUE;
	END;

	CREATE PROCEDURE BuildErrorMsg() BEGIN
		DECLARE rc BOOLEAN FALSE;
		CALL initLog4j(LOG_CONFIG_PATH) INTO rc;
		IF ( rc = FALSE ) THEN
			SET Environment.Variables.Log4j.ErrorMsg = LOG4J_INIT_ERROR_MSG;		
		END IF;
		DECLARE excpRef REFERENCE TO InputRoot.XMLNSC.ExceptionDetails;
		DECLARE outRefer REFERENCE TO OutputRoot;
		DECLARE encodeRef REFERENCE TO InputRoot.Properties.Encoding;
		DECLARE ccidRef REFERENCE TO InputRoot.Properties.CodedCharSetId;
		DECLARE domainName CHARACTER FIELDNAME(InputBody);
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'BalanceEnquiry';
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.*;
		CALL BuildExceptionDetails(excpRef,outRef,'BalanceEnquiry');
		SET Environment.Variables.UserDefinedErrorCodes = OutputRoot.XMLNSC;
		DECLARE domainDataRef REFERENCE TO OutputRoot.XMLNSC;
		DECLARE exe_Desc CHARACTER getPayLoad(domainName,domainDataRef,encodeRef,ccidRef);  
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'DEBUG','..............Logging Exception ...........') INTO rc;
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Application Built Exception:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = EXCEPTION_Q;
		PROPAGATE TO TERMINAL 'out';
		------------Error  Logging in DB----------
		CALL Error_DBLogging(Environment.MQRFH2.usr.Id,Environment.Variables.reqMsg,'Application Error',ApplicationLabel,BrokerName,exe_Desc,Environment.MQRFH2.usr.timeLocalTransaction,Environment.MQRFH2.usr.dateLocalTransaction,Environment.MQRFH2.usr.retrievalReferenceNumber,CAST(excpRef.excpNumber AS CHARACTER),Environment.Variables.UserDefinedErrorCodes.BalanceEnquiry.ErrorCode,outRefer);
		CALL writeToLogFile(MessageFlowLabel, 'ErrorLogger', 'ERROR','Exception Created:'||getPayLoad(domainName,domainDataRef,encodeRef,ccidRef)) INTO rc;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = ERR_AUDIT_Q;
		PROPAGATE TO TERMINAL 'out';
		----------------------------------
	END;
END MODULE;